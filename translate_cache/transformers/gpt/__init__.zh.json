{
 "<h1>GPT</h1>\n<p>This is a tutorial/implementation of <a href=\"https://openai.com/blog/better-language-models/\">OpenAI GPT architecture</a> in <a href=\"https://pytorch.org\">PyTorch</a>. We got a bunch of implementation details from <a href=\"https://github.com/karpathy/minGPT\">minGPT</a> by <a href=\"https://twitter.com/karpathy\">@karpathy</a>. This implementation also uses character tiny shakespeare dataset.</p>\n<p>GPT model is essentially a standard transformer with a few tweaks. GPT-2 and especially GPT-3 models are quite large and won&#x27;t fit on a single GPU and will need model parallelism. This implementation doesn&#x27;t even use data parallelism and is intended to be more of a tutorial.</p>\n<p>Main differences of this compared to a simple autoregressive transformer are the parameter initialization, weight decay, and learning rate schedule. For the transformer we reuse the <a href=\"../transformers/index.html\">existing labml/nn transformer implementation</a>.</p>\n<p>Here&#x27;s a notebook for training a GPT model on Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/gpt/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n": "<h1>GPT</h1>\n</a><p>\u8fd9\u662f P <a href=\"https://pytorch.org\">yTorch</a> \u4e2d <a href=\"https://openai.com/blog/better-language-models/\">OpenAI GPT \u67b6\u6784\u7684\u6559\u7a0b/\u5b9e\u73b0\u3002<a href=\"https://twitter.com/karpathy\">@karpathy</a> \u4ece <a href=\"https://github.com/karpathy/minGPT\">MinGpt</a> \u90a3\u91cc\u5f97\u5230\u4e86\u5f88\u591a\u5b9e\u73b0\u7ec6\u8282\u3002\u6b64\u5b9e\u73b0\u8fd8\u4f7f\u7528\u89d2\u8272\u5c0f\u838e\u58eb\u6bd4\u4e9a\u6570\u636e\u96c6\u3002</p>\n<p>GPT \u6a21\u578b\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u53d8\u538b\u5668\uff0c\u4f46\u6709\u4e00\u4e9b\u8c03\u6574\u3002GPT-2\uff0c\u5c24\u5176\u662f GPT-3 \u6a21\u578b\u975e\u5e38\u5927\uff0c\u4e0d\u9002\u5408\u5355\u4e2a GPU\uff0c\u9700\u8981\u6a21\u578b\u5e76\u884c\u5904\u7406\u3002\u6b64\u5b9e\u73b0\u751a\u81f3\u4e0d\u4f7f\u7528\u6570\u636e\u5e76\u884c\u6027\uff0c\u65e8\u5728\u66f4\u50cf\u662f\u4e00\u4e2a\u6559\u7a0b\u3002</p>\n\u4e0e@@ <p>\u7b80\u5355\u7684\u81ea\u56de\u5f52\u8f6c\u6362\u5668\u76f8\u6bd4\uff0c\u5176\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u53c2\u6570\u521d\u59cb\u5316\u3001\u6743\u91cd\u8870\u51cf\u548c\u5b66\u4e60\u901f\u7387\u8c03\u5ea6\u3002\u5bf9\u4e8e\u53d8\u538b\u5668\uff0c\u6211\u4eec\u91cd\u7528\u4e86<a href=\"../transformers/index.html\">\u73b0\u6709\u7684 labml/nn \u53d8\u6362\u5668\u5b9e\u73b0</a>\u3002</p>\n<p>\u8fd9\u662f\u4e00\u672c\u7528\u4e8e\u5728 Tiny Shakespeare \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3 GPT \u6a21\u578b\u7684\u7b14\u8bb0\u672c\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/gpt/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n",
 "<h2>Configurations</h2>\n<p>This inherits from <a href=\"../../experiments/nlp_autoregression.html#NLPAutoRegressionConfigs\"><span translate=no>_^_0_^_</span></a></p>\n": "<h2>\u914d\u7f6e</h2>\n<p>\u8fd9\u7ee7\u627f\u81ea <a href=\"../../experiments/nlp_autoregression.html#NLPAutoRegressionConfigs\"><span translate=no>_^_0_^_</span></a></p>\n",
 "<h2>GPT model</h2>\n<p>This consists of a token embedding layer, transformer encoder, and a final linear layer that gives token logits.</p>\n": "<h2>GPT \u578b\u53f7</h2>\n<p>\u8fd9\u5305\u62ec\u4ee4\u724c\u5d4c\u5165\u5c42\u3001\u53d8\u538b\u5668\u7f16\u7801\u5668\u548c\u7ed9\u51fa\u4ee4\u724c\u65e5\u5fd7\u7684\u6700\u7ec8\u7ebf\u6027\u5c42\u3002</p>\n",
 "<h3>Create custom optimizer with weight decay</h3>\n<p>This code is taken from <a href=\"https://github.com/karpathy/minGPT\">minGPT</a>. This applies weight decay only to weights of linear layers.</p>\n": "<h3>\u521b\u5efa\u5177\u6709\u6743\u91cd\u8870\u51cf\u7684\u81ea\u5b9a\u4e49\u4f18\u5316\u5668</h3>\n<p>\u6b64\u4ee3\u7801\u53d6\u81ea <a href=\"https://github.com/karpathy/minGPT\">MingPT</a>\u3002\u8fd9\u4ec5\u5c06\u6743\u91cd\u8870\u51cf\u5e94\u7528\u4e8e\u7ebf\u6027\u56fe\u5c42\u7684\u6743\u91cd\u3002</p>\n",
 "<h3>Initialize weights</h3>\n<p>Weights of linear layers and embedding layers are initialized to <span translate=no>_^_0_^_</span> instead of the default Xavier initialzation.</p>\n": "<h3>\u521d\u59cb\u5316\u6743\u91cd</h3>\n<p>\u7ebf\u6027\u5c42\u548c\u5d4c\u5165\u5c42\u7684\u6743\u91cd\u521d\u59cb\u5316\u4e3a\uff0c<span translate=no>_^_0_^_</span>\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684 Xavier \u521d\u59cb\u5316\u3002</p>\n",
 "<h3>Transformer configurations</h3>\n": "<h3>\u53d8\u538b\u5668\u914d\u7f6e</h3>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p> Create GPT model and initialize weights</p>\n": "<p>\u521b\u5efa GPT \u6a21\u578b\u5e76\u521d\u59cb\u5316\u6743\u91cd</p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p>Apply custom weight initialization </p>\n": "<p>\u5e94\u7528\u81ea\u5b9a\u4e49\u6743\u91cd\u521d\u59cb\u5316</p>\n",
 "<p>Batch size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6279\u91cf\u5927\u5c0f<span translate=no>_^_0_^_</span></p>\n",
 "<p>Collect names of parameters to apply weight decay </p>\n": "<p>\u6536\u96c6\u53c2\u6570\u540d\u79f0\u4ee5\u5e94\u7528\u6743\u91cd\u8870\u51cf</p>\n",
 "<p>Create a <a href=\"../optimizers/configs.html#OptimizerConfigs\">configurable optimizer</a>, so that we can change these simply by passing a config dictionary. </p>\n": "<p>\u521b\u5efa\u4e00\u4e2a<a href=\"../optimizers/configs.html#OptimizerConfigs\">\u53ef\u914d\u7f6e\u7684\u4f18\u5316\u5668</a>\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u914d\u7f6e\u5b57\u5178\u6765\u66f4\u6539\u5b83\u4eec\u3002</p>\n",
 "<p>Create configs </p>\n": "<p>\u521b\u5efa\u914d\u7f6e</p>\n",
 "<p>Create experiment </p>\n": "<p>\u521b\u5efa\u5b9e\u9a8c</p>\n",
 "<p>Create subsequent mask if mask is not initialized or if the size of the mask is different </p>\n": "<p>\u5982\u679c\u63a9\u7801\u672a\u521d\u59cb\u5316\u6216\u63a9\u7801\u5927\u5c0f\u4e0d\u540c\uff0c\u5219\u521b\u5efa\u540e\u7eed\u63a9\u7801</p>\n",
 "<p>Custom optimizer </p>\n": "<p>\u81ea\u5b9a\u4e49\u4f18\u5316\u5668</p>\n",
 "<p>GPT model </p>\n": "<p>GPT \u578b\u53f7</p>\n",
 "<p>GPT uses GELU activation for position wise feedforward </p>\n": "<p>GPT \u4f7f\u7528 GELU \u6fc0\u6d3b\u8fdb\u884c\u4f4d\u7f6e\u660e\u667a\u524d\u9988</p>\n",
 "<p>GPT uses a maximum learning rate of <span translate=no>_^_0_^_</span>. </p>\n": "<p>GPT \u4f7f\u7528\u7684\u6700\u5927\u5b66\u4e60\u901f\u7387\u4e3a<span translate=no>_^_0_^_</span>\u3002</p>\n",
 "<p>Get all the parameters </p>\n": "<p>\u83b7\u53d6\u6240\u6709\u53c2\u6570</p>\n",
 "<p>Get logits </p>\n": "<p>\u83b7\u53d6\u65e5\u5fd7</p>\n",
 "<p>Get the token embeddings with positional encodings </p>\n": "<p>\u4f7f\u7528\u4f4d\u7f6e\u7f16\u7801\u83b7\u53d6\u4ee4\u724c\u5d4c\u5165</p>\n",
 "<p>Initialize biases to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5c06\u504f\u5dee\u521d\u59cb\u5316\u4e3a<span translate=no>_^_0_^_</span></p>\n",
 "<p>Number of tokens for wamup </p>\n": "<p>wamup \u7684\u4ee3\u5e01\u6570\u91cf</p>\n",
 "<p>Number of warmup optimization steps </p>\n": "<p>\u9884\u70ed\u4f18\u5316\u6b65\u9aa4\u6570</p>\n",
 "<p>Override configurations </p>\n": "<p>\u8986\u76d6\u914d\u7f6e</p>\n",
 "<p>Parameters that are not decayed </p>\n": "<p>\u672a\u8870\u51cf\u7684\u53c2\u6570</p>\n",
 "<p>Prompt separator is blank </p>\n": "<p>\u63d0\u793a\u5206\u9694\u7b26\u4e3a\u7a7a</p>\n",
 "<p>Return results (second value is for state, since our trainer is used with RNNs also) </p>\n": "<p>\u8fd4\u56de\u7ed3\u679c\uff08\u7b2c\u4e8c\u4e2a\u503c\u7528\u4e8e\u72b6\u6001\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u8bad\u7ec3\u5668\u4e5f\u4e0e RNN \u4e00\u8d77\u4f7f\u7528\uff09</p>\n",
 "<p>Run training </p>\n": "<p>\u8dd1\u6b65\u8bad\u7ec3</p>\n",
 "<p>Set default weight decay. This is not required since we set the weight decay in the parameter groups. </p>\n": "<p>\u8bbe\u7f6e\u9ed8\u8ba4\u6743\u91cd\u8870\u51cf\u3002\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u53c2\u6570\u7ec4\u4e2d\u8bbe\u7f6e\u4e86\u6743\u91cd\u8870\u51cf\u3002</p>\n",
 "<p>Set model embedding size, required if we use <a href=\"../optimizers/noam.html\">Noam optimizer</a> which has an exponential decay. </p>\n": "<p>\u8bbe\u7f6e\u6a21\u578b\u5d4c\u5165\u5927\u5c0f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5177\u6709\u6307\u6570\u8870\u51cf\u7684 <a href=\"../optimizers/noam.html\">Noam \u4f18\u5316\u5668</a>\uff0c\u5219\u9700\u8981\u8bbe\u7f6e\u6a21\u578b\u5d4c\u5165\u5927\u5c0f\u3002</p>\n",
 "<p>Set models for saving and loading </p>\n": "<p>\u8bbe\u7f6e\u7528\u4e8e\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u6a21\u578b</p>\n",
 "<p>Set parameter groups for optimization. </p>\n": "<p>\u8bbe\u7f6e\u53c2\u6570\u7ec4\u4ee5\u8fdb\u884c\u4f18\u5316\u3002</p>\n",
 "<p>Set the vocabulary sizes for embeddings and generating logits </p>\n": "<p>\u8bbe\u7f6e\u5d4c\u5165\u548c\u751f\u6210 logit \u7684\u8bcd\u6c47\u91cf\u5927\u5c0f</p>\n",
 "<p>Start the experiment </p>\n": "<p>\u5f00\u59cb\u5b9e\u9a8c</p>\n",
 "<p>Starting prompt for sampling </p>\n": "<p>\u5f00\u59cb\u91c7\u6837\u63d0\u793a</p>\n",
 "<p>Subsequent mask, will mask out tokens from seeing future tokens </p>\n": "<p>\u540e\u7eed\u7684\u63a9\u7801\uff0c\u5c06\u63a9\u76d6\u4ee4\u724c\u4ee5\u514d\u770b\u5230\u672a\u6765\u7684\u4ee3\u5e01</p>\n",
 "<p>Switch between training and validation for <span translate=no>_^_0_^_</span> times per epoch </p>\n": "<p>\u5728\u8bad\u7ec3\u548c\u9a8c\u8bc1\u4e4b\u95f4\u5207\u6362\u6bcf\u4e2a\u7eaa\u5143\u7684<span translate=no>_^_0_^_</span>\u6b21\u6570</p>\n",
 "<p>The mask will be initialized on the first call </p>\n": "<p>\u63a9\u7801\u5c06\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u521d\u59cb\u5316</p>\n",
 "<p>Total number of optimization steps for learning rate cosine decay </p>\n": "<p>\u5b66\u4e60\u901f\u7387\u4f59\u5f26\u8870\u51cf\u7684\u4f18\u5316\u6b65\u9aa4\u603b\u6570</p>\n",
 "<p>Train for <span translate=no>_^_0_^_</span> epochs </p>\n": "<p>\u4e3a<span translate=no>_^_0_^_</span>\u65f6\u4ee3\u800c\u8bad\u7ec3</p>\n",
 "<p>Transformer </p>\n": "<p>\u53d8\u538b\u5668</p>\n",
 "<p>Transformer configurations </p>\n": "<p>\u53d8\u538b\u5668\u914d\u7f6e</p>\n",
 "<p>Transformer encoder </p>\n": "<p>\u53d8\u538b\u5668\u7f16\u7801</p>\n",
 "<p>Use <a href=\"../optimizers/adam_warmup_cosine_decay.html\">cosine decay optimizer</a>. This is what GPT uses. </p>\n": "<p>\u4f7f\u7528<a href=\"../optimizers/adam_warmup_cosine_decay.html\">\u4f59\u5f26\u8870\u51cf\u4f18\u5316\u5668</a>\u3002\u8fd9\u5c31\u662f GPT \u4f7f\u7528\u7684\u3002</p>\n",
 "<p>Use Tiny Shakespeare dataset </p>\n": "<p>\u4f7f\u7528\u5c0f\u838e\u58eb\u6bd4\u4e9a\u6570\u636e\u96c6</p>\n",
 "<p>Use a context size of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u4f7f\u7528\u4e0a\u4e0b\u6587\u5927\u5c0f\u4e3a<span translate=no>_^_0_^_</span></p>\n",
 "<p>Use character level tokenizer </p>\n": "<p>\u4f7f\u7528\u89d2\u8272\u7b49\u7ea7\u5206\u8bcd\u5668</p>\n",
 "<p>We use our <a href=\"../configs.html#TransformerConfigs\">configurable transformer implementation</a> </p>\n": "<p>\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684<a href=\"../configs.html#TransformerConfigs\">\u53ef\u914d\u7f6e\u53d8\u538b\u5668\u5b9e\u73b0</a></p>\n",
 "<p>Weight decay </p>\n": "<p>\u4f53\u91cd\u8870\u51cf</p>\n",
 "<p>Weight decay is decoupled from gradients </p>\n": "<p>\u6743\u91cd\u8870\u51cf\u4e0e\u68af\u5ea6\u5206\u79bb</p>\n",
 "<p>create the pytorch optimizer object </p>\n": "<p>\u521b\u5efa pytorch \u4f18\u5316\u5668\u5bf9\u8c61</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the transformer <a href=\"../models.html#Encoder\">Encoder</a> </li>\n<li><span translate=no>_^_1_^_</span> is the token <a href=\"../models.html#EmbeddingsWithLearnedPositionalEncoding\">embedding module (with positional encodings)</a> </li>\n<li><span translate=no>_^_2_^_</span> is the <a href=\"../models.html#Generator\">final fully connected layer</a> that gives the logits.</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u53d8\u538b\u5668<a href=\"../models.html#Encoder\">\u7f16\u7801\u5668</a></li>\n<li><span translate=no>_^_1_^_</span>\u662f\u4ee4\u724c<a href=\"../models.html#EmbeddingsWithLearnedPositionalEncoding\">\u5d4c\u5165\u6a21\u5757\uff08\u5e26\u6709\u4f4d\u7f6e\u7f16\u7801\uff09</a></li>\n<li><span translate=no>_^_2_^_</span>\u662f\u7ed9<a href=\"../models.html#Generator\">\u51fa logit \u7684\u6700\u540e\u4e00\u4e2a\u5b8c\u5168\u8fde\u63a5\u7684\u5c42</a>\u3002</li></ul>\n",
 "GPT": "GPT",
 "Implementation/tutorial of GPT model and training code.": "GPT \u6a21\u578b\u548c\u8bad\u7ec3\u4ee3\u7801\u7684\u5b9e\u73b0/\u6559\u7a0b\u3002"
}