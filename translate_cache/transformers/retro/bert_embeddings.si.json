{
 "<h1>BERT Embeddings of chunks of text</h1>\n<p>This is the code to get BERT embeddings of chunks for <a href=\"index.html\">RETRO model</a>.</p>\n": "<h1>\u0db4\u0dd9\u0dc5\u0d9a\u0dd0\u0db6\u0dbd\u0dd2 \u0dc0\u0dbd \u0db6\u0dbb\u0dca\u0da7\u0dca \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca</h1>\n<p><a href=\"index.html\">RETRO \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba</a>\u0dc3\u0db3\u0dc4\u0dcf \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc0\u0dbd BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0dda \u0d9a\u0dda\u0dad\u0dba \u0db8\u0dd9\u0dba\u0dba\u0dd2. </p>\n",
 "<h2>BERT Embeddings</h2>\n<p>For a given chunk of text <span translate=no>_^_0_^_</span> this class generates BERT embeddings <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> is the average of BERT embeddings of all the tokens in <span translate=no>_^_3_^_</span>.</p>\n": "<h2>\u0db6\u0dbb\u0dca\u0da7\u0dca\u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca</h2>\n<p>\u0daf\u0dd3\u0d87\u0dad\u0dd2 \u0db4\u0dd9\u0dc5 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0d9a\u0dca \u0dc3\u0db3\u0dc4\u0dcf <span translate=no>_^_0_^_</span> \u0db8\u0dd9\u0db8 \u0db4\u0db1\u0dca\u0dad\u0dd2\u0dba BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0da2\u0db1\u0db1\u0dba \u0d9a\u0dbb\u0dba\u0dd2 <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> \u0dc3\u0dd2\u0dba\u0dbd\u0dd4\u0db8 \u0da7\u0ddd\u0d9a\u0db1 \u0dc0\u0dbd BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dc0\u0dbd <span translate=no>_^_3_^_</span>\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0dba \u0dc0\u0dda. </p>\n",
 "<h3>Code to test BERT embeddings</h3>\n": "<h3>BERT\u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0d9a\u0dda\u0dad\u0dba</h3>\n",
 "<h3>Get <span translate=no>_^_0_^_</span> for a list of chunks.</h3>\n": "<h3>\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0\u0d9a\u0dca <span translate=no>_^_0_^_</span> \u0dc3\u0db3\u0dc4\u0dcf \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1. </h3>\n",
 "<p> </p>\n": "<p> </p>\n",
 "<p> In this implementation, we do not make chunks with a fixed number of tokens. One of the reasons is that this implementation uses character-level tokens and BERT uses its sub-word tokenizer.</p>\n<p>So this method will truncate the text to make sure there are no partial tokens.</p>\n<p>For instance, a chunk could be like <span translate=no>_^_0_^_</span>, with partial words (partial sub-word tokens) on the ends. We strip them off to get better BERT embeddings. As mentioned earlier this is not necessary if we broke chunks after tokenizing.</p>\n": "<p> \u0db8\u0dd9\u0db8\u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3, \u0d85\u0db4\u0dd2 \u0dc3\u0dca\u0dae\u0dcf\u0dc0\u0dbb \u0da7\u0ddd\u0d9a\u0db1 \u0dc3\u0d82\u0d9b\u0dca\u0dba\u0dcf\u0dc0\u0d9a\u0dca \u0dc3\u0db8\u0d9f \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1\u0dda \u0db1\u0dd0\u0dad. \u0d91\u0d9a\u0dca \u0dc4\u0dda\u0dad\u0dd4\u0dc0\u0d9a\u0dca \u0db1\u0db8\u0dca, \u0db8\u0dd9\u0db8 \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0da0\u0dbb\u0dd2\u0dad \u0db8\u0da7\u0dca\u0da7\u0db8\u0dda \u0da7\u0ddd\u0d9a\u0db1 \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0dc4 BERT \u0d91\u0dc4\u0dd2 \u0d8b\u0db4 \u0dc0\u0da0\u0db1 \u0da7\u0ddd\u0d9a\u0db1\u0dba\u0dd2\u0dc3\u0dbb\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dba\u0dd2. </p>\n<p>\u0d91\u0db6\u0dd0\u0dc0\u0dd2\u0db1\u0dca\u0db8\u0dd9\u0db8 \u0d9a\u0dca\u0dbb\u0db8\u0dba \u0db8\u0d9f\u0dd2\u0db1\u0dca \u0d85\u0dbb\u0dca\u0db0 \u0da7\u0ddd\u0d9a\u0db1 \u0db1\u0ddc\u0db8\u0dd0\u0dad\u0dd2 \u0db6\u0dc0\u0da7 \u0dc0\u0d9c \u0db6\u0dbd\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dcf truncate \u0dc0\u0dda. </p>\n<p>\u0db1\u0dd2\u0daf\u0dc3\u0dd4\u0db1\u0d9a\u0dca\u0dc0\u0dc1\u0dba\u0dd9\u0db1\u0dca, \u0d9a\u0dd9\u0dc5\u0dc0\u0dbb\u0dda \u0d85\u0dbb\u0dca\u0db0 \u0dc0\u0da0\u0db1 (\u0d85\u0dbb\u0dca\u0db0 \u0d8b\u0db4 \u0dc0\u0da0\u0db1 \u0da7\u0ddd\u0d9a\u0db1) \u0dc3\u0dc4\u0dd2\u0dad \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0d9a\u0dca \u0dc3\u0db8\u0dcf\u0db1 <span translate=no>_^_0_^_</span>\u0dc0\u0dd2\u0dba \u0dc4\u0dd0\u0d9a\u0dd2\u0dba. \u0dc0\u0da9\u0dcf \u0dc4\u0ddc\u0db3 \u0db6\u0dbb\u0dca\u0da7\u0dca \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0d85\u0db4\u0dd2 \u0d92\u0dc0\u0dcf \u0d89\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0db8\u0dd4. \u0d9a\u0dbd\u0dd2\u0db1\u0dca \u0dc3\u0db3\u0dc4\u0db1\u0dca \u0d9a\u0dc5 \u0db4\u0dbb\u0dd2\u0daf\u0dd2, \u0da7\u0ddd\u0d9a\u0db1\u0dd3\u0d9a\u0dbb\u0dab\u0dba\u0dd9\u0db1\u0dca \u0db4\u0dc3\u0dd4 \u0d85\u0db4\u0dd2 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0d9a\u0da9\u0dcf \u0daf\u0dd0\u0db8\u0dd4\u0dc0\u0dc4\u0ddc\u0dad\u0dca \u0db8\u0dd9\u0dba \u0d85\u0dc0\u0dc1\u0dca\u0dba \u0db1\u0ddc\u0dc0\u0dda. </p>\n",
 "<p>Break words </p>\n": "<p>\u0dc0\u0da0\u0db1\u0d9a\u0da9\u0db1\u0dca\u0db1 </p>\n",
 "<p>Calculate the average token embeddings. Note that the attention mask is <span translate=no>_^_0_^_</span> if the token is empty padded. We get empty tokens because the chunks are of different lengths. </p>\n": "<p>\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0da7\u0ddd\u0d9a\u0db1 \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1. \u0da7\u0ddd\u0d9a\u0db1\u0dba \u0dc4\u0dd2\u0dc3\u0dca \u0db4\u0dd1\u0da9\u0dca <span translate=no>_^_0_^_</span> \u0db1\u0db8\u0dca \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda \u0d86\u0dc0\u0dbb\u0dab \u0db6\u0dc0 \u0dc3\u0dbd\u0d9a\u0db1\u0dca\u0db1. \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc0\u0dd2\u0dc0\u0dd2\u0db0 \u0daf\u0dd2\u0d9c \u0db6\u0dd0\u0dc0\u0dd2\u0db1\u0dca \u0d85\u0db4\u0da7 \u0dc4\u0dd2\u0dc3\u0dca \u0da7\u0ddd\u0d9a\u0db1 \u0dbd\u0dd0\u0db6\u0dda. </p>\n",
 "<p>Check BERT model outputs </p>\n": "<p>\u0db6\u0dbb\u0dca\u0da7\u0dca\u0d86\u0d9a\u0dd8\u0dad\u0dd2 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dcf \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Check BERT tokenizer </p>\n": "<p>\u0db6\u0dbb\u0dca\u0da7\u0dca\u0da7\u0ddd\u0d9a\u0db1\u0dba\u0dd2\u0dc3\u0dbb\u0dca \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dcf \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Check recreating text from token ids </p>\n": "<p>\u0da7\u0ddd\u0d9a\u0db1\u0dcaid \u0dc0\u0dbd\u0dd2\u0db1\u0dca \u0db4\u0dd9\u0dc5 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db1\u0dd2\u0dbb\u0dca\u0db8\u0dcf\u0dab\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dcf \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Evaluate the model </p>\n": "<p>\u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0dad\u0d9a\u0dca\u0dc3\u0dda\u0dbb\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get chunk embeddings </p>\n": "<p>\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the token embeddings </p>\n": "<p>\u0da7\u0ddd\u0d9a\u0db1\u0dca\u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>If empty return original string </p>\n": "<p>\u0dc4\u0dd2\u0dc3\u0dca\u0d86\u0db4\u0dc3\u0dd4 \u0db8\u0dd4\u0dbd\u0dca string \u0db1\u0db8\u0dca </p>\n",
 "<p>Initialize </p>\n": "<p>\u0d86\u0dbb\u0db8\u0dca\u0db7\u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Load the BERT model from <a href=\"https://huggingface.co/bert-base-uncased\">HuggingFace</a> </p>\n": "<p><a href=\"https://huggingface.co/bert-base-uncased\">HuggingFace</a> \u0dc0\u0dd9\u0dad\u0dd2\u0db1\u0dca \u0db6\u0dbb\u0dca\u0da7\u0dca \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba \u0db4\u0da7\u0dc0\u0db1\u0dca\u0db1 </p>\n",
 "<p>Load the BERT tokenizer from <a href=\"https://huggingface.co/bert-base-uncased\">HuggingFace</a> </p>\n": "<p><a href=\"https://huggingface.co/bert-base-uncased\">\u0dc4\u0d9c\u0dca\u0da2\u0dd2\u0d82 \u0dc6\u0dda\u0dc3\u0dca \u0dc0\u0dd9\u0dad\u0dd2\u0db1\u0dca \u0db6\u0dbb\u0dca\u0da7\u0dca \u0da7\u0ddd\u0d9a\u0db1\u0dba\u0dd2\u0dc3\u0dbb\u0dca</a> \u0db4\u0da7\u0dc0\u0db1\u0dca\u0db1 </p>\n",
 "<p>Move the model to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0dc0\u0dd9\u0dad \u0d9c\u0dd9\u0db1 \u0dba\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Move token ids, attention mask and token types to the device </p>\n": "<p>\u0da7\u0ddd\u0d9a\u0db1\u0dca\u0dc4\u0dd0\u0db3\u0dd4\u0db1\u0dd4\u0db8\u0dca\u0db4\u0dad\u0dca, \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0d86\u0dc0\u0dbb\u0dab \u0dc3\u0dc4 \u0da7\u0ddd\u0d9a\u0db1\u0dca \u0dc0\u0dbb\u0dca\u0d9c \u0d8b\u0db4\u0dcf\u0d82\u0d9c\u0dba\u0da7 \u0d9c\u0dd9\u0db1 \u0dba\u0db1\u0dca\u0db1 </p>\n",
 "<p>Otherwise, return the stripped string </p>\n": "<p>\u0d91\u0dc3\u0dda\u0db1\u0ddc\u0db8\u0dd0\u0dad\u0dd2\u0db1\u0db8\u0dca, \u0d89\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0db1\u0dd6\u0dbd\u0dca \u0d86\u0db4\u0dc3\u0dd4 \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0db1\u0dca\u0db1 </p>\n",
 "<p>Remove first and last pieces </p>\n": "<p>\u0db4\u0dc5\u0db8\u0dd4\u0dc4\u0dcf \u0d85\u0dc0\u0dc3\u0dcf\u0db1 \u0d9a\u0dd1\u0dbd\u0dd2 \u0d89\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Remove whitespace </p>\n": "<p>\u0dc0\u0dba\u0dd2\u0da7\u0dca\u0dc3\u0dca\u0db4\u0dda\u0dc3\u0dca\u0d89\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Sample </p>\n": "<p>\u0db1\u0dd2\u0dba\u0dd0\u0daf\u0dd2\u0dba </p>\n",
 "<p>Strip whitespace </p>\n": "<p>\u0dad\u0dd3\u0dbb\u0dd4\u0dc0\u0dba\u0dd2\u0da7\u0dca\u0dc3\u0dca\u0db4\u0dda\u0dc3\u0dca </p>\n",
 "<p>Tokenize the chunks with BERT tokenizer </p>\n": "<p>\u0db6\u0dbb\u0dca\u0da7\u0dca\u0da7\u0ddd\u0d9a\u0db1\u0dba\u0dd2\u0dc3\u0dbb\u0dca \u0dc3\u0db8\u0d9f \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0da7\u0ddd\u0d9a\u0db1\u0dca\u0da7\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Trim the chunks </p>\n": "<p>\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0d9a\u0db4\u0db1\u0dca\u0db1 </p>\n",
 "<p>We don&#x27;t need to compute gradients </p>\n": "<p>\u0d85\u0db4\u0da7\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0d85\u0dc0\u0dc1\u0dca\u0dba \u0db1\u0dd0\u0dad </p>\n",
 "BERT Embeddings of chunks of text": "\u0db4\u0dd9\u0dc5 \u0d9a\u0dd0\u0db6\u0dbd\u0dd2 \u0dc0\u0dbd \u0db6\u0dbb\u0dca\u0da7\u0dca \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca",
 "Generate BERT embeddings for chunks using a frozen BERT model": "\u0dc1\u0dd3\u0dad \u0d9a\u0dc5 BERT \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0d9a\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db8\u0dd2\u0db1\u0dca \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc3\u0db3\u0dc4\u0dcf BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0da2\u0db1\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1"
}