{
 "<h1>Database for nearest neighbor retrieval</h1>\n<p>This is the build the database and retrieves nearest neighbors for  <a href=\"index.html\">RETRO model</a>.</p>\n<p>We use <a href=\"https://faiss.ai/\">FAISS library</a> for the database whilst the paper had used the SCaNN library.</p>\n": "<h1>\u0dc5\u0d9f\u0db8\u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0dcf \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba</h1>\n<p>\u0db8\u0dd9\u0dba\u0dc0\u0dda \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1 \u0dc3\u0dc4 <a href=\"index.html\">RETRO \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba</a>\u0dc3\u0db3\u0dc4\u0dcf \u0dc5\u0d9f\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dd3. </p>\n</a> <p>\u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2ScanN \u0db4\u0dd4\u0dc3\u0dca\u0dad\u0d9a\u0dcf\u0dbd\u0dba \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb \u0d87\u0dad\u0dd2 \u0d85\u0dad\u0dbb \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0dc3\u0db3\u0dc4\u0dcf \u0d85\u0db4\u0dd2 <a href=\"https://faiss.ai/\">FaISS \u0db4\u0dd4\u0dc3\u0dca\u0dad\u0d9a\u0dcf\u0dbd\u0dba \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db8\u0dd4. </p>\n",
 "<h2>Build Database</h2>\n<ul><li><span translate=no>_^_0_^_</span> is the length of a chunk (number of characters) </li>\n<li><span translate=no>_^_1_^_</span> is the batch size to use when calculating <span translate=no>_^_2_^_</span> </li>\n<li><span translate=no>_^_3_^_</span> is the number of features in <span translate=no>_^_4_^_</span> embeddings  <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">lists to select in FAISS index</a> </li>\n<li><span translate=no>_^_5_^_</span> is the number of lists in the index </li>\n<li><span translate=no>_^_6_^_</span> encoded vector size in the index </li>\n<li><span translate=no>_^_7_^_</span> is the number of lists to probe </li>\n<li>`n_train&#x27; is the number of keys to train the index on</li></ul>\n": "<h2>\u0daf\u0dad\u0dca\u0dad\u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0d9c\u0ddc\u0da9\u0db1\u0dd0\u0d9c\u0dd3\u0db8</h2>\n<ul><li><span translate=no>_^_0_^_</span> \u0dba\u0db1\u0dd4 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0d9a \u0daf\u0dd2\u0d9c (\u0d85\u0d9a\u0dca\u0dc2\u0dbb \u0d9c\u0dab\u0db1) </li>\n<li><span translate=no>_^_1_^_</span> \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3 \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dc5 \u0dba\u0dd4\u0dad\u0dd4 \u0d9a\u0dab\u0dca\u0da9\u0dcf\u0dba\u0db8\u0dca \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba\u0dba\u0dd2 <span translate=no>_^_2_^_</span> </li>\n<li><span translate=no>_^_3_^_</span> <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0dda \u0dad\u0ddd\u0dbb\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf <span translate=no>_^_4_^_</span> \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4 \u0dc0\u0dbd</a> \u0dc0\u0dd2\u0dc1\u0dda\u0dc2\u0dcf\u0d82\u0d9c \u0d9c\u0dab\u0db1 \u0dc0\u0dda </li>\n<li><span translate=no>_^_5_^_</span> \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0dda \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4 \u0d9c\u0dab\u0db1 </li>\n<li><span translate=no>_^_6_^_</span> \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0dda \u0d9a\u0dda\u0dad\u0db1\u0dba \u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0daf\u0ddb\u0dc1\u0dd2\u0d9a \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba </li>\n<li><span translate=no>_^_7_^_</span> \u0dc0\u0dd2\u0db8\u0dbb\u0dca\u0dc1\u0db1\u0dba \u0d9a\u0dc5 \u0dba\u0dd4\u0dad\u0dd4 \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4 \u0d9c\u0dab\u0db1 </li>\n<li>`n_train'\u0dba\u0db1\u0dd4 \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0d9c\u0dab\u0db1 \u0dc0\u0dda</li></ul>\n",
 "<h2>Index for retrieving nearest neighbors</h2>\n": "<h2>\u0dc5\u0d9f\u0db8\u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba</h2>\n",
 "<h3>Retrieve nearest neighbors</h3>\n": "<h3>\u0dc5\u0d9f\u0db8\u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1</h3>\n",
 "<h4>Filter neighbors that overlap with the query</h4>\n<p>The positions of the neighbors are given by <span translate=no>_^_0_^_</span> and the position of the query chunk is <span translate=no>_^_1_^_</span>.</p>\n": "<h4>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dc3\u0db8\u0d9f \u0d85\u0dad\u0dd2\u0da0\u0dca\u0da1\u0dcf\u0daf\u0db1\u0dba \u0dc0\u0db1 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0db4\u0dd9\u0dbb\u0dc4\u0db1\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1</h4>\n<p>\u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dcf\u0dc3\u0dd3\u0db1\u0dca\u0d9c\u0dda\u0dad\u0db1\u0dad\u0dd4\u0dbb\u0dd4 \u0dbd\u0db6\u0dcf \u0daf\u0dd3 \u0d87\u0dad\u0dd2 <span translate=no>_^_0_^_</span> \u0d85\u0dad\u0dbb \u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dca \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0dda \u0db4\u0dd2\u0dc4\u0dd2\u0da7\u0dd3\u0db8 \u0dc0\u0dda <span translate=no>_^_1_^_</span>. </p>\n",
 "<p> </p>\n": "<p> </p>\n",
 "<p>Add the chunks to the index in batches of size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba\u0dd9\u0db1\u0dca\u0d9a\u0dcf\u0dab\u0dca\u0da9\u0dc0\u0dbd \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0da7 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Add to index </p>\n": "<p>\u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0da7\u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Create the <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS index</a> </p>\n": "<p><a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba</a> \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> nearest neighbors from the database </p>\n": "<p>\u0daf\u0dad\u0dca\u0dad\u0d9c\u0db6\u0da9\u0dcf\u0dc0\u0dd9\u0db1\u0dca <span translate=no>_^_0_^_</span> \u0dc5\u0d9f\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> of query chunks </p>\n": "<p>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dca\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Get a random sample of the the chunk indexes </p>\n": "<p>\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0db8\u0dca\u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dc0\u0dbd \u0d85\u0dc4\u0db9\u0dd4 \u0db1\u0dd2\u0dba\u0dd0\u0daf\u0dd2\u0dba\u0d9a\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get chunk embeddings by processing <span translate=no>_^_0_^_</span> number of chunks on each iteration </p>\n": "<p>\u0d91\u0d9a\u0dca\u0d91\u0d9a\u0dca \u0db4\u0dd4\u0db1\u0dbb\u0dcf\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba\u0dda \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 <span translate=no>_^_0_^_</span> \u0d9c\u0dab\u0db1 \u0dc3\u0dd0\u0d9a\u0dc3\u0dd3\u0db8 \u0db8\u0d9c\u0dd2\u0db1\u0dca \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the closest <span translate=no>_^_0_^_</span> after filtering </p>\n": "<p><span translate=no>_^_0_^_</span> \u0db4\u0dd9\u0dbb\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0db4\u0dc3\u0dd4 \u0d86\u0dc3\u0db1\u0dca\u0db1\u0dad\u0db8 \u0daf\u0dda \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the offsets of each of the chunks </p>\n": "<p>\u0d91\u0d9a\u0dca\u0d91\u0d9a\u0dca \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc0\u0dbd \u0d95\u0dc6\u0dca\u0dc3\u0dd9\u0da7\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get training data (a string) </p>\n": "<p>\u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4\u0daf\u0dad\u0dca\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 (\u0db1\u0dd6\u0dbd\u0d9a\u0dca) </p>\n",
 "<p>If the query chunk offsets are given filter out overlapping chunks </p>\n": "<p>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0dda \u0d95\u0dc6\u0dca\u0dc3\u0dd9\u0da7\u0dca \u0d85\u0dad\u0dd2\u0da0\u0dca\u0da1\u0dcf\u0daf\u0db1\u0dba \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc3\u0dd2\u0daf\u0dd4 \u0db4\u0dd9\u0dbb\u0dc4\u0db1 \u0dbd\u0db6\u0dcf \u0daf\u0dd3 \u0dad\u0dd2\u0db6\u0dda \u0db1\u0db8\u0dca </p>\n",
 "<p>Initialize BERT to get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0dbd\u0db6\u0dcf\u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0db6\u0dbb\u0dca\u0da7\u0dca \u0d86\u0dbb\u0db8\u0dca\u0db7 \u0d9a\u0dbb\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Load the database </p>\n": "<p>\u0daf\u0dad\u0dca\u0dad\u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0db4\u0da7\u0dc0\u0db1\u0dca\u0db1 </p>\n",
 "<p>Load the dataset text file </p>\n": "<p>\u0daf\u0dad\u0dca\u0dad\u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0db4\u0dd9\u0dc5 \u0d9c\u0ddc\u0db1\u0dd4\u0dc0 \u0db4\u0dd6\u0dbb\u0dab\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Merge them into a single tensor </p>\n": "<p>\u0d92\u0dc0\u0dcf\u0dad\u0db1\u0dd2 \u0d86\u0dad\u0db1\u0dba\u0d9a\u0da7 \u0d92\u0d9a\u0dcf\u0db6\u0daf\u0dca\u0db0 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Number of chunks </p>\n": "<p>\u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0d9c\u0dab\u0db1 </p>\n",
 "<p>Save the index </p>\n": "<p>\u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba\u0dc3\u0dd4\u0dbb\u0d9a\u0dd2\u0db1\u0dca\u0db1 </p>\n",
 "<p>Split the text into chunks of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0db4\u0dd9\u0dc5\u0d9a\u0dd0\u0db6\u0dbd\u0dd2 \u0dc0\u0dbd\u0da7 \u0db6\u0dd9\u0daf\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Train the index to store the keys </p>\n": "<p>\u0dba\u0dad\u0dd4\u0dbb\u0dd4\u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0daf\u0dbb\u0dca\u0dc1\u0d9a\u0dba \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the chunk length </li>\n<li><span translate=no>_^_1_^_</span> is the number of lists to probe </li>\n<li><span translate=no>_^_2_^_</span> is the number of neighbors to retrieve </li>\n<li><span translate=no>_^_3_^_</span> is the number of extra neighbors to retrieve since we will be  removing neighbors overlapping with the query chunk </li>\n<li><span translate=no>_^_4_^_</span> is the extra text length to avoid when checking for overlaps</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0d9a\u0dd4\u0da7\u0dd2\u0dba\u0dda \u0daf\u0dd2\u0d9c \u0dc0\u0dda </li>\n<li><span translate=no>_^_1_^_</span> \u0dc0\u0dd2\u0db8\u0dbb\u0dca\u0dc1\u0db1\u0dba \u0d9a\u0dc5 \u0dba\u0dd4\u0dad\u0dd4 \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4 \u0d9c\u0dab\u0db1 </li>\n<li><span translate=no>_^_2_^_</span> \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0da7 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dc3\u0d82\u0d9b\u0dca\u0dba\u0dcf\u0dc0 </li>\n<li><span translate=no>_^_3_^_</span> \u0d85\u0db4\u0dd2 \u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dca \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba\u0dda \u0dc3\u0db8\u0d9c \u0d85\u0dad\u0dd2\u0da0\u0dca\u0da1\u0dcf\u0daf\u0db1\u0dba \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0d89\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0db1\u0dd4 \u0d87\u0dad \u0dc3\u0dd2\u0da7 \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0da7 \u0d85\u0db8\u0dad\u0dbb \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0dc3\u0d82\u0d9b\u0dca\u0dba\u0dcf\u0dc0 \u0dc0\u0dda </li>\n<li><span translate=no>_^_4_^_</span> \u0d85\u0dad\u0dd2\u0da0\u0dca\u0da1\u0dcf\u0daf\u0db1\u0dba \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3 \u0dc0\u0dc5\u0d9a\u0dca\u0dc0\u0dcf \u0d9c\u0dad \u0dba\u0dd4\u0dad\u0dd4 \u0d85\u0db8\u0dad\u0dbb \u0db4\u0dd9\u0dc5 \u0daf\u0dd2\u0d9c \u0dc0\u0dda</li></ul>\n",
 "Database for nearest neighbor retrieval": "\u0dc5\u0d9f\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0dcf \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba",
 "Nearest neighbor retrieval and creation of the database": "\u0d86\u0dc3\u0db1\u0dca\u0db1\u0dad\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0dcf \u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0dc4 \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0db1\u0dd2\u0dbb\u0dca\u0db8\u0dcf\u0dab\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8"
}