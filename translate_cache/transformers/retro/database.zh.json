{
 "<h1>Database for nearest neighbor retrieval</h1>\n<p>This is the build the database and retrieves nearest neighbors for  <a href=\"index.html\">RETRO model</a>.</p>\n<p>We use <a href=\"https://faiss.ai/\">FAISS library</a> for the database whilst the paper had used the SCaNN library.</p>\n": "<h1>\u6700\u8fd1\u90bb\u68c0\u7d22\u7684\u6570\u636e\u5e93</h1>\n<p>\u8fd9\u662f\u6784\u5efa\u6570\u636e\u5e93\u5e76\u68c0\u7d22 RETRO <a href=\"index.html\">\u6a21\u578b\u7684\u6700\u8fd1\u90bb\u57df</a>\u3002</p>\n</a><p>\u6211\u4eec\u4f7f\u7528 <a href=\"https://faiss.ai/\">FAISS \u5e93\u4f5c\u4e3a\u6570\u636e\u5e93\uff0c\u800c\u8bba\u6587\u4f7f\u7528\u4e86 ScanN \u5e93\u3002</p>\n",
 "<h2>Build Database</h2>\n<ul><li><span translate=no>_^_0_^_</span> is the length of a chunk (number of characters) </li>\n<li><span translate=no>_^_1_^_</span> is the batch size to use when calculating <span translate=no>_^_2_^_</span> </li>\n<li><span translate=no>_^_3_^_</span> is the number of features in <span translate=no>_^_4_^_</span> embeddings  <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">lists to select in FAISS index</a> </li>\n<li><span translate=no>_^_5_^_</span> is the number of lists in the index </li>\n<li><span translate=no>_^_6_^_</span> encoded vector size in the index </li>\n<li><span translate=no>_^_7_^_</span> is the number of lists to probe </li>\n<li>`n_train&#x27; is the number of keys to train the index on</li></ul>\n": "<h2>\u5efa\u7acb\u6570\u636e\u5e93</h2>\n<ul><li><span translate=no>_^_0_^_</span>\u662f\u5757\u7684\u957f\u5ea6\uff08\u5b57\u7b26\u6570\uff09</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u8ba1\u7b97\u65f6\u8981\u4f7f\u7528\u7684\u6279\u6b21\u5927\u5c0f<span translate=no>_^_2_^_</span></li>\n<li><span translate=no>_^_3_^_</span>\u662f\u8981\u5728 <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS \u7d22\u5f15\u4e2d\u9009\u62e9\u7684<span translate=no>_^_4_^_</span>\u5d4c\u5165\u5217\u8868\u4e2d\u8981</a>\u7d20\u7684\u6570\u91cf</li>\n<li><span translate=no>_^_5_^_</span>\u662f\u7d22\u5f15\u4e2d\u7684\u5217\u8868\u6570</li>\n<li><span translate=no>_^_6_^_</span>\u7d22\u5f15\u4e2d\u7684\u7f16\u7801\u5411\u91cf\u5927\u5c0f</li>\n<li><span translate=no>_^_7_^_</span>\u662f\u8981\u63a2\u6d4b\u7684\u5217\u8868\u7684\u6570\u91cf</li>\n<li>`n_train'\u662f\u7528\u4e8e\u8bad\u7ec3\u7d22\u5f15\u7684\u952e\u7684\u6570\u91cf</li></ul>\n",
 "<h2>Index for retrieving nearest neighbors</h2>\n": "<h2>\u68c0\u7d22\u6700\u8fd1\u90bb\u5c45\u7684\u7d22\u5f15</h2>\n",
 "<h3>Retrieve nearest neighbors</h3>\n": "<h3>\u68c0\u7d22\u6700\u8fd1\u7684\u90bb\u5c45</h3>\n",
 "<h4>Filter neighbors that overlap with the query</h4>\n<p>The positions of the neighbors are given by <span translate=no>_^_0_^_</span> and the position of the query chunk is <span translate=no>_^_1_^_</span>.</p>\n": "<h4>\u7b5b\u9009\u4e0e\u67e5\u8be2\u91cd\u53e0\u7684\u90bb\u57df</h4>\n<p>\u90bb\u5c45\u7684\u4f4d\u7f6e\u7531\u7ed9\u51fa<span translate=no>_^_0_^_</span>\uff0c\u67e5\u8be2\u5757\u7684\u4f4d\u7f6e\u4e3a<span translate=no>_^_1_^_</span>\u3002</p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p>Add the chunks to the index in batches of size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5c06\u5757\u6309\u5927\u5c0f\u6279\u6b21\u6dfb\u52a0\u5230\u7d22\u5f15\u4e2d<span translate=no>_^_0_^_</span></p>\n",
 "<p>Add to index </p>\n": "<p>\u6dfb\u52a0\u5230\u7d22\u5f15</p>\n",
 "<p>Create the <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS index</a> </p>\n": "<p>\u521b\u5efa <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS \u6307\u6570</a></p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> nearest neighbors from the database </p>\n": "<p>\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6<span translate=no>_^_0_^_</span>\u6700\u8fd1\u7684\u90bb\u5c45</p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> of query chunks </p>\n": "<p>\u83b7\u53d6<span translate=no>_^_0_^_</span>\u67e5\u8be2\u533a\u5757</p>\n",
 "<p>Get a random sample of the the chunk indexes </p>\n": "<p>\u83b7\u53d6\u533a\u5757\u7d22\u5f15\u7684\u968f\u673a\u6837\u672c</p>\n",
 "<p>Get chunk embeddings by processing <span translate=no>_^_0_^_</span> number of chunks on each iteration </p>\n": "<p>\u901a\u8fc7\u5904\u7406\u6bcf\u6b21\u8fed\u4ee3\u7684\u5757<span translate=no>_^_0_^_</span>\u6570\u6765\u83b7\u53d6\u533a\u5757\u5d4c\u5165</p>\n",
 "<p>Get the closest <span translate=no>_^_0_^_</span> after filtering </p>\n": "<p>\u7b5b\u9009<span translate=no>_^_0_^_</span>\u540e\u83b7\u53d6\u6700\u63a5\u8fd1\u7684\u503c</p>\n",
 "<p>Get the offsets of each of the chunks </p>\n": "<p>\u83b7\u53d6\u6bcf\u4e2a\u533a\u5757\u7684\u504f\u79fb\u91cf</p>\n",
 "<p>Get training data (a string) </p>\n": "<p>\u83b7\u53d6\u8bad\u7ec3\u6570\u636e\uff08\u5b57\u7b26\u4e32\uff09</p>\n",
 "<p>If the query chunk offsets are given filter out overlapping chunks </p>\n": "<p>\u5982\u679c\u7ed9\u51fa\u4e86\u67e5\u8be2\u533a\u5757\u504f\u79fb\u91cf\uff0c\u8bf7\u8fc7\u6ee4\u6389\u91cd\u53e0\u7684\u5757</p>\n",
 "<p>Initialize BERT to get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u521d\u59cb\u5316 BERT \u4ee5\u83b7\u53d6<span translate=no>_^_0_^_</span></p>\n",
 "<p>Load the database </p>\n": "<p>\u88c5\u8f7d\u6570\u636e\u5e93</p>\n",
 "<p>Load the dataset text file </p>\n": "<p>\u52a0\u8f7d\u6570\u636e\u96c6\u6587\u672c\u6587\u4ef6</p>\n",
 "<p>Merge them into a single tensor </p>\n": "<p>\u5c06\u5b83\u4eec\u5408\u5e76\u6210\u5355\u4e2a\u5f20\u91cf</p>\n",
 "<p>Number of chunks </p>\n": "<p>\u533a\u5757\u6570</p>\n",
 "<p>Save the index </p>\n": "<p>\u4fdd\u5b58\u7d22\u5f15</p>\n",
 "<p>Split the text into chunks of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5c06\u6587\u672c\u5206\u6210\u5927\u5757<span translate=no>_^_0_^_</span></p>\n",
 "<p>Train the index to store the keys </p>\n": "<p>\u8bad\u7ec3\u7d22\u5f15\u4ee5\u5b58\u50a8\u5bc6\u94a5</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the chunk length </li>\n<li><span translate=no>_^_1_^_</span> is the number of lists to probe </li>\n<li><span translate=no>_^_2_^_</span> is the number of neighbors to retrieve </li>\n<li><span translate=no>_^_3_^_</span> is the number of extra neighbors to retrieve since we will be  removing neighbors overlapping with the query chunk </li>\n<li><span translate=no>_^_4_^_</span> is the extra text length to avoid when checking for overlaps</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u533a\u5757\u957f\u5ea6</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u8981\u63a2\u6d4b\u7684\u5217\u8868\u7684\u6570\u91cf</li>\n<li><span translate=no>_^_2_^_</span>\u662f\u8981\u68c0\u7d22\u7684\u90bb\u5c45\u6570\u91cf</li>\n<li><span translate=no>_^_3_^_</span>\u662f\u8981\u68c0\u7d22\u7684\u989d\u5916\u90bb\u5c45\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u79fb\u9664\u4e0e\u67e5\u8be2\u5757\u91cd\u53e0\u7684\u90bb\u5c45</li>\n<li><span translate=no>_^_4_^_</span>\u662f\u68c0\u67e5\u91cd\u53e0\u65f6\u8981\u907f\u514d\u7684\u989d\u5916\u6587\u672c\u957f\u5ea6</li></ul>\n",
 "Database for nearest neighbor retrieval": "\u6700\u8fd1\u90bb\u68c0\u7d22\u7684\u6570\u636e\u5e93",
 "Nearest neighbor retrieval and creation of the database": "\u6700\u8fd1\u90bb\u68c0\u7d22\u548c\u521b\u5efa\u6570\u636e\u5e93"
}