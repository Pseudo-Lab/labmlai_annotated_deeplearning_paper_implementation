{
 "<h1>Retrieval-Enhanced Transformer (Retro)</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of the paper <a href=\"https://papers.labml.ai/paper/2112.04426\">Improving language models by retrieving from trillions of tokens</a>.</p>\n<p>It builds a database of chunks of text. It is a key-value database where the keys are indexed by the BERT embeddings of the chunks. They use a frozen pre-trained BERT model to calculate these embeddings. The values are the corresponding chunks and an equal length of text proceeding that chunk.</p>\n<p>Then the model retrieves text similar (nearest neighbors) to the input to the model from this database. These retrieved texts are used to predict the output.</p>\n<p>Since we use a frozen BERT model for retrieval we can pre-calculate all the nearest neighbors for the training dataset. This speeds up the training process.</p>\n<p>Components:</p>\n<ul><li><a href=\"bert_embeddings.html\">BERT embeddings</a>: Code to get BERT embeddings of chunks of text. </li>\n<li><a href=\"database.html\">Key-value database</a>: Build and retrieve chunks </li>\n<li><a href=\"model.html\">Model</a> </li>\n<li><a href=\"dataset.html\">Dataset</a>: Pre-calculate the nearest neighbors </li>\n<li><a href=\"train.html\">Training code</a></li></ul>\n<p><a href=\"https://app.labml.ai/run/3113dd3ea1e711ec85ee295d18534021\"><span translate=no>_^_0_^_</span></a></p>\n": "<h1>\u0db1\u0dd0\u0dc0\u0dad\u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8-\u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dc5 \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca (\u0dbb\u0dd9\u0da7\u0dca\u0dbb\u0ddd)</h1>\n<p>\u0db8\u0dd9\u0dba <a href=\"https://pytorch.org\">PyTorch</a> \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0d9a\u0dd2 \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 <a href=\"https://papers.labml.ai/paper/2112.04426\">\u0da7\u0dca\u0dbb\u0dd2\u0dbd\u0dd2\u0dba\u0db1 \u0d9c\u0dab\u0db1\u0d9a \u0da7\u0ddd\u0d9a\u0db1 \u0dc0\u0dbd\u0dd2\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0db7\u0dcf\u0dc2\u0dcf \u0d86\u0d9a\u0dd8\u0dad\u0dd2 \u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8</a> . </p>\n<p>\u0d91\u0dba\u0db4\u0dd9\u0dc5 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0db4\u0dd2\u0dc5\u0dd2\u0db6\u0db3 \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba\u0d9a\u0dca \u0d9c\u0ddc\u0da9\u0db1\u0d9f\u0dba\u0dd2. \u0d91\u0dba \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0d9a\u0dd0\u0db6\u0dbd\u0dd2 \u0dc0\u0dbd BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dc0\u0dd2\u0dc3\u0dd2\u0db1\u0dca \u0dc3\u0dd4\u0da0\u0dd2\u0d9c\u0dad \u0d9a\u0dbb\u0db1\u0dd4 \u0dbd\u0db6\u0db1 \u0db4\u0dca\u0dbb\u0db0\u0dcf\u0db1 \u0d85\u0d9c\u0dba \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba\u0d9a\u0dd2. \u0db8\u0dd9\u0db8 \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0d94\u0dc0\u0dd4\u0db1\u0dca \u0dc1\u0dd3\u0dad \u0d9a\u0dc5 \u0db4\u0dd9\u0dbb \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dc5 BERT \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0d9a\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0dba\u0dd2. \u0d85\u0d9c\u0dba\u0db1\u0dca \u0dba\u0db1\u0dd4 \u0d85\u0db1\u0dd4\u0dbb\u0dd6\u0db4 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dc3\u0dc4 \u0d91\u0db8 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2\u0dba \u0d89\u0daf\u0dd2\u0dbb\u0dd2\u0dba\u0da7 \u0dba\u0db1 \u0db4\u0dd9\u0dc5 \u0dc3\u0db8\u0dcf\u0db1 \u0daf\u0dd2\u0d9c\u0d9a\u0dd2. </p>\n<p>\u0d91\u0dc0\u0dd2\u0da7\u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba \u0db8\u0dd9\u0db8 \u0daf\u0dad\u0dca\u0dad \u0d9c\u0db6\u0da9\u0dcf\u0dc0\u0dd9\u0db1\u0dca \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0da7 \u0d86\u0daf\u0dcf\u0db1\u0dba\u0da7 \u0dc3\u0db8\u0dcf\u0db1 (\u0d86\u0dc3\u0db1\u0dca\u0db1\u0dad\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca) \u0db4\u0dd9\u0dc5 \u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dd3. \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0db4\u0dd4\u0dbb\u0ddd\u0d9a\u0dae\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0db8\u0dd9\u0db8 \u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0dad\u0dca \u0db4\u0dd9\u0dc5 \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0dba\u0dd2. </p>\n<p>\u0d85\u0db4\u0dd2\u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dc1\u0dd3\u0dad \u0d9a\u0dc5 BERT \u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba\u0d9a\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1 \u0db6\u0dd0\u0dc0\u0dd2\u0db1\u0dca \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba \u0dc3\u0db3\u0dc4\u0dcf \u0d86\u0dc3\u0db1\u0dca\u0db1\u0dad\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0db4\u0dd6\u0dbb\u0dca\u0dc0 \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dc5 \u0dc4\u0dd0\u0d9a\u0dd2\u0dba. \u0db8\u0dd9\u0dba \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dc0\u0dbd\u0dd2\u0dba \u0dc0\u0dda\u0d9c\u0dc0\u0dad\u0dca \u0d9a\u0dbb\u0dba\u0dd2. </p>\n<p>\u0dc3\u0d82\u0dbb\u0da0\u0d9a:</p>\n<ul><li><a href=\"bert_embeddings.html\">BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca</a>: \u0db4\u0dd9\u0dc5 \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 BERT \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0da7 \u0d9a\u0dda\u0dad\u0dba. </li>\n<li><a href=\"database.html\">\u0db4\u0dca\u0dbb\u0db0\u0dcf\u0db1 \u0d85\u0d9c\u0dba \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba</a>: \u0d9a\u0dd4\u0da7\u0dca\u0da7\u0dd2 \u0dad\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0dc4 \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 </li>\n<li><a href=\"model.html\">\u0d86\u0d9a\u0dd8\u0dad\u0dd2\u0dba</a> </li>\n<li><a href=\"dataset.html\">\u0daf\u0dad\u0dca\u0dad \u0d9a\u0da7\u0dca\u0da7\u0dbd\u0dba</a>: \u0d86\u0dc3\u0db1\u0dca\u0db1\u0dad\u0db8 \u0d85\u0dc3\u0dbd\u0dca\u0dc0\u0dd0\u0dc3\u0dd2\u0dba\u0db1\u0dca \u0db4\u0dd6\u0dbb\u0dca\u0dc0 \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </li>\n<li><a href=\"train.html\">\u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dda\u0dad\u0dba</a></li></ul>\n<p><a href=\"https://app.labml.ai/run/3113dd3ea1e711ec85ee295d18534021\"><span translate=no>_^_0_^_</span></a></p>\n",
 "Retrieval-Enhanced Transformer (Retro)": "\u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8-\u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dc5 \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca (\u0dbb\u0dd9\u0da7\u0dca\u0dbb\u0ddd)",
 "This is a PyTorch implementation/tutorial of the paper Improving language models by retrieving from trillions of tokens. It builds a key-value database of chunks of text and retrieves and uses them when making predictions.": "\u0db8\u0dd9\u0dba PyTorch \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8/\u0db1\u0dd2\u0db6\u0db1\u0dca\u0db0\u0db1\u0dba \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 \u0da7\u0dca\u0dbb\u0dd2\u0dbd\u0dd2\u0dba\u0db1 \u0d9c\u0dab\u0db1\u0d9a \u0da7\u0ddd\u0d9a\u0db1 \u0dc0\u0dbd\u0dd2\u0db1\u0dca \u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0db7\u0dcf\u0dc2\u0dcf \u0d86\u0d9a\u0dd8\u0dad\u0dd2 \u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8. \u0d91\u0dba \u0db4\u0dd9\u0dc5 \u0d9a\u0dd0\u0db6\u0dbd\u0dd2 \u0dc0\u0dbd \u0db4\u0dca\u0dbb\u0db0\u0dcf\u0db1 \u0dc0\u0da7\u0dd2\u0db1\u0dcf\u0d9a\u0db8\u0dca \u0daf\u0dad\u0dca\u0dad \u0dc3\u0db8\u0dd4\u0daf\u0dcf\u0dba\u0d9a\u0dca \u0d9c\u0ddc\u0da9\u0db1\u0d9f\u0db1 \u0d85\u0dad\u0dbb \u0d85\u0db1\u0dcf\u0dc0\u0dd0\u0d9a\u0dd2 \u0db4\u0dc5 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3 \u0d92\u0dc0\u0dcf \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0dba\u0dd2."
}