{
 "<h1>Database for nearest neighbor retrieval</h1>\n<p>This is the build the database and retrieves nearest neighbors for  <a href=\"index.html\">RETRO model</a>.</p>\n<p>We use <a href=\"https://faiss.ai/\">FAISS library</a> for the database whilst the paper had used the SCaNN library.</p>\n": "<h1>\u6700\u8fd1\u508d\u691c\u7d22\u7528\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9</h1>\n<p>\u3053\u308c\u306f\u3001<a href=\"index.html\">RETRO\u30e2\u30c7\u30eb\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u69cb\u7bc9\u3057</a>\u3001\u6700\u3082\u8fd1\u3044\u8fd1\u508d\u3092\u691c\u7d22\u3059\u308b\u3082\u306e\u3067\u3059\u3002</p>\n</a><p>\u8ad6\u6587\u3067\u306fScanN\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001<a href=\"https://faiss.ai/\">\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u306fFAISS\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p>\n",
 "<h2>Build Database</h2>\n<ul><li><span translate=no>_^_0_^_</span> is the length of a chunk (number of characters) </li>\n<li><span translate=no>_^_1_^_</span> is the batch size to use when calculating <span translate=no>_^_2_^_</span> </li>\n<li><span translate=no>_^_3_^_</span> is the number of features in <span translate=no>_^_4_^_</span> embeddings  <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">lists to select in FAISS index</a> </li>\n<li><span translate=no>_^_5_^_</span> is the number of lists in the index </li>\n<li><span translate=no>_^_6_^_</span> encoded vector size in the index </li>\n<li><span translate=no>_^_7_^_</span> is the number of lists to probe </li>\n<li>`n_train&#x27; is the number of keys to train the index on</li></ul>\n": "<h2>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u69cb\u7bc9</h2>\n<ul><li><span translate=no>_^_0_^_</span>\u30c1\u30e3\u30f3\u30af\u306e\u9577\u3055 (\u6587\u5b57\u6570)</li>\n<li><span translate=no>_^_1_^_</span>\u8a08\u7b97\u6642\u306b\u4f7f\u7528\u3059\u308b\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u3059 <span translate=no>_^_2_^_</span></li>\n<li><span translate=no>_^_3_^_</span>FAISS <span translate=no>_^_4_^_</span> <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u9078\u629e\u3059\u308b\u57cb\u3081\u8fbc\u307f\u30ea\u30b9\u30c8\u5185\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u306e\u6570\u3067\u3059</a></li>\n<li><span translate=no>_^_5_^_</span>\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30ea\u30b9\u30c8\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_6_^_</span>\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u30b5\u30a4\u30ba</li>\n<li><span translate=no>_^_7_^_</span>\u306f\u8abf\u3079\u308b\u30ea\u30b9\u30c8\u306e\u6570\u3067\u3059</li>\n<li>`n_train' \u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u30ad\u30fc\u306e\u6570\u3067\u3059</li></ul>\n",
 "<h2>Index for retrieving nearest neighbors</h2>\n": "<h2>\u6700\u8fd1\u508d\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9</h2>\n",
 "<h3>Retrieve nearest neighbors</h3>\n": "<h3>\u6700\u3082\u8fd1\u3044\u8fd1\u508d\u3092\u691c\u7d22\u3059\u308b</h3>\n",
 "<h4>Filter neighbors that overlap with the query</h4>\n<p>The positions of the neighbors are given by <span translate=no>_^_0_^_</span> and the position of the query chunk is <span translate=no>_^_1_^_</span>.</p>\n": "<h4>\u30af\u30a8\u30ea\u3068\u91cd\u8907\u3059\u308b\u8fd1\u508d\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b</h4>\n<p><span translate=no>_^_0_^_</span>\u8fd1\u508d\u306e\u4f4d\u7f6e\u306f\u3067\u6307\u5b9a\u3055\u308c\u3001\u30af\u30a8\u30ea\u30c1\u30e3\u30f3\u30af\u306e\u4f4d\u7f6e\u306f\u3067\u3059\u3002<span translate=no>_^_1_^_</span></p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p>Add the chunks to the index in batches of size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30c1\u30e3\u30f3\u30af\u3092\u30b5\u30a4\u30ba\u3054\u3068\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002<span translate=no>_^_0_^_</span></p>\n",
 "<p>Add to index </p>\n": "<p>\u7d22\u5f15\u306b\u8ffd\u52a0</p>\n",
 "<p>Create the <a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS index</a> </p>\n": "<p><a href=\"https://faiss.ai/cpp_api/struct/structfaiss_1_1IndexIVFPQ.html\">FAISS</a> \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3059\u308b</p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> nearest neighbors from the database </p>\n": "<p><span translate=no>_^_0_^_</span>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u3082\u8fd1\u3044\u8fd1\u508d\u3092\u53d6\u5f97</p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> of query chunks </p>\n": "<p><span translate=no>_^_0_^_</span>\u30af\u30a8\u30ea\u30c1\u30e3\u30f3\u30af\u306e\u53d6\u5f97</p>\n",
 "<p>Get a random sample of the the chunk indexes </p>\n": "<p>\u30c1\u30e3\u30f3\u30af\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97</p>\n",
 "<p>Get chunk embeddings by processing <span translate=no>_^_0_^_</span> number of chunks on each iteration </p>\n": "<p><span translate=no>_^_0_^_</span>\u5404\u53cd\u5fa9\u51e6\u7406\u3067\u30c1\u30e3\u30f3\u30af\u306e\u6570\u3092\u51e6\u7406\u3057\u3066\u30c1\u30e3\u30f3\u30af\u306e\u57cb\u3081\u8fbc\u307f\u3092\u884c\u3046</p>\n",
 "<p>Get the closest <span translate=no>_^_0_^_</span> after filtering </p>\n": "<p><span translate=no>_^_0_^_</span>\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u5f8c\u306b\u6700\u3082\u8fd1\u3044\u3082\u306e\u3092\u53d6\u5f97</p>\n",
 "<p>Get the offsets of each of the chunks </p>\n": "<p>\u5404\u30c1\u30e3\u30f3\u30af\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u53d6\u5f97</p>\n",
 "<p>Get training data (a string) </p>\n": "<p>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf (\u6587\u5b57\u5217) \u3092\u53d6\u5f97</p>\n",
 "<p>If the query chunk offsets are given filter out overlapping chunks </p>\n": "<p>\u30af\u30a8\u30ea\u306e\u30c1\u30e3\u30f3\u30af\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u91cd\u8907\u3059\u308b\u30c1\u30e3\u30f3\u30af\u3092\u9664\u5916\u3057\u307e\u3059\u3002</p>\n",
 "<p>Initialize BERT to get <span translate=no>_^_0_^_</span> </p>\n": "<p>BERT \u3092\u521d\u671f\u5316\u3057\u3066\u53d6\u5f97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Load the database </p>\n": "<p>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u8aad\u307f\u8fbc\u3080</p>\n",
 "<p>Load the dataset text file </p>\n": "<p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080</p>\n",
 "<p>Merge them into a single tensor </p>\n": "<p>\u305d\u308c\u3089\u3092\u5358\u4e00\u306e\u30c6\u30f3\u30bd\u30eb\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059</p>\n",
 "<p>Number of chunks </p>\n": "<p>\u30c1\u30e3\u30f3\u30af\u306e\u6570</p>\n",
 "<p>Save the index </p>\n": "<p>\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4fdd\u5b58\u3059\u308b</p>\n",
 "<p>Split the text into chunks of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30c6\u30ad\u30b9\u30c8\u3092\u6b21\u306e\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\u3057\u307e\u3059 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Train the index to store the keys </p>\n": "<p>\u30ad\u30fc\u3092\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the chunk length </li>\n<li><span translate=no>_^_1_^_</span> is the number of lists to probe </li>\n<li><span translate=no>_^_2_^_</span> is the number of neighbors to retrieve </li>\n<li><span translate=no>_^_3_^_</span> is the number of extra neighbors to retrieve since we will be  removing neighbors overlapping with the query chunk </li>\n<li><span translate=no>_^_4_^_</span> is the extra text length to avoid when checking for overlaps</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u306f\u30c1\u30e3\u30f3\u30af\u306e\u9577\u3055\u3067\u3059</li>\n<li><span translate=no>_^_1_^_</span>\u306f\u8abf\u3079\u308b\u30ea\u30b9\u30c8\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_2_^_</span>\u53d6\u5f97\u3059\u308b\u8fd1\u508d\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_3_^_</span>\u30af\u30a8\u30ea\u30c1\u30e3\u30f3\u30af\u3068\u91cd\u8907\u3057\u3066\u3044\u308b\u8fd1\u508d\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u305f\u3081\u3001\u53d6\u5f97\u3059\u308b\u4f59\u5206\u306a\u8fd1\u508d\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_4_^_</span>\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u304d\u306b\u907f\u3051\u308b\u3079\u304d\u4f59\u5206\u306a\u30c6\u30ad\u30b9\u30c8\u9577\u3067\u3059</li></ul>\n",
 "Database for nearest neighbor retrieval": "\u6700\u8fd1\u508d\u691c\u7d22\u7528\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9",
 "Nearest neighbor retrieval and creation of the database": "\u6700\u8fd1\u508d\u691c\u7d22\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f5c\u6210"
}