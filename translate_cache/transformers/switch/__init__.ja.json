{
 "<h1>Switch Transformer Block</h1>\n<p>This is the same as <a href=\"../models.html#TransformerLayer\">normal transformer block</a> with handling extra outputs of switch feedforward module.</p>\n": "<h1>\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9\u30d6\u30ed\u30c3\u30af</h1>\n<p>\u3053\u308c\u306f\u3001\u30b9\u30a4\u30c3\u30c1\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8ffd\u52a0\u51fa\u529b\u3092\u51e6\u7406\u3059\u308b\u70b9\u3067\u3001<a href=\"../models.html#TransformerLayer\">\u901a\u5e38\u306e\u30c8\u30e9\u30f3\u30b9\u30d6\u30ed\u30c3\u30af\u3068\u540c\u3058\u3067\u3059</a>\u3002</p>\n",
 "<h1>Switch Transformer</h1>\n<p>This is a miniature <a href=\"https://pytorch.org\">PyTorch</a> implementation of the paper <a href=\"https://papers.labml.ai/paper/2101.03961\">Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity</a>. Our implementation only has a few million parameters and doesn&#x27;t do model parallel distributed training. It does single GPU training, but we implement the concept of switching as described in the paper.</p>\n<p>The Switch Transformer uses different parameters for each token by switching among parameters based on the token. Therefore, only a fraction of parameters are chosen for each token. So you can have more parameters but less computational cost.</p>\n<p>The switching happens at the Position-wise Feedforward network (FFN) of each transformer block. Position-wise feedforward network consists of two sequentially fully connected layers. In switch transformer we have multiple FFNs (multiple experts), and we chose which one to use based on a router. The output is a set of probabilities for picking a FFN, and we pick the one with the highest probability and only evaluate that. So essentially the computational cost is the same as having a single FFN. In our implementation this doesn&#x27;t parallelize well when you have many or large FFNs since it&#x27;s all happening on a single GPU. In a distributed setup you would have each FFN (each very large) on a different device.</p>\n<p>The paper introduces another loss term to balance load among the experts (FFNs) and discusses dropping tokens when routing is not balanced.</p>\n<p>Here&#x27;s <a href=\"experiment.html\">the training code</a> and a notebook for training a switch transformer on Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/switch/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n": "<h1>\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9</h1>\n<p>\u3053\u308c\u306f\u3001\u8ad6\u6587\u306e\u300c<a href=\"https://papers.labml.ai/paper/2101.03961\">\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\uff1a\u30b7\u30f3\u30d7\u30eb\u3067\u52b9\u7387\u7684\u306a\u30b9\u30d1\u30fc\u30b9\u6027\u3092\u5099\u3048\u305f1\u5146\u30d1\u30e9\u30e1\u30fc\u30bf\u30e2\u30c7\u30eb\u3078\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0</a>\u300d<a href=\"https://pytorch.org\">\u306e\u30df\u30cb\u30c1\u30e5\u30a2PyTorch\u5b9f\u88c5\u3067\u3059</a>\u3002\u79c1\u305f\u3061\u306e\u5b9f\u88c5\u306b\u306f\u6570\u767e\u4e07\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3057\u304b\u306a\u304f\u3001\u30e2\u30c7\u30eb\u306e\u4e26\u5217\u5206\u6563\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306f\u884c\u3044\u307e\u305b\u3093\u3002\u30b7\u30f3\u30b0\u30ebGPU\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u8ad6\u6587\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u3068\u3044\u3046\u6982\u5ff5\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059</p>\u3002\n<p>Switch Transformer \u306f\u3001\u30c8\u30fc\u30af\u30f3\u306b\u57fa\u3065\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30c8\u30fc\u30af\u30f3\u3054\u3068\u306b\u7570\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u5404\u30c8\u30fc\u30af\u30f3\u3067\u9078\u629e\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3054\u304f\u308f\u305a\u304b\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3088\u308a\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u8a08\u7b97\u30b3\u30b9\u30c8\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3059</p>\u3002\n<p>\u5207\u308a\u66ff\u3048\u306f\u3001\u5404\u30c8\u30e9\u30f3\u30b9\u30d6\u30ed\u30c3\u30af\u306e\u4f4d\u7f6e\u3054\u3068\u306e\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af (FFN) \u3067\u884c\u308f\u308c\u307e\u3059\u3002\u4f4d\u7f6e\u5358\u4f4d\u306e\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3001\u9023\u7d9a\u3057\u3066\u5b8c\u5168\u306b\u63a5\u7d9a\u3055\u308c\u305f2\u3064\u306e\u5c64\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9\u306b\u306f\u8907\u6570\u306eFFN\uff08\u8907\u6570\u306e\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\uff09\u304c\u3044\u3066\u3001\u30eb\u30fc\u30bf\u30fc\u306b\u57fa\u3065\u3044\u3066\u3069\u308c\u3092\u4f7f\u7528\u3059\u308b\u304b\u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\u51fa\u529b\u306fFFN\u3092\u9078\u629e\u3059\u308b\u78ba\u7387\u306e\u30bb\u30c3\u30c8\u3067\u3001\u6700\u3082\u78ba\u7387\u306e\u9ad8\u3044\u3082\u306e\u3092\u9078\u3093\u3067\u8a55\u4fa1\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u57fa\u672c\u7684\u306b\u3001\u8a08\u7b97\u30b3\u30b9\u30c8\u306f\u5358\u4e00\u306e FFN \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3068\u540c\u3058\u3067\u3059\u3002\u79c1\u305f\u3061\u306e\u5b9f\u88c5\u3067\u306f\u3001FFN\u304c\u591a\u3044\u5834\u5408\u3084\u5927\u304d\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u30661\u3064\u306eGPU\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u3046\u307e\u304f\u4e26\u5217\u5316\u3067\u304d\u307e\u305b\u3093\u3002\u5206\u6563\u578b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u306f\u3001\u305d\u308c\u305e\u308c\u306e FFN\uff08\u305d\u308c\u305e\u308c\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\uff09\u3092\u7570\u306a\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059</p>\u3002\n<p>\u3053\u306e\u8ad6\u6587\u3067\u306f\u3001\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\uff08FFN\uff09\u9593\u3067\u8ca0\u8377\u3092\u5206\u6563\u3059\u308b\u305f\u3081\u306e\u5225\u306e\u640d\u5931\u7528\u8a9e\u3092\u7d39\u4ecb\u3057\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30c9\u30ed\u30c3\u30d7\u306b\u3064\u3044\u3066\u8ad6\u3058\u3066\u3044\u307e\u3059\u3002</p>\n<p>\u3053\u308c\u306f<a href=\"experiment.html\">\u3001Tiny Shakespeare\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30b3\u30fc\u30c9\u3068\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u3059</a>\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/switch/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n",
 "<h2>Routing among multiple FFNs</h2>\n": "<h2>\u8907\u6570\u306e FFN \u9593\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0</h2>\n",
 "<h2>Switch Transformer</h2>\n": "<h2>\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9</h2>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p>Add the feed-forward results back </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u306e\u7d50\u679c\u3092\u8ffd\u52a0\u3057\u76f4\u3059</p>\n",
 "<p>Add the self attention results </p>\n": "<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8ffd\u52a0</p>\n",
 "<p>Assign to final output </p>\n": "<p>\u6700\u7d42\u51fa\u529b\u306b\u5272\u308a\u5f53\u3066</p>\n",
 "<p>Capacity of each expert. <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5404\u5c02\u9580\u5bb6\u306e\u80fd\u529b\u3002<span translate=no>_^_0_^_</span></p>\n",
 "<p>Capture the shape to change shapes later </p>\n": "<p>\u5f62\u72b6\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u5f8c\u3067\u5f62\u72b6\u3092\u5909\u66f4</p>\n",
 "<p>Change the shape of the final output back to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6700\u7d42\u51fa\u529b\u306e\u5f62\u72b6\u3092\u306b\u623b\u3057\u307e\u3059 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Collect the tokens over capacity as dropped tokens </p>\n": "<p>\u5bb9\u91cf\u3092\u8d85\u3048\u305f\u30c8\u30fc\u30af\u30f3\u3092\u30c9\u30ed\u30c3\u30d7\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u96c6\u3081\u308b</p>\n",
 "<p>Don&#x27;t scale the values but multiply by <span translate=no>_^_0_^_</span> so that the gradients flow (this is something we experimented with). </p>\n": "<p>\u5024\u3092\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001<span translate=no>_^_0_^_</span>\u52fe\u914d\u304c\u6d41\u308c\u308b\u3088\u3046\u306b\u4e57\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u3053\u308c\u306f\u5b9f\u9a13\u3057\u305f\u3082\u306e\u3067\u3059\uff09\u3002</p>\n",
 "<p>Drop tokens in each of the experts </p>\n": "<p>\u5404\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306b\u30c8\u30fc\u30af\u30f3\u3092\u30c9\u30ed\u30c3\u30d7</p>\n",
 "<p>Final normalization layer </p>\n": "<p>\u6700\u7d42\u6b63\u898f\u5316\u30ec\u30a4\u30e4\u30fc</p>\n",
 "<p>Finally, normalize the vectors </p>\n": "<p>\u6700\u5f8c\u306b\u3001\u30d9\u30af\u30c8\u30eb\u3092\u6b63\u898f\u5316\u3057\u307e\u3059\u3002</p>\n",
 "<p>Flatten the sequence and batch dimensions </p>\n": "<p>\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u30d0\u30c3\u30c1\u306e\u30c7\u30a3\u30e1\u30f3\u30b7\u30e7\u30f3\u3092\u30d5\u30e9\u30c3\u30c8\u5316</p>\n",
 "<p>Get indexes of tokens going to each expert </p>\n": "<p>\u5404\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306b\u9001\u3089\u308c\u308b\u30c8\u30fc\u30af\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97</p>\n",
 "<p>Get outputs of the expert FFNs </p>\n": "<p>\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8 FFN \u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092\u53d6\u5f97</p>\n",
 "<p>Get routing probabilities for each of the tokens. <span translate=no>_^_0_^_</span> where <span translate=no>_^_1_^_</span> is the number of experts <span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> is the linear transformation of token embeddings. </p>\n": "<p>\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u78ba\u7387\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002<span translate=no>_^_0_^_</span>\u3053\u3053\u3067<span translate=no>_^_1_^_</span>\u3001\u306f\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306e\u4eba\u6570<span translate=no>_^_2_^_</span>\u3001<span translate=no>_^_3_^_</span>\u306f\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306e\u7dda\u5f62\u5909\u63db\u3067\u3059</p>\u3002\n",
 "<p>Get the maximum routing probabilities and the routes. We route to the expert with highest probability </p>\n": "<p>\u6700\u5927\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u78ba\u7387\u3068\u30eb\u30fc\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6700\u3082\u9ad8\u3044\u78ba\u7387\u3067\u5c02\u9580\u5bb6\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u307e\u3059</p>\n",
 "<p>Ignore if the expert is not over capacity </p>\n": "<p>\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304c\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044</p>\n",
 "<p>Initialize an empty list of dropped tokens </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306e\u7a7a\u306e\u30ea\u30b9\u30c8\u3092\u521d\u671f\u5316</p>\n",
 "<p>Initialize an empty tensor to store outputs </p>\n": "<p>\u7a7a\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u521d\u671f\u5316\u3057\u3066\u51fa\u529b\u3092\u4fdd\u5b58\u3059\u308b</p>\n",
 "<p>Keep only the tokens upto the capacity of the expert </p>\n": "<p>\u5c02\u9580\u5bb6\u304c\u5bfe\u5fdc\u3067\u304d\u308b\u7bc4\u56f2\u3067\u30c8\u30fc\u30af\u30f3\u306e\u307f\u3092\u4fdd\u7ba1\u3057\u3066\u304f\u3060\u3055\u3044</p>\n",
 "<p>Make copies of the transformer layer </p>\n": "<p>\u30c8\u30e9\u30f3\u30b9\u30ec\u30a4\u30e4\u30fc\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210</p>\n",
 "<p>Multiply by the expert outputs by the probabilities <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306b\u78ba\u7387\u3092\u639b\u3051\u307e\u3059 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalize for feed-forward </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u7528\u306b\u6b63\u898f\u5316</p>\n",
 "<p>Normalize the vectors before doing self attention </p>\n": "<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u884c\u3046\u524d\u306b\u30d9\u30af\u30c8\u30eb\u3092\u6b63\u898f\u5316\u3057\u3066\u304f\u3060\u3055\u3044</p>\n",
 "<p>Number of tokens routed to each expert. </p>\n": "<p>\u5404\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306e\u6570\u3002</p>\n",
 "<p>Only drop tokens if <span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span>. </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u305d\u3046\u3067\u3042\u308b\u5834\u5408\u306b\u306e\u307f\u30c8\u30fc\u30af\u30f3\u3092\u30c9\u30ed\u30c3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>\n",
 "<p>Pass through the dropped tokens </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3092\u30d1\u30b9\u30b9\u30eb\u30fc\u3059\u308b</p>\n",
 "<p>Pass through the switching feed-forward network </p>\n": "<p>\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d4c\u7531\u3057\u307e\u3059</p>\n",
 "<p>Return</p>\n<ul><li>the final output </li>\n<li>number of tokens routed to each expert </li>\n<li>sum of probabilities for each expert </li>\n<li>number of tokens dropped. </li>\n<li>routing probabilities of the selected experts</li></ul>\n<p>These are used for the load balancing loss and logging </p>\n": "<p>\u30ea\u30bf\u30fc\u30f3</p>\n<ul><li>\u6700\u7d42\u51fa\u529b</li>\n<li>\u5404\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u308b\u30c8\u30fc\u30af\u30f3\u306e\u6570</li>\n<li>\u5404\u5c02\u9580\u5bb6\u306e\u78ba\u7387\u306e\u5408\u8a08</li>\n<li>\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306e\u6570\u3002</li>\n<li>\u9078\u629e\u3057\u305f\u5c02\u9580\u5bb6\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u78ba\u7387</li></ul>\n<p>\u3053\u308c\u3089\u306f\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b7\u30f3\u30b0\u3001\u30ed\u30b9\u3001\u30ed\u30ae\u30f3\u30b0\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>\n",
 "<p>Routing layer and softmax </p>\n": "<p>\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u30ec\u30a4\u30e4\u30fc\u3068\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9</p>\n",
 "<p>Run through each transformer layer </p>\n": "<p>\u5404\u5909\u5727\u5668\u5c64\u306b\u901a\u3059</p>\n",
 "<p>Run through self attention, i.e. keys and values are from self </p>\n": "<p>\u81ea\u5df1\u6ce8\u610f\u3092\u5411\u3051\u308b\u3002\u3064\u307e\u308a\u3001\u30ad\u30fc\u3068\u5024\u306f\u81ea\u5df1\u304b\u3089\u306e\u3082\u306e\u3060</p>\n",
 "<p>Shuffle indexes before dropping </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u524d\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b</p>\n",
 "<p>make copies of the FFNs </p>\n": "<p>FFN \u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the capacity of each expert as a factor relative to ideally balanced load </li>\n<li><span translate=no>_^_1_^_</span> specifies whether to drop tokens if more tokens are routed to an expert than the capacity </li>\n<li><span translate=no>_^_2_^_</span> specifies whether to multiply the input to the FFN by the routing probability </li>\n<li><span translate=no>_^_3_^_</span> is the number of experts </li>\n<li><span translate=no>_^_4_^_</span> is the expert layer, a <a href=\"../feed_forward.html\">FFN module</a> </li>\n<li><span translate=no>_^_5_^_</span> is the number of features in a token embedding </li>\n<li><span translate=no>_^_6_^_</span> is the number of features in the hidden layer of the FFN </li>\n<li><span translate=no>_^_7_^_</span> is dropout probability in the FFN</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u7406\u60f3\u7684\u306a\u30d0\u30e9\u30f3\u30b9\u306e\u53d6\u308c\u305f\u8ca0\u8377\u306b\u5bfe\u3059\u308b\u5404\u5c02\u9580\u5bb6\u306e\u80fd\u529b\u304c\u4fc2\u6570\u3068\u306a\u308b\u304b</li>\n<li><span translate=no>_^_1_^_</span>\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u306b\u9001\u3089\u308c\u308b\u30c8\u30fc\u30af\u30f3\u306e\u6570\u304c\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3092\u8d85\u3048\u308b\u5834\u5408\u306b\u3001\u30c8\u30fc\u30af\u30f3\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059</li>\n<li><span translate=no>_^_2_^_</span>FFN \u3078\u306e\u5165\u529b\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u78ba\u7387\u3092\u639b\u3051\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059</li>\n<li><span translate=no>_^_3_^_</span>\u5c02\u9580\u5bb6\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_4_^_</span>\u306f\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u30ec\u30a4\u30e4\u30fc\u3001<a href=\"../feed_forward.html\">FFN \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059</a></li>\n<li><span translate=no>_^_5_^_</span>\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306b\u542b\u307e\u308c\u308b\u6a5f\u80fd\u306e\u6570</li>\n<li><span translate=no>_^_6_^_</span>\u306f FFN \u306e\u96a0\u308c\u30ec\u30a4\u30e4\u30fc\u306b\u3042\u308b\u30d5\u30a3\u30fc\u30c1\u30e3\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_7_^_</span>\u8131\u843d\u78ba\u7387\u306fFFN\u306b\u3042\u308b\u306e\u304b</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the input to the switching module with shape <span translate=no>_^_1_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u5f62\u72b6\u306e\u3042\u308b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u5165\u529b\u3067\u3059 <span translate=no>_^_1_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the token embedding size </li>\n<li><span translate=no>_^_1_^_</span> is the attention module </li>\n<li><span translate=no>_^_2_^_</span> is the feed forward module (which is the switching module in this case) </li>\n<li><span translate=no>_^_3_^_</span> is the probability of dropping out after self attention and FFN</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u30c8\u30fc\u30af\u30f3\u306e\u57cb\u3081\u8fbc\u307f\u30b5\u30a4\u30ba\u3067\u3059</li>\n<li><span translate=no>_^_1_^_</span>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059</li>\n<li><span translate=no>_^_2_^_</span>\u306f\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30e2\u30b8\u30e5\u30fc\u30eb (\u3053\u306e\u5834\u5408\u306f\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u30e2\u30b8\u30e5\u30fc\u30eb)</li>\n<li><span translate=no>_^_3_^_</span>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068FFN\u306e\u5f8c\u306b\u8131\u843d\u3059\u308b\u78ba\u7387\u3067\u3059</li></ul>\n",
 "Switch Transformer": "\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9",
 "This is an annotated implementation/tutorial a miniature version of Switch Transformer in PyTorch.": "\u3053\u308c\u306f\u6ce8\u91c8\u4ed8\u304d\u306e\u5b9f\u88c5/\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3001PyTorch\u306e\u30b9\u30a4\u30c3\u30c1\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u306e\u30df\u30cb\u30c1\u30e5\u30a2\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002"
}