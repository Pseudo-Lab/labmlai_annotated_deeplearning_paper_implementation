{
 "<h1>Switch Transformer Block</h1>\n<p>This is the same as <a href=\"../models.html#TransformerLayer\">normal transformer block</a> with handling extra outputs of switch feedforward module.</p>\n": "<h1>\u5f00\u5173\u53d8\u538b\u5668\u5757</h1>\n<p>\u8fd9\u4e0e<a href=\"../models.html#TransformerLayer\">\u666e\u901a\u53d8\u538b\u5668\u6a21\u5757</a>\u76f8\u540c\uff0c\u7528\u4e8e\u5904\u7406\u5f00\u5173\u524d\u9988\u6a21\u5757\u7684\u989d\u5916\u8f93\u51fa\u3002</p>\n",
 "<h1>Switch Transformer</h1>\n<p>This is a miniature <a href=\"https://pytorch.org\">PyTorch</a> implementation of the paper <a href=\"https://papers.labml.ai/paper/2101.03961\">Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity</a>. Our implementation only has a few million parameters and doesn&#x27;t do model parallel distributed training. It does single GPU training, but we implement the concept of switching as described in the paper.</p>\n<p>The Switch Transformer uses different parameters for each token by switching among parameters based on the token. Therefore, only a fraction of parameters are chosen for each token. So you can have more parameters but less computational cost.</p>\n<p>The switching happens at the Position-wise Feedforward network (FFN) of each transformer block. Position-wise feedforward network consists of two sequentially fully connected layers. In switch transformer we have multiple FFNs (multiple experts), and we chose which one to use based on a router. The output is a set of probabilities for picking a FFN, and we pick the one with the highest probability and only evaluate that. So essentially the computational cost is the same as having a single FFN. In our implementation this doesn&#x27;t parallelize well when you have many or large FFNs since it&#x27;s all happening on a single GPU. In a distributed setup you would have each FFN (each very large) on a different device.</p>\n<p>The paper introduces another loss term to balance load among the experts (FFNs) and discusses dropping tokens when routing is not balanced.</p>\n<p>Here&#x27;s <a href=\"experiment.html\">the training code</a> and a notebook for training a switch transformer on Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/switch/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n": "<h1>\u5f00\u5173\u53d8\u538b\u5668</h1>\n<p>\u8fd9\u662f\u7eb8\u8d28\u300a<a href=\"https://papers.labml.ai/paper/2101.03961\">\u5f00\u5173\u53d8\u5f62\u91d1\u521a\uff1a\u4ee5\u7b80\u5355\u9ad8\u6548\u7684\u7a00\u758f\u5ea6\u6269\u5c55\u5230\u4e07\u4ebf\u4e2a\u53c2\u6570\u6a21\u578b\u300b\u7684</a>\u5fae\u578b <a href=\"https://pytorch.org\">PyTorch</a> \u5b9e\u73b0\u3002\u6211\u4eec\u7684\u5b9e\u73b0\u53ea\u6709\u51e0\u767e\u4e07\u4e2a\u53c2\u6570\uff0c\u4e0d\u5bf9\u5e76\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u8fdb\u884c\u5efa\u6a21\u3002\u5b83\u8fdb\u884c\u5355\u4e2a GPU \u8bad\u7ec3\uff0c\u4f46\u6211\u4eec\u5b9e\u73b0\u4e86\u8bba\u6587\u4e2d\u63cf\u8ff0\u7684\u5207\u6362\u6982\u5ff5\u3002</p>\n<p>Switch Transformer \u901a\u8fc7\u6839\u636e\u4ee4\u724c\u5728\u53c2\u6570\u4e4b\u95f4\u5207\u6362\uff0c\u4e3a\u6bcf\u4e2a\u4ee4\u724c\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u53ea\u4e3a\u6bcf\u4e2a\u4ee3\u5e01\u9009\u62e9\u4e86\u4e00\u5c0f\u90e8\u5206\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u62e5\u6709\u66f4\u591a\u53c2\u6570\uff0c\u4f46\u8ba1\u7b97\u6210\u672c\u66f4\u4f4e\u3002</p>\n<p>\u5207\u6362\u53d1\u751f\u5728\u6bcf\u4e2a\u53d8\u538b\u5668\u6a21\u5757\u7684\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc (FFN) \u4e0a\u3002\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc\u7531\u4e24\u4e2a\u6309\u987a\u5e8f\u5b8c\u5168\u8fde\u63a5\u7684\u5c42\u7ec4\u6210\u3002\u5728\u4ea4\u6362\u673a\u53d8\u538b\u5668\u4e2d\uff0c\u6211\u4eec\u6709\u591a\u4e2a FFN\uff08\u591a\u4f4d\u4e13\u5bb6\uff09\uff0c\u6211\u4eec\u6839\u636e\u8def\u7531\u5668\u9009\u62e9\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002\u8f93\u51fa\u662f\u4e00\u7ec4\u7528\u4e8e\u9009\u62e9 FFN \u7684\u6982\u7387\uff0c\u6211\u4eec\u9009\u62e9\u6982\u7387\u6700\u9ad8\u7684\u6982\u7387\uff0c\u7136\u540e\u4ec5\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u3002\u56e0\u6b64\uff0c\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u8ba1\u7b97\u6210\u672c\u4e0e\u62e5\u6709\u5355\u4e2a FFN \u76f8\u540c\u3002\u5728\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\uff0c\u5f53\u4f60\u6709\u8bb8\u591a\u6216\u5927\u578b FFN \u65f6\uff0c\u8fd9\u79cd\u5e76\u884c\u5316\u6548\u679c\u4e0d\u4f73\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5207\u90fd\u53d1\u751f\u5728\u5355\u4e2a GPU \u4e0a\u3002\u5728\u5206\u5e03\u5f0f\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u4f1a\u5c06\u6bcf\u4e2a FFN\uff08\u6bcf\u4e2a\u90fd\u5f88\u5927\uff09\u653e\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u3002</p>\n<p>\u672c\u6587\u5f15\u5165\u4e86\u53e6\u4e00\u4e2a\u635f\u5931\u672f\u8bed\u6765\u5e73\u8861\u4e13\u5bb6\uff08FFN\uff09\u4e4b\u95f4\u7684\u8d1f\u8f7d\uff0c\u5e76\u8ba8\u8bba\u4e86\u8def\u7531\u4e0d\u5e73\u8861\u65f6\u4e22\u5f03\u4ee3\u5e01\u7684\u95ee\u9898\u3002</p>\n<p>\u8fd9\u662f<a href=\"experiment.html\">\u8bad\u7ec3\u4ee3\u7801\u548c\u4e00\u672c</a>\u7528\u4e8e\u5728 Tiny Shakespeare \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f00\u5173\u53d8\u538b\u5668\u7684\u7b14\u8bb0\u672c\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/switch/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n",
 "<h2>Routing among multiple FFNs</h2>\n": "<h2>\u5728\u591a\u4e2a FFN \u4e4b\u95f4\u8def\u7531</h2>\n",
 "<h2>Switch Transformer</h2>\n": "<h2>\u5f00\u5173\u53d8\u538b\u5668</h2>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p>Add the feed-forward results back </p>\n": "<p>\u5c06\u524d\u9988\u7ed3\u679c\u6dfb\u52a0\u56de\u6765</p>\n",
 "<p>Add the self attention results </p>\n": "<p>\u6dfb\u52a0\u81ea\u6211\u5173\u6ce8\u7684\u7ed3\u679c</p>\n",
 "<p>Assign to final output </p>\n": "<p>\u5206\u914d\u7ed9\u6700\u7ec8\u8f93\u51fa</p>\n",
 "<p>Capacity of each expert. <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u4f4d\u4e13\u5bb6\u7684\u80fd\u529b\u3002<span translate=no>_^_0_^_</span></p>\n",
 "<p>Capture the shape to change shapes later </p>\n": "<p>\u6355\u83b7\u5f62\u72b6\u4ee5\u4fbf\u7a0d\u540e\u66f4\u6539\u5f62\u72b6</p>\n",
 "<p>Change the shape of the final output back to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5c06\u6700\u7ec8\u8f93\u51fa\u7684\u5f62\u72b6\u6539\u56de<span translate=no>_^_0_^_</span></p>\n",
 "<p>Collect the tokens over capacity as dropped tokens </p>\n": "<p>\u6536\u96c6\u8d85\u8fc7\u5bb9\u91cf\u7684\u4ee3\u5e01\u4f5c\u4e3a\u4e22\u5f03\u7684\u4ee4\u724c</p>\n",
 "<p>Don&#x27;t scale the values but multiply by <span translate=no>_^_0_^_</span> so that the gradients flow (this is something we experimented with). </p>\n": "<p>\u4e0d\u8981\u7f29\u653e\u503c\uff0c\u800c\u662f\u4e58<span translate=no>_^_0_^_</span>\u4ee5\u6e10\u53d8\u6d41\u52a8\uff08\u8fd9\u662f\u6211\u4eec\u5c1d\u8bd5\u8fc7\u7684\uff09\u3002</p>\n",
 "<p>Drop tokens in each of the experts </p>\n": "<p>\u5728\u6bcf\u4f4d\u4e13\u5bb6\u8eab\u4e0a\u4e22\u6389\u4ee3\u5e01</p>\n",
 "<p>Final normalization layer </p>\n": "<p>\u6700\u7ec8\u5f52\u4e00\u5316\u5c42</p>\n",
 "<p>Finally, normalize the vectors </p>\n": "<p>\u6700\u540e\uff0c\u5bf9\u5411\u91cf\u8fdb\u884c\u5f52\u4e00\u5316</p>\n",
 "<p>Flatten the sequence and batch dimensions </p>\n": "<p>\u5c55\u5e73\u5e8f\u5217\u548c\u6279\u6b21\u7ef4\u5ea6</p>\n",
 "<p>Get indexes of tokens going to each expert </p>\n": "<p>\u83b7\u53d6\u6bcf\u4f4d\u4e13\u5bb6\u7684\u4ee3\u5e01\u7d22\u5f15</p>\n",
 "<p>Get outputs of the expert FFNs </p>\n": "<p>\u83b7\u53d6\u4e13\u5bb6 FFN \u7684\u8f93\u51fa</p>\n",
 "<p>Get routing probabilities for each of the tokens. <span translate=no>_^_0_^_</span> where <span translate=no>_^_1_^_</span> is the number of experts <span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> is the linear transformation of token embeddings. </p>\n": "<p>\u83b7\u53d6\u6bcf\u4e2a\u4ee4\u724c\u7684\u8def\u7531\u6982\u7387\u3002<span translate=no>_^_0_^_</span>\u5176\u4e2d<span translate=no>_^_1_^_</span>\u662f\u4e13\u5bb6\u7684\u6570\u91cf<span translate=no>_^_2_^_</span>\uff0c<span translate=no>_^_3_^_</span>\u662f\u4ee4\u724c\u5d4c\u5165\u7684\u7ebf\u6027\u53d8\u6362\u3002</p>\n",
 "<p>Get the maximum routing probabilities and the routes. We route to the expert with highest probability </p>\n": "<p>\u83b7\u53d6\u6700\u5927\u8def\u7531\u6982\u7387\u548c\u8def\u7ebf\u3002\u6211\u4eec\u4ee5\u6700\u9ad8\u7684\u6982\u7387\u8def\u7531\u5230\u667a\u80fd\u4ea4\u6613</p>\u7cfb\u7edf\n",
 "<p>Ignore if the expert is not over capacity </p>\n": "<p>\u5982\u679c\u667a\u80fd\u4ea4\u6613\u6ca1\u6709\u8d85\u51fa\u5bb9\u91cf\uff0c\u8bf7\u5ffd\u7565</p>\n",
 "<p>Initialize an empty list of dropped tokens </p>\n": "<p>\u521d\u59cb\u5316\u5df2\u4e22\u5f03\u4ee4\u724c\u7684\u7a7a\u5217\u8868</p>\n",
 "<p>Initialize an empty tensor to store outputs </p>\n": "<p>\u521d\u59cb\u5316\u7a7a\u5f20\u91cf\u4ee5\u5b58\u50a8\u8f93\u51fa</p>\n",
 "<p>Keep only the tokens upto the capacity of the expert </p>\n": "<p>\u53ea\u4fdd\u7559\u4e0e\u4e13\u5bb6\u5bb9\u91cf\u76f8\u7b49\u7684\u4ee3\u5e01</p>\n",
 "<p>Make copies of the transformer layer </p>\n": "<p>\u5236\u4f5c\u53d8\u538b\u5668\u5c42\u7684\u526f\u672c</p>\n",
 "<p>Multiply by the expert outputs by the probabilities <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5c06\u667a\u80fd\u4ea4\u6613\u7684\u8f93\u51fa\u4e58\u4ee5\u6982\u7387<span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalize for feed-forward </p>\n": "<p>\u6807\u51c6\u5316\u4ee5\u8fdb\u884c\u524d\u9988</p>\n",
 "<p>Normalize the vectors before doing self attention </p>\n": "<p>\u5728\u8fdb\u884c\u81ea\u6211\u6ce8\u610f\u4e4b\u524d\u5bf9\u5411\u91cf\u8fdb\u884c\u5f52\u4e00\u5316</p>\n",
 "<p>Number of tokens routed to each expert. </p>\n": "<p>\u53d1\u9001\u7ed9\u6bcf\u4f4d\u4e13\u5bb6\u7684\u4ee3\u5e01\u6570\u91cf\u3002</p>\n",
 "<p>Only drop tokens if <span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span>. </p>\n": "<p>\u5982\u679c<span translate=no>_^_0_^_</span>\u662f\uff0c\u5219\u4ec5\u4e22\u5f03\u4ee4\u724c<span translate=no>_^_1_^_</span>\u3002</p>\n",
 "<p>Pass through the dropped tokens </p>\n": "<p>\u901a\u8fc7\u6389\u843d\u7684\u4ee3\u5e01</p>\n",
 "<p>Pass through the switching feed-forward network </p>\n": "<p>\u901a\u8fc7\u4ea4\u6362\u524d\u9988\u7f51\u7edc</p>\n",
 "<p>Return</p>\n<ul><li>the final output </li>\n<li>number of tokens routed to each expert </li>\n<li>sum of probabilities for each expert </li>\n<li>number of tokens dropped. </li>\n<li>routing probabilities of the selected experts</li></ul>\n<p>These are used for the load balancing loss and logging </p>\n": "<p>\u8fd4\u56de</p>\n<ul><li>\u6700\u7ec8\u8f93\u51fa</li>\n<li>\u53d1\u9001\u7ed9\u6bcf\u4f4d\u4e13\u5bb6\u7684\u4ee3\u5e01\u6570\u91cf</li>\n<li>\u6bcf\u4e2a EA \u7684\u6982\u7387\u603b\u548c</li>\n<li>\u4e22\u5f03\u7684\u4ee3\u5e01\u6570\u91cf\u3002</li>\n<li>\u6240\u9009 EA \u7684\u8def\u7531\u6982\u7387</li></ul>\n<p>\u8fd9\u4e9b\u7528\u4e8e\u8d1f\u8f7d\u5e73\u8861\u4e22\u5931\u548c\u65e5\u5fd7\u8bb0\u5f55</p>\n",
 "<p>Routing layer and softmax </p>\n": "<p>\u8def\u7531\u5c42\u548c softmax</p>\n",
 "<p>Run through each transformer layer </p>\n": "<p>\u7a7f\u8fc7\u6bcf\u4e2a\u53d8\u538b\u5668\u5c42</p>\n",
 "<p>Run through self attention, i.e. keys and values are from self </p>\n": "<p>\u901a\u8fc7\u81ea\u6211\u5173\u6ce8\uff0c\u5373\u5173\u952e\u548c\u4ef7\u503c\u6765\u81ea\u81ea\u6211</p>\n",
 "<p>Shuffle indexes before dropping </p>\n": "<p>\u5728\u4e22\u5f03\u4e4b\u524d\u968f\u673a\u64ad\u653e\u7d22\u5f15</p>\n",
 "<p>make copies of the FFNs </p>\n": "<p>\u590d\u5236 FFN</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the capacity of each expert as a factor relative to ideally balanced load </li>\n<li><span translate=no>_^_1_^_</span> specifies whether to drop tokens if more tokens are routed to an expert than the capacity </li>\n<li><span translate=no>_^_2_^_</span> specifies whether to multiply the input to the FFN by the routing probability </li>\n<li><span translate=no>_^_3_^_</span> is the number of experts </li>\n<li><span translate=no>_^_4_^_</span> is the expert layer, a <a href=\"../feed_forward.html\">FFN module</a> </li>\n<li><span translate=no>_^_5_^_</span> is the number of features in a token embedding </li>\n<li><span translate=no>_^_6_^_</span> is the number of features in the hidden layer of the FFN </li>\n<li><span translate=no>_^_7_^_</span> is dropout probability in the FFN</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u6bcf\u4e2a EA \u7684\u5bb9\u91cf\u4f5c\u4e3a\u76f8\u5bf9\u4e8e\u7406\u60f3\u5e73\u8861\u8d1f\u8f7d\u7684\u4e00\u4e2a\u56e0\u7d20</li>\n<li><span translate=no>_^_1_^_</span>\u6307\u5b9a\u5982\u679c\u8def\u7531\u5230\u4e13\u5bb6\u7684\u4ee4\u724c\u591a\u4e8e\u5bb9\u91cf\uff0c\u662f\u5426\u4e22\u5f03\u4ee4\u724c</li>\n<li><span translate=no>_^_2_^_</span>\u6307\u5b9a\u662f\u5426\u5c06 FFN \u7684\u8f93\u5165\u4e58\u4ee5\u8def\u7531\u6982\u7387</li>\n<li><span translate=no>_^_3_^_</span>\u662f\u4e13\u5bb6\u7684\u6570\u91cf</li>\n<li><span translate=no>_^_4_^_</span>\u662f\u4e13\u5bb6\u5c42\uff0c\u4e00\u4e2a <a href=\"../feed_forward.html\">FFN \u6a21\u5757</a></li>\n<li><span translate=no>_^_5_^_</span>\u662f\u4ee4\u724c\u5d4c\u5165\u4e2d\u7684\u8981\u7d20\u6570\u91cf</li>\n<li><span translate=no>_^_6_^_</span>\u662f FFN \u9690\u85cf\u5c42\u4e2d\u7684\u8981\u7d20\u6570\u91cf</li>\n</ul><li><span translate=no>_^_7_^_</span>FFN \u4e2d\u7684\u8f8d\u5b66\u6982\u7387\u662f\u591a\u5c11</li>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the input to the switching module with shape <span translate=no>_^_1_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u5e26\u5f62\u72b6\u7684\u5f00\u5173\u6a21\u5757\u7684\u8f93\u5165<span translate=no>_^_1_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the token embedding size </li>\n<li><span translate=no>_^_1_^_</span> is the attention module </li>\n<li><span translate=no>_^_2_^_</span> is the feed forward module (which is the switching module in this case) </li>\n<li><span translate=no>_^_3_^_</span> is the probability of dropping out after self attention and FFN</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u4ee4\u724c\u5d4c\u5165\u7684\u5927\u5c0f</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u6ce8\u610f\u529b\u6a21\u5757</li>\n<li><span translate=no>_^_2_^_</span>\u662f\u524d\u9988\u6a21\u5757\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u4ea4\u6362\u6a21\u5757\uff09</li>\n<li><span translate=no>_^_3_^_</span>\u662f\u81ea\u6211\u5173\u6ce8\u548c FFN \u540e\u9000\u5b66\u7684\u6982\u7387</li></ul>\n",
 "Switch Transformer": "\u5f00\u5173\u53d8\u538b\u5668",
 "This is an annotated implementation/tutorial a miniature version of Switch Transformer in PyTorch.": "\u8fd9\u662f\u4e00\u4e2a\u5e26\u6ce8\u91ca\u7684\u5b9e\u73b0/\u6559\u7a0b\uff0c\u662f PyTorch \u4e2d Switch Transformer \u7684\u5fae\u578b\u7248\u672c\u3002"
}