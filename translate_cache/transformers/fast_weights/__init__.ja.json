{
 "<h1>Fast weights transformer</h1>\n<p>The paper <a href=\"https://papers.labml.ai/paper/2102.11174\">Linear Transformers Are Secretly Fast Weight Memory Systems in PyTorch</a> finds similarities between linear self-attention and fast weight systems and makes modifications to self-attention update rule based on that. It also introduces a simpler, yet effective kernel function.</p>\n<p><em>The authors have provided an <a href=\"https://github.com/ischlag/fast-weight-transformers\">official implementation</a> of the paper including other variants they compare with in the paper.</em></p>\n<h2>Fast weights</h2>\n<p>Consider a sequence of inputs <span translate=no>_^_0_^_</span> or length <span translate=no>_^_1_^_</span> and each step is a vector of size <span translate=no>_^_2_^_</span>; i.e. <span translate=no>_^_3_^_</span>. The fast weight model generates a weight matrix at each step to produce output <span translate=no>_^_4_^_</span>, <span translate=no>_^_5_^_</span></p>\n<span translate=no>_^_6_^_</span><p><span translate=no>_^_7_^_</span> is the outer product (<span translate=no>_^_8_^_</span>), where elements of the two vectors are multiplied with each other to give a matrix. <span translate=no>_^_9_^_</span> is an activation function. <span translate=no>_^_10_^_</span> and <span translate=no>_^_11_^_</span> are trainable weights (parameters). <span translate=no>_^_12_^_</span> are the fast weights that are generated at each step.</p>\n<h2>Linear self-attention</h2>\n<p>Original transformer self-attention is, (omitting <span translate=no>_^_13_^_</span> for clarity)</p>\n<span translate=no>_^_14_^_</span><p>where <span translate=no>_^_15_^_</span></p>\n<p>The idea behind linearizing self attention is to replace softmax kernel <span translate=no>_^_16_^_</span> with a different kernel <span translate=no>_^_17_^_</span> so that we can calculate the denominator of the self attention function faster:</p>\n<p><span translate=no>_^_18_^_</span></p>\n<p>This gives</p>\n<span translate=no>_^_19_^_</span><p>With <span translate=no>_^_20_^_</span> and <span translate=no>_^_21_^_</span>, we can calculate them efficiently:</p>\n<span translate=no>_^_22_^_</span><p>This is quite similar to fast weights.</p>\n<p>The paper introduces a new linear attention projection function <span translate=no>_^_23_^_</span> a new update rule for <span translate=no>_^_24_^_</span> and change the normalization <span translate=no>_^_25_^_</span></p>\n<p>Here are <a href=\"experiment.html\">the training code</a> and a notebook for training a fast weights  transformer on the Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/fast_weights/experiment.ipynb\"><span translate=no>_^_26_^_</span></a></p>\n": "<h1>\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u30c8\u30e9\u30f3\u30b9</h1>\n<p><a href=\"https://papers.labml.ai/paper/2102.11174\">PyTorch\u306e\u7dda\u5f62\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u306f\u5bc6\u304b\u306b\u9ad8\u901f\u306a\u91cd\u307f\u8a18\u61b6\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308b\u3068\u3044\u3046\u8ad6\u6587\u3067\u306f\u3001\u7dda\u5f62\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u3068\u9ad8\u901f\u91cd\u307f\u30b7\u30b9\u30c6\u30e0\u306e\u985e\u4f3c\u70b9\u3092\u898b\u51fa\u3057</a>\u3001\u305d\u308c\u306b\u57fa\u3065\u3044\u3066\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u66f4\u65b0\u30eb\u30fc\u30eb\u3092\u4fee\u6b63\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308a\u306a\u304c\u3089\u52b9\u679c\u7684\u306a\u30ab\u30fc\u30cd\u30eb\u6a5f\u80fd\u3082\u5c0e\u5165\u3055\u308c\u3066\u3044\u307e\u3059</p>\u3002\n<p><em>\u8457\u8005\u3089\u306f\u3001\u8ad6\u6587\u3067\u6bd4\u8f03\u3057\u305f\u4ed6\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3082\u542b\u3081\u3066\u3001<a href=\"https://github.com/ischlag/fast-weight-transformers\">\u8ad6\u6587\u306e\u516c\u5f0f\u306a\u5b9f\u88c5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059</a>\u3002</em></p>\n<h2>\u30d5\u30a1\u30fc\u30b9\u30c8\u30a6\u30a7\u30a4\u30c8</h2>\n<p><span translate=no>_^_0_^_</span>\u5165\u529b\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u307e\u305f\u306f\u9577\u3055\u3092\u8003\u3048\u3066\u307f\u308b\u3068<span translate=no>_^_1_^_</span>\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u306f\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059<span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u3002\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u30e2\u30c7\u30eb\u3067\u306f\u3001<span translate=no>_^_4_^_</span>\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u30a6\u30a7\u30a4\u30c8\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u3092\u751f\u6210\u3057\u3066\u51fa\u529b\u3092\u751f\u6210\u3057\u307e\u3059</p>\u3002<span translate=no>_^_5_^_</span>\n<span translate=no>_^_6_^_</span><p><span translate=no>_^_7_^_</span>\u306f\u5916\u7a4d (<span translate=no>_^_8_^_</span>) \u3067\u30012 \u3064\u306e\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u3092\u639b\u3051\u5408\u308f\u305b\u3066\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002<span translate=no>_^_9_^_</span>\u8d77\u52d5\u6a5f\u80fd\u3067\u3059\u3002<span translate=no>_^_10_^_</span><span translate=no>_^_11_^_</span>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u53ef\u80fd\u306a\u30a6\u30a7\u30a4\u30c8 (\u30d1\u30e9\u30e1\u30fc\u30bf) \u3067\u3059\u3002<span translate=no>_^_12_^_</span>\u306f\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u751f\u6210\u3055\u308c\u308b\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u3067\u3059</p>\u3002\n<h2>\u76f4\u7dda\u7684\u306a\u81ea\u5df1\u6ce8\u610f</h2>\n<p>\u30aa\u30ea\u30b8\u30ca\u30eb\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u306e\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u3001\uff08\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7701\u7565<span translate=no>_^_13_^_</span>\uff09</p>\n<span translate=no>_^_14_^_</span><p>\u3069\u3053 <span translate=no>_^_15_^_</span></p>\n<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u7dda\u5f62\u5316\u306e\u80cc\u5f8c\u306b\u3042\u308b\u8003\u3048\u65b9\u306f\u3001<span translate=no>_^_17_^_</span>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u95a2\u6570\u306e\u5206\u6bcd\u3092\u3088\u308a\u901f\u304f\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3001softmax <span translate=no>_^_16_^_</span> \u30ab\u30fc\u30cd\u30eb\u3092\u5225\u306e\u30ab\u30fc\u30cd\u30eb\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3059\u3002</p>\n<p><span translate=no>_^_18_^_</span></p>\n<p>\u3053\u308c\u306b\u3088\u308a</p>\n<span translate=no>_^_19_^_</span><p><span translate=no>_^_20_^_</span>\u3068\u3092\u4f7f\u3046\u3068<span translate=no>_^_21_^_</span>\u3001\u305d\u308c\u3089\u3092\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002</p>\n<span translate=no>_^_22_^_</span><p>\u3053\u308c\u306f\u30d5\u30a1\u30fc\u30b9\u30c8\u30a6\u30a7\u30a4\u30c8\u3068\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002</p>\n<p>\u3053\u306e\u8ad6\u6587\u3067\u306f\u3001\u65b0\u3057\u3044\u7dda\u5f62\u6ce8\u610f\u6295\u5f71\u95a2\u6570<span translate=no>_^_23_^_</span>\u3001<span translate=no>_^_24_^_</span>\u6b63\u898f\u5316\u306e\u65b0\u3057\u3044\u66f4\u65b0\u898f\u5247\u3068\u5909\u66f4\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002<span translate=no>_^_25_^_</span></p>\n<p>\u4ee5\u4e0b\u306f\u3001<a href=\"experiment.html\">Tiny Shakespeare\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30b3\u30fc\u30c9\u3068\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u3059</a>\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/fast_weights/experiment.ipynb\"><span translate=no>_^_26_^_</span></a></p>\n",
 "<h2>Deterministic Parameter Free Project (DPFP)</h2>\n<p>This is the new projection function <span translate=no>_^_0_^_</span> introduced in the paper. DPFP projects <span translate=no>_^_1_^_</span> of dimensionality <span translate=no>_^_2_^_</span> to dimensionality <span translate=no>_^_3_^_</span>, where <span translate=no>_^_4_^_</span> is a hyper-parameter.</p>\n<p><span translate=no>_^_5_^_</span></p>\n<p>where <span translate=no>_^_6_^_</span> is the concatenation of <span translate=no>_^_7_^_</span> and <span translate=no>_^_8_^_</span> to give a vector of size <span translate=no>_^_9_^_</span>, <span translate=no>_^_10_^_</span>, and <span translate=no>_^_11_^_</span>. <span translate=no>_^_12_^_</span> is the <span translate=no>_^_13_^_</span>-th element of vector <span translate=no>_^_14_^_</span> and is rolled around if <span translate=no>_^_15_^_</span> is larger than the number of elements in <span translate=no>_^_16_^_</span>.</p>\n<p>Basically, it creates a new vector by multiplying elements of <span translate=no>_^_17_^_</span> shifted by <span translate=no>_^_18_^_</span>.</p>\n<p>This produces projections that are sparse (only a few elements of <span translate=no>_^_19_^_</span> are non-zero) and orthogonal (<span translate=no>_^_20_^_</span> for most <span translate=no>_^_21_^_</span> unless <span translate=no>_^_22_^_</span> and <span translate=no>_^_23_^_</span> are very similar.</p>\n<h3>Normalization</h3>\n<p>Paper introduces a simple normalization for <span translate=no>_^_24_^_</span>,</p>\n<p><span translate=no>_^_25_^_</span></p>\n<p><em>Check the paper for derivation.</em></p>\n": "<h2>\u6c7a\u5b9a\u8ad6\u7684\u30d1\u30e9\u30e1\u30fc\u30bf\u30d5\u30ea\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 (DPFP)</h2>\n<p><span translate=no>_^_0_^_</span>\u3053\u308c\u306f\u8ad6\u6587\u3067\u7d39\u4ecb\u3057\u305f\u65b0\u3057\u3044\u6295\u5f71\u6a5f\u80fd\u3067\u3059\u3002DPFP <span translate=no>_^_1_^_</span> \u306f\u6b21\u5143\u3068\u6b21\u5143\u306e\u95a2\u4fc2\u3092\u6295\u5f71\u3057\u307e\u3059\u3002\u3053\u3053\u3067<span translate=no>_^_2_^_</span>\u3001<span translate=no>_^_3_^_</span>\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059</p>\u3002<span translate=no>_^_4_^_</span>\n<p><span translate=no>_^_5_^_</span></p>\n<p>\u3053\u3053\u3067\u3001<span translate=no>_^_6_^_</span><span translate=no>_^_7_^_</span><span translate=no>_^_8_^_</span>\u306f\u3092\u9023\u7d50\u3057\u3066\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u3001<span translate=no>_^_9_^_</span>\u3001<span translate=no>_^_10_^_</span>\u3092\u8fd4\u3057\u307e\u3059\u3002<span translate=no>_^_11_^_</span><span translate=no>_^_12_^_</span>\u306f\u30d9\u30af\u30c8\u30eb\u306e <span translate=no>_^_13_^_</span> <span translate=no>_^_14_^_</span>-\u756a\u76ee\u306e\u8981\u7d20\u3067\u3001<span translate=no>_^_15_^_</span><span translate=no>_^_16_^_</span>\u304c\u5185\u306e\u8981\u7d20\u6570\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f\u30ed\u30fc\u30eb\u30a2\u30e9\u30a6\u30f3\u30c9\u3055\u308c\u307e\u3059</p>\u3002\n<p>\u57fa\u672c\u7684\u306b\u306f\u3001<span translate=no>_^_17_^_</span> shiftd\u306e\u8981\u7d20\u3092\u4e57\u7b97\u3057\u3066\u65b0\u3057\u3044\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002<span translate=no>_^_18_^_</span></p>\n<p>\u3053\u306e\u7d50\u679c\u3001\u6295\u5f71\u306f\u307e\u3070\u3089\u3067 (0 \u4ee5\u5916\u306e\u8981\u7d20\u306f\u3054\u304f\u308f\u305a\u304b)\u3001\u76f4\u4ea4 (<span translate=no>_^_19_^_</span><span translate=no>_^_20_^_</span><span translate=no>_^_21_^_</span><span translate=no>_^_22_^_</span>\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3067\u4f8b\u5916\u306f\u9664\u304f)\u3001\u975e\u5e38\u306b\u3088\u304f\u4f3c\u305f\u6295\u5f71\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002<span translate=no>_^_23_^_</span></p>\n<h3>\u30ce\u30fc\u30de\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3</h3>\n<p>\u8ad6\u6587\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u7c21\u5358\u306a\u6b63\u898f\u5316\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002<span translate=no>_^_24_^_</span></p>\n<p><span translate=no>_^_25_^_</span></p>\n<p><em>\u8ad6\u6587\u306e\u5c0e\u51fa\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</em></p>\n",
 "<h2>Fast Weights Attention</h2>\n<p>The paper introduces a new update rule for calculating <span translate=no>_^_0_^_</span>. The model first retrieves the current value <span translate=no>_^_1_^_</span> paired with the key <span translate=no>_^_2_^_</span>. Then stores a combination <span translate=no>_^_3_^_</span> of the retrieved value <span translate=no>_^_4_^_</span> and the input <span translate=no>_^_5_^_</span>.</p>\n<span translate=no>_^_6_^_</span><p>where <span translate=no>_^_7_^_</span> is a trainable parameter and <span translate=no>_^_8_^_</span> is the sigmoid function.</p>\n<p>Note that we don&#x27;t need the normalization term <span translate=no>_^_9_^_</span> because <span translate=no>_^_10_^_</span> is normalized.</p>\n": "<h2>\u30d5\u30a1\u30b9\u30c8\u30a6\u30a8\u30a4\u30c8\u6ce8\u610f</h2>\n<p>\u3053\u306e\u8ad6\u6587\u3067\u306f\u3001<span translate=no>_^_0_^_</span>\u8a08\u7b97\u306b\u95a2\u3059\u308b\u65b0\u3057\u3044\u66f4\u65b0\u30eb\u30fc\u30eb\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306f\u307e\u305a\u3001<span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span>\u30ad\u30fc\u3068\u30da\u30a2\u306b\u306a\u3063\u3066\u3044\u308b\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6b21\u306b\u3001<span translate=no>_^_3_^_</span><span translate=no>_^_4_^_</span><span translate=no>_^_5_^_</span>\u53d6\u5f97\u3057\u305f\u5024\u3068\u5165\u529b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u683c\u7d0d\u3057\u307e\u3059</p>\u3002\n<span translate=no>_^_6_^_</span><p>where <span translate=no>_^_7_^_</span> \u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3001<span translate=no>_^_8_^_</span>\u306f\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3067\u3059\u3002</p>\n<p><span translate=no>_^_9_^_</span><span translate=no>_^_10_^_</span>\u306f\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u6b63\u898f\u5316\u9805\u306f\u5fc5\u8981\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p> <span translate=no>_^_0_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p> This is a general transformer layer that combines self attention and feedforward network.</p>\n": "<p>\u3053\u308c\u306f\u3001\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u4e00\u822c\u7684\u306a\u30c8\u30e9\u30f3\u30b9\u5c64\u3067\u3059\u3002</p>\n",
 "<p> This is a general transformer module with multiple transformer layers</p>\n": "<p>\u3053\u308c\u306f\u3001\u8907\u6570\u306e\u5909\u5727\u5668\u5c64\u3092\u5099\u3048\u305f\u4e00\u822c\u7684\u306a\u5909\u5727\u5668\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002</p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> for all steps and heads </p>\n": "<p><span translate=no>_^_0_^_</span>\u3059\u3079\u3066\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u30d8\u30c3\u30c9\u306b\u5bfe\u5fdc</p>\n",
 "<p>Add the feed-forward results back </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u306e\u7d50\u679c\u3092\u8ffd\u52a0\u3057\u76f4\u3059</p>\n",
 "<p>Add the self attention results </p>\n": "<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8ffd\u52a0</p>\n",
 "<p>Calculate fast weights self attention </p>\n": "<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u8a08\u7b97</p>\n",
 "<p>Concatenate copies of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u306e\u30b3\u30d4\u30fc\u3092\u9023\u7d50 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Concatenate to get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u9023\u7d50\u3057\u3066\u53d6\u5f97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Dropout </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8</p>\n",
 "<p>Dropout layer </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u30ec\u30a4\u30e4\u30fc</p>\n",
 "<p>Fast weights attention module </p>\n": "<p>\u30d5\u30a1\u30b9\u30c8\u30a6\u30a7\u30a4\u30c8\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb</p>\n",
 "<p>Feed-forward network </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af</p>\n",
 "<p>Final normalization layer </p>\n": "<p>\u6700\u7d42\u6b63\u898f\u5316\u30ec\u30a4\u30e4\u30fc</p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u53d6\u5f97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Get layer output </p>\n": "<p>\u30ec\u30a4\u30e4\u30fc\u51fa\u529b\u3092\u53d6\u5f97</p>\n",
 "<p>Get the number of steps <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u53d6\u5f97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Interpolation weight function <span translate=no>_^_0_^_</span> for each head </p>\n": "<p><span translate=no>_^_0_^_</span>\u5404\u30d8\u30c3\u30c9\u306e\u88dc\u9593\u30a6\u30a7\u30a4\u30c8\u95a2\u6570</p>\n",
 "<p>Iterate through steps </p>\n": "<p>\u624b\u9806\u3092\u7e70\u308a\u8fd4\u3059</p>\n",
 "<p>List to store outputs <span translate=no>_^_0_^_</span> </p>\n": "<p>\u51fa\u529b\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Make copies of the transformer layer </p>\n": "<p>\u30c8\u30e9\u30f3\u30b9\u30ec\u30a4\u30e4\u30fc\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210</p>\n",
 "<p>Merge multiple heads and append to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8907\u6570\u306e\u30d8\u30c3\u30c9\u3092\u7d50\u5408\u3057\u3066\u8ffd\u52a0 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Multiply them, <span translate=no>_^_0_^_</span> </p>\n": "<p>\u305d\u308c\u3089\u3092\u639b\u3051\u5408\u308f\u305b\u3066\u3001<span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalization layers </p>\n": "<p>\u6b63\u898f\u5316\u30ec\u30a4\u30e4\u30fc</p>\n",
 "<p>Normalize by <span translate=no>_^_0_^_</span> </p>\n": "<p>\u306b\u3088\u308b\u6b63\u898f\u5316 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalize for feed-forward </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u7528\u306b\u6b63\u898f\u5316</p>\n",
 "<p>Normalize the output </p>\n": "<p>\u51fa\u529b\u3092\u6b63\u898f\u5316</p>\n",
 "<p>Number of features per head <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30d8\u30c3\u30c9\u3042\u305f\u308a\u306e\u6a5f\u80fd\u6570 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Number of heads </p>\n": "<p>\u30d8\u30c3\u30c9\u6570</p>\n",
 "<p>Output layer </p>\n": "<p>\u51fa\u529b\u30ec\u30a4\u30e4\u30fc</p>\n",
 "<p>Pass through the feed-forward network </p>\n": "<p>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u901a\u904e</p>\n",
 "<p>Shift and roll by <span translate=no>_^_0_^_</span>, to get <span translate=no>_^_1_^_</span> </p>\n": "<p>\u30b7\u30d5\u30c8\u3057\u3066\u30ed\u30fc\u30eb\u30d0\u30a4\u3059\u308b\u3068<span translate=no>_^_0_^_</span>\u3001<span translate=no>_^_1_^_</span></p>\n",
 "<p>Stack outputs at each step into a single tensor </p>\n": "<p>\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u51fa\u529b\u30921\u3064\u306e\u30c6\u30f3\u30bd\u30eb\u306b\u30b9\u30bf\u30c3\u30af\u3057\u307e\u3059</p>\n",
 "<p>These transform the <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> multi-headed attention. </p>\n": "<p>\u3053\u308c\u3089\u306f<span translate=no>_^_0_^_</span>\u3001<span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span>\u305d\u3057\u3066\u591a\u9762\u7684\u306a\u6ce8\u610f\u529b\u3092\u5909\u3048\u307e\u3059\u3002</p>\n",
 "<p>Transformer size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5909\u5727\u5668\u30b5\u30a4\u30ba <span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the hyper-parameter <span translate=no>_^_1_^_</span>. </li>\n<li><span translate=no>_^_2_^_</span> is the small value used to make sure there is no division-by-zero when normalizing.</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002</li>\n<li><span translate=no>_^_2_^_</span>\u6b63\u898f\u5316\u6642\u306b\u30bc\u30ed\u3067\u9664\u7b97\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u5c0f\u3055\u306a\u5024\u3067\u3059\u3002</li></ul>\n",
 "Linear Transformers Are Secretly Fast Weight Memory Systems": "\u30ea\u30cb\u30a2\u5909\u5727\u5668\u306f\u5bc6\u304b\u306b\u9ad8\u901f\u306a\u91cd\u91cf\u8a18\u61b6\u30b7\u30b9\u30c6\u30e0\u3067\u3059",
 "This is an annotated implementation/tutorial of Linear Transformers Are Secretly Fast Weight Memory Systems in PyTorch.": "\u3053\u308c\u306f\u3001PyTorch\u306e\u30ea\u30cb\u30a2\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u306f\u3072\u305d\u304b\u306b\u9ad8\u901f\u30a6\u30a7\u30a4\u30c8\u30e1\u30e2\u30ea\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308b\u3068\u3044\u3046\u6ce8\u91c8\u4ed8\u304d\u306e\u5b9f\u88c5/\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3059\u3002"
}