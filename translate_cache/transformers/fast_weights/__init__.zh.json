{
 "<h1>Fast weights transformer</h1>\n<p>The paper <a href=\"https://papers.labml.ai/paper/2102.11174\">Linear Transformers Are Secretly Fast Weight Memory Systems in PyTorch</a> finds similarities between linear self-attention and fast weight systems and makes modifications to self-attention update rule based on that. It also introduces a simpler, yet effective kernel function.</p>\n<p><em>The authors have provided an <a href=\"https://github.com/ischlag/fast-weight-transformers\">official implementation</a> of the paper including other variants they compare with in the paper.</em></p>\n<h2>Fast weights</h2>\n<p>Consider a sequence of inputs <span translate=no>_^_0_^_</span> or length <span translate=no>_^_1_^_</span> and each step is a vector of size <span translate=no>_^_2_^_</span>; i.e. <span translate=no>_^_3_^_</span>. The fast weight model generates a weight matrix at each step to produce output <span translate=no>_^_4_^_</span>, <span translate=no>_^_5_^_</span></p>\n<span translate=no>_^_6_^_</span><p><span translate=no>_^_7_^_</span> is the outer product (<span translate=no>_^_8_^_</span>), where elements of the two vectors are multiplied with each other to give a matrix. <span translate=no>_^_9_^_</span> is an activation function. <span translate=no>_^_10_^_</span> and <span translate=no>_^_11_^_</span> are trainable weights (parameters). <span translate=no>_^_12_^_</span> are the fast weights that are generated at each step.</p>\n<h2>Linear self-attention</h2>\n<p>Original transformer self-attention is, (omitting <span translate=no>_^_13_^_</span> for clarity)</p>\n<span translate=no>_^_14_^_</span><p>where <span translate=no>_^_15_^_</span></p>\n<p>The idea behind linearizing self attention is to replace softmax kernel <span translate=no>_^_16_^_</span> with a different kernel <span translate=no>_^_17_^_</span> so that we can calculate the denominator of the self attention function faster:</p>\n<p><span translate=no>_^_18_^_</span></p>\n<p>This gives</p>\n<span translate=no>_^_19_^_</span><p>With <span translate=no>_^_20_^_</span> and <span translate=no>_^_21_^_</span>, we can calculate them efficiently:</p>\n<span translate=no>_^_22_^_</span><p>This is quite similar to fast weights.</p>\n<p>The paper introduces a new linear attention projection function <span translate=no>_^_23_^_</span> a new update rule for <span translate=no>_^_24_^_</span> and change the normalization <span translate=no>_^_25_^_</span></p>\n<p>Here are <a href=\"experiment.html\">the training code</a> and a notebook for training a fast weights  transformer on the Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/fast_weights/experiment.ipynb\"><span translate=no>_^_26_^_</span></a></p>\n": "<h1>\u5feb\u901f\u79f0\u91cd\u53d8\u538b\u5668</h1>\n<p>\u8bba\u6587\u300a<a href=\"https://papers.labml.ai/paper/2102.11174\">\u7ebf\u6027\u53d8\u5f62\u91d1\u521a\u662f\u79d8\u5bc6\u7684\u5feb\u901f\u52a0\u6743\u8bb0\u5fc6\u7cfb\u7edf</a>\u300b\u53d1\u73b0\u4e86\u7ebf\u6027\u81ea\u6ce8\u610f\u529b\u548c\u5feb\u901f\u52a0\u6743\u7cfb\u7edf\u4e4b\u95f4\u7684\u76f8\u4f3c\u4e4b\u5904\uff0c\u5e76\u636e\u6b64\u4fee\u6539\u4e86\u81ea\u6211\u6ce8\u610f\u529b\u66f4\u65b0\u89c4\u5219\u3002\u5b83\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a\u66f4\u7b80\u5355\u4f46\u6709\u6548\u7684\u5185\u6838\u51fd\u6570\u3002</p>\n<p><em>\u4f5c\u8005\u63d0\u4f9b\u4e86\u8be5\u8bba\u6587\u7684<a href=\"https://github.com/ischlag/fast-weight-transformers\">\u6b63\u5f0f\u5b9e\u73b0</a>\uff0c\u5305\u62ec\u4ed6\u4eec\u5728\u8bba\u6587\u4e2d\u6bd4\u8f83\u7684\u5176\u4ed6\u53d8\u4f53\u3002</em></p>\n<h2>\u5feb\u901f\u4e3e\u91cd</h2>\n<p>\u8003\u8651\u4e00\u4e2a\u8f93\u5165\u5e8f\u5217<span translate=no>_^_0_^_</span>\u6216\u957f\u5ea6<span translate=no>_^_1_^_</span>\uff0c\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662f\u5927\u5c0f\u5411\u91cf<span translate=no>_^_2_^_</span>\uff1b\u5373<span translate=no>_^_3_^_</span>\u5feb\u901f\u6743\u91cd\u6a21\u578b\u5728\u6bcf\u4e2a\u6b65\u9aa4\u751f\u6210\u6743\u91cd\u77e9\u9635\u4ee5\u751f\u6210\u8f93\u51fa<span translate=no>_^_4_^_</span>\uff0c<span translate=no>_^_5_^_</span></p>\n<span translate=no>_^_6_^_</span><p><span translate=no>_^_7_^_</span>\u662f\u5916\u79ef (<span translate=no>_^_8_^_</span>)\uff0c\u5176\u4e2d\u4e24\u4e2a\u5411\u91cf\u7684\u5143\u7d20\u76f8\u4e92\u4e58\u4ee5\u5f97\u51fa\u77e9\u9635\u3002<span translate=no>_^_9_^_</span>\u662f\u4e00\u4e2a\u6fc0\u6d3b\u51fd\u6570\u3002<span translate=no>_^_10_^_</span>\u5e76\u4e14<span translate=no>_^_11_^_</span>\u662f\u53ef\u8bad\u7ec3\u7684\u6743\u91cd\uff08\u53c2\u6570\uff09\u3002<span translate=no>_^_12_^_</span>\u662f\u5728\u6bcf\u4e00\u6b65\u751f\u6210\u7684\u5feb\u901f\u6743\u91cd\u3002</p>\n<h2>\u7ebf\u6027\u81ea\u6211\u6ce8\u610f\u529b</h2>\n<p>\u539f\u59cb\u53d8\u538b\u5668\u7684\u81ea\u6211\u6ce8\u610f\u529b\u662f\uff0c\uff08<span translate=no>_^_13_^_</span>\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u7701\u7565\u4e86\uff09</p>\n<span translate=no>_^_14_^_</span><p>\u5728\u54ea\u91cc<span translate=no>_^_15_^_</span></p>\n<p>\u7ebf\u6027\u5316\u81ea\u6211\u6ce8\u610f\u529b\u80cc\u540e\u7684\u60f3\u6cd5\u662f<span translate=no>_^_16_^_</span>\u7528\u4e0d\u540c\u7684\u5185\u6838\u66ff\u6362 softmax \u5185\u6838\uff0c<span translate=no>_^_17_^_</span>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u5feb\u5730\u8ba1\u7b97\u51fa\u81ea\u6211\u6ce8\u610f\u529b\u51fd\u6570\u7684\u5206\u6bcd\uff1a</p>\n<p><span translate=no>_^_18_^_</span></p>\n<p>\u8fd9\u7ed9\u4e86</p>\n<span translate=no>_^_19_^_</span><p>\u4f7f\u7528<span translate=no>_^_20_^_</span>\u548c<span translate=no>_^_21_^_</span>\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u8ba1\u7b97\u5b83\u4eec\uff1a</p>\n<span translate=no>_^_22_^_</span><p>\u8fd9\u4e0e\u5feb\u901f\u79f0\u91cd\u975e\u5e38\u76f8\u4f3c\u3002</p>\n<p>\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u65b0\u7684\u7ebf\u6027\u6ce8\u610f\u529b\u6295\u5f71\u51fd\u6570\u3001<span translate=no>_^_23_^_</span>\u4e00\u79cd\u65b0\u7684\u66f4\u65b0\u89c4\u5219<span translate=no>_^_24_^_</span>\u548c\u6807\u51c6\u5316\u53d8\u66f4<span translate=no>_^_25_^_</span></p>\n<p>\u4ee5\u4e0b\u662f\u7528\u4e8e<a href=\"experiment.html\">\u5728 Tiny Shakespeare \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5feb\u901f\u6743\u91cd\u8f6c\u6362\u5668\u7684\u8bad\u7ec3\u4ee3\u7801</a>\u548c\u4e00\u672c\u7b14\u8bb0\u672c\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/fast_weights/experiment.ipynb\"><span translate=no>_^_26_^_</span></a></p>\n",
 "<h2>Deterministic Parameter Free Project (DPFP)</h2>\n<p>This is the new projection function <span translate=no>_^_0_^_</span> introduced in the paper. DPFP projects <span translate=no>_^_1_^_</span> of dimensionality <span translate=no>_^_2_^_</span> to dimensionality <span translate=no>_^_3_^_</span>, where <span translate=no>_^_4_^_</span> is a hyper-parameter.</p>\n<p><span translate=no>_^_5_^_</span></p>\n<p>where <span translate=no>_^_6_^_</span> is the concatenation of <span translate=no>_^_7_^_</span> and <span translate=no>_^_8_^_</span> to give a vector of size <span translate=no>_^_9_^_</span>, <span translate=no>_^_10_^_</span>, and <span translate=no>_^_11_^_</span>. <span translate=no>_^_12_^_</span> is the <span translate=no>_^_13_^_</span>-th element of vector <span translate=no>_^_14_^_</span> and is rolled around if <span translate=no>_^_15_^_</span> is larger than the number of elements in <span translate=no>_^_16_^_</span>.</p>\n<p>Basically, it creates a new vector by multiplying elements of <span translate=no>_^_17_^_</span> shifted by <span translate=no>_^_18_^_</span>.</p>\n<p>This produces projections that are sparse (only a few elements of <span translate=no>_^_19_^_</span> are non-zero) and orthogonal (<span translate=no>_^_20_^_</span> for most <span translate=no>_^_21_^_</span> unless <span translate=no>_^_22_^_</span> and <span translate=no>_^_23_^_</span> are very similar.</p>\n<h3>Normalization</h3>\n<p>Paper introduces a simple normalization for <span translate=no>_^_24_^_</span>,</p>\n<p><span translate=no>_^_25_^_</span></p>\n<p><em>Check the paper for derivation.</em></p>\n": "<h2>\u786e\u5b9a\u6027\u65e0\u53c2\u6570\u9879\u76ee (DPFP)</h2>\n<p>\u8fd9\u662f\u672c\u6587\u4e2d<span translate=no>_^_0_^_</span>\u5f15\u5165\u7684\u65b0\u6295\u5f71\u51fd\u6570\u3002DPFP \u4ece\u7ef4\u5ea6<span translate=no>_^_2_^_</span>\u5230\u7ef4\u5ea6\u7684\u6295<span translate=no>_^_3_^_</span>\u5f71\uff0c\u5176\u4e2d<span translate=no>_^_4_^_</span>\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\u3002<span translate=no>_^_1_^_</span></p>\n<p><span translate=no>_^_5_^_</span></p>\n<p>where<span translate=no>_^_6_^_</span> \u662f<span translate=no>_^_7_^_</span>\u548c\u7684\u4e32\u8054<span translate=no>_^_8_^_</span>\uff0c\u7528\u4e8e\u7ed9\u51fa\u5927\u5c0f\u4e3a<span translate=no>_^_9_^_</span><span translate=no>_^_10_^_</span>\u3001\u548c<span translate=no>_^_11_^_</span>\u3002<span translate=no>_^_12_^_</span>\u662f vector \u7684<span translate=no>_^_13_^_</span>\u7b2c-th \u4e2a\u5143\u7d20<span translate=no>_^_14_^_</span>\uff0c\u5982\u679c\u5927<span translate=no>_^_15_^_</span>\u4e8e vector \u4e2d\u7684\u5143\u7d20\u6570\u91cf\uff0c\u5219\u4f1a\u6eda\u52a8<span translate=no>_^_16_^_</span>\u3002</p>\n<p>\u57fa\u672c\u4e0a\uff0c\u5b83\u901a\u8fc7\u4e58\u4ee5<span translate=no>_^_17_^_</span>\u79fb\u4f4d\u7684\u5143\u7d20\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5411\u91cf<span translate=no>_^_18_^_</span>\u3002</p>\n<p>\u8fd9\u5c06\u751f\u6210\u7a00\u758f\u6295\u5f71\uff08\u53ea\u6709\u5c11\u6570\u5143\u7d20\u4e3a\u975e\u96f6\uff09\u548c\u6b63\u4ea4\u6295\u5f71\uff08<span translate=no>_^_20_^_</span>\u5bf9\u4e8e\u5927\u591a\u6570\uff0c<span translate=no>_^_21_^_</span>\u9664\u975e<span translate=no>_^_22_^_</span>\u548c<span translate=no>_^_19_^_</span><span translate=no>_^_23_^_</span>\u975e\u5e38\u76f8\u4f3c\u3002</p>\n<h3>\u89c4\u8303\u5316</h3>\n<p>\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u8303\u5316<span translate=no>_^_24_^_</span>\uff0c</p>\n<p><span translate=no>_^_25_^_</span></p>\n<p><em>\u68c0\u67e5\u8bba\u6587\u7684\u63a8\u5bfc\u3002</em></p>\n",
 "<h2>Fast Weights Attention</h2>\n<p>The paper introduces a new update rule for calculating <span translate=no>_^_0_^_</span>. The model first retrieves the current value <span translate=no>_^_1_^_</span> paired with the key <span translate=no>_^_2_^_</span>. Then stores a combination <span translate=no>_^_3_^_</span> of the retrieved value <span translate=no>_^_4_^_</span> and the input <span translate=no>_^_5_^_</span>.</p>\n<span translate=no>_^_6_^_</span><p>where <span translate=no>_^_7_^_</span> is a trainable parameter and <span translate=no>_^_8_^_</span> is the sigmoid function.</p>\n<p>Note that we don&#x27;t need the normalization term <span translate=no>_^_9_^_</span> because <span translate=no>_^_10_^_</span> is normalized.</p>\n": "<h2>\u5feb\u901f\u4e3e\u91cd\u6ce8\u610f</h2>\n<p>\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u65b0\u7684\u8ba1\u7b97\u66f4\u65b0\u89c4\u5219<span translate=no>_^_0_^_</span>\u3002\u6a21\u578b\u9996\u5148\u68c0\u7d22\u4e0e\u952e<span translate=no>_^_1_^_</span>\u914d\u5bf9\u7684\u5f53\u524d\u503c<span translate=no>_^_2_^_</span>\u3002\u7136\u540e\u5b58\u50a8\u68c0\u7d22\u5230<span translate=no>_^_3_^_</span>\u7684\u503c<span translate=no>_^_4_^_</span>\u548c\u8f93\u5165\u7684\u7ec4\u5408<span translate=no>_^_5_^_</span>\u3002</p>\n<span translate=no>_^_6_^_</span><p>where<span translate=no>_^_7_^_</span> \u662f\u4e00\u4e2a\u53ef\u8bad\u7ec3\u7684\u53c2\u6570\uff0c<span translate=no>_^_8_^_</span>\u662f sigmoid \u51fd\u6570\u3002</p>\n<p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u89c4\u8303\u5316\u9879\uff0c<span translate=no>_^_9_^_</span>\u56e0\u4e3a<span translate=no>_^_10_^_</span>\u5b83\u662f\u89c4\u8303\u5316\u7684\u3002</p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p> <span translate=no>_^_0_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p> This is a general transformer layer that combines self attention and feedforward network.</p>\n": "<p>\u8fd9\u662f\u4e00\u4e2a\u7ed3\u5408\u4e86\u81ea\u6211\u5173\u6ce8\u548c\u524d\u9988\u7f51\u7edc\u7684\u901a\u7528\u53d8\u538b\u5668\u5c42\u3002</p>\n",
 "<p> This is a general transformer module with multiple transformer layers</p>\n": "<p>\u8fd9\u662f\u5177\u6709\u591a\u4e2a\u53d8\u538b\u5668\u5c42\u7684\u901a\u7528\u53d8\u538b\u5668\u6a21\u5757</p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> for all steps and heads </p>\n": "<p><span translate=no>_^_0_^_</span>\u9002\u7528\u4e8e\u6240\u6709\u53f0\u9636\u548c\u5934\u90e8</p>\n",
 "<p>Add the feed-forward results back </p>\n": "<p>\u5c06\u524d\u9988\u7ed3\u679c\u6dfb\u52a0\u56de\u6765</p>\n",
 "<p>Add the self attention results </p>\n": "<p>\u6dfb\u52a0\u81ea\u6211\u5173\u6ce8\u7684\u7ed3\u679c</p>\n",
 "<p>Calculate fast weights self attention </p>\n": "<p>\u8ba1\u7b97\u5feb\u901f\u6743\u91cd\u81ea\u6211\u6ce8\u610f</p>\n",
 "<p>Concatenate copies of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u4e32\u8054\u7684\u526f\u672c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Concatenate to get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8fde\u63a5\u4ee5\u83b7\u53d6<span translate=no>_^_0_^_</span></p>\n",
 "<p>Dropout </p>\n": "<p>\u8f8d\u5b66</p>\n",
 "<p>Dropout layer </p>\n": "<p>\u8f8d\u5b66\u5c42</p>\n",
 "<p>Fast weights attention module </p>\n": "<p>\u5feb\u901f\u4e3e\u91cd\u6ce8\u610f\u6a21\u5757</p>\n",
 "<p>Feed-forward network </p>\n": "<p>\u524d\u9988\u7f51\u7edc</p>\n",
 "<p>Final normalization layer </p>\n": "<p>\u6700\u7ec8\u5f52\u4e00\u5316\u5c42</p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5f97\u5230<span translate=no>_^_0_^_</span></p>\n",
 "<p>Get layer output </p>\n": "<p>\u83b7\u53d6\u56fe\u5c42\u8f93\u51fa</p>\n",
 "<p>Get the number of steps <span translate=no>_^_0_^_</span> </p>\n": "<p>\u83b7\u53d6\u6b65\u6570<span translate=no>_^_0_^_</span></p>\n",
 "<p>Interpolation weight function <span translate=no>_^_0_^_</span> for each head </p>\n": "<p>\u6bcf\u4e2a\u5934\u7684\u63d2\u503c\u6743\u91cd\u51fd\u6570<span translate=no>_^_0_^_</span></p>\n",
 "<p>Iterate through steps </p>\n": "<p>\u904d\u5386\u5404\u4e2a\u6b65\u9aa4</p>\n",
 "<p>List to store outputs <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5b58\u50a8\u8f93\u51fa\u7684\u5217\u8868<span translate=no>_^_0_^_</span></p>\n",
 "<p>Make copies of the transformer layer </p>\n": "<p>\u5236\u4f5c\u53d8\u538b\u5668\u5c42\u7684\u526f\u672c</p>\n",
 "<p>Merge multiple heads and append to <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5408\u5e76\u591a\u4e2a\u5934\u90e8\u5e76\u8ffd\u52a0\u5230<span translate=no>_^_0_^_</span></p>\n",
 "<p>Multiply them, <span translate=no>_^_0_^_</span> </p>\n": "<p>\u4e58\u4ee5\u5b83\u4eec\uff0c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalization layers </p>\n": "<p>\u5f52\u4e00\u5316\u5c42</p>\n",
 "<p>Normalize by <span translate=no>_^_0_^_</span> </p>\n": "<p>\u89c4\u8303\u5316\u4f9d\u636e<span translate=no>_^_0_^_</span></p>\n",
 "<p>Normalize for feed-forward </p>\n": "<p>\u6807\u51c6\u5316\u4ee5\u8fdb\u884c\u524d\u9988</p>\n",
 "<p>Normalize the output </p>\n": "<p>\u89c4\u8303\u5316\u8f93\u51fa</p>\n",
 "<p>Number of features per head <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u5934\u7279\u5f81\u6570<span translate=no>_^_0_^_</span></p>\n",
 "<p>Number of heads </p>\n": "<p>\u5934\u6570</p>\n",
 "<p>Output layer </p>\n": "<p>\u8f93\u51fa\u5c42</p>\n",
 "<p>Pass through the feed-forward network </p>\n": "<p>\u901a\u8fc7\u524d\u9988\u7f51\u7edc</p>\n",
 "<p>Shift and roll by <span translate=no>_^_0_^_</span>, to get <span translate=no>_^_1_^_</span> </p>\n": "<p>\u79fb\u4f4d\u7136\u540e\u6eda\u8fc7\u53bb<span translate=no>_^_0_^_</span>\uff0c\u5f97\u5230<span translate=no>_^_1_^_</span></p>\n",
 "<p>Stack outputs at each step into a single tensor </p>\n": "<p>\u5c06\u6bcf\u4e00\u6b65\u7684\u8f93\u51fa\u5806\u53e0\u5230\u5355\u4e2a\u5f20\u91cf\u4e2d</p>\n",
 "<p>These transform the <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> multi-headed attention. </p>\n": "<p>\u8fd9\u4e9b\u6539\u53d8\u4e86<span translate=no>_^_0_^_</span>,<span translate=no>_^_1_^_</span> \u548c<span translate=no>_^_2_^_</span>\u591a\u5934\u7684\u6ce8\u610f\u529b.</p>\n",
 "<p>Transformer size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u53d8\u538b\u5668\u5c3a\u5bf8<span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the hyper-parameter <span translate=no>_^_1_^_</span>. </li>\n<li><span translate=no>_^_2_^_</span> is the small value used to make sure there is no division-by-zero when normalizing.</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u8d85\u53c2\u6570<span translate=no>_^_1_^_</span>\u3002</li>\n<li><span translate=no>_^_2_^_</span>\u662f\u7528\u4e8e\u786e\u4fdd\u5f52\u4e00\u5316\u65f6\u6ca1\u6709\u88ab\u96f6\u9664\u7684\u5c0f\u503c\u3002</li></ul>\n",
 "Linear Transformers Are Secretly Fast Weight Memory Systems": "\u7ebf\u6027\u53d8\u538b\u5668\u662f\u79d8\u5bc6\u7684\u5feb\u901f\u91cd\u91cf\u5b58\u50a8\u7cfb\u7edf",
 "This is an annotated implementation/tutorial of Linear Transformers Are Secretly Fast Weight Memory Systems in PyTorch.": "\u8fd9\u662f PyTorch \u4e2d\u7ebf\u6027\u53d8\u538b\u5668\u662f\u79d8\u5bc6\u7684\u5feb\u901f\u91cd\u91cf\u5b58\u50a8\u7cfb\u7edf\u7684\u5e26\u6ce8\u91ca\u7684\u5b9e\u73b0/\u6559\u7a0b\u3002"
}