{
 "<h1>Feedback Transformer</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of the paper <a href=\"https://papers.labml.ai/paper/2002.09402\">Accessing Higher-level Representations in Sequential Transformers with Feedback Memory</a>.</p>\n<p>Normal transformers process tokens in parallel. Each transformer layer pays attention to the outputs of the previous layer. Feedback transformer pays attention to the output of all layers in previous steps. So this adds recurrence, and we need to process token-by-token. This slows down the training significantly (about 5X - 10X depending on the sequence length). However, when predicting Feedback Transformer is faster because you can predict the next token if you cache the memory vectors.</p>\n<p>In order to speed up the training, the paper discusses starting with a short sequence length and gradually increasing it. They also discuss using a pretrained parallel transformer as the starting point.</p>\n<p>The original feedback transformer doesn&#x27;t keep the outputs of all layers. Instead it keeps weighted sum of the output of all layers. This reduces the memory used for caching during prediction. The first half of this file implements this.</p>\n<p>The updated feedback transformer shares weights <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> used to calculate keys and values among the layers. We then calculate the keys and values for each step only once and keep them cached. The <a href=\"#shared_kv\">second half</a> of this file implements this. We implemented a custom PyTorch function to improve performance.</p>\n<p>Here&#x27;s <a href=\"experiment.html\">the training code</a> and a notebook for training a feedback transformer on Tiny Shakespeare dataset.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/feedback/experiment.ipynb\"><span translate=no>_^_2_^_</span></a> <a href=\"https://app.labml.ai/run/d8eb9416530a11eb8fb50242ac1c0002\"><span translate=no>_^_3_^_</span></a></p>\n": "<h1>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca</h1>\n<p>\u0db8\u0dd9\u0dba <a href=\"https://pytorch.org\">PyTorch</a> \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 <a href=\"https://papers.labml.ai/paper/2002.09402\">\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0db8\u0dad\u0d9a\u0dba \u0dc3\u0db8\u0d9f \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca\u0dc0\u0dbd \u0d89\u0dc4\u0dc5 \u0db8\u0da7\u0dca\u0da7\u0db8\u0dda \u0db1\u0dd2\u0dbb\u0dd6\u0db4\u0dab\u0dba\u0db1\u0dca \u0dc0\u0dd9\u0dad \u0db4\u0dca\u0dbb\u0dc0\u0dda\u0dc1 \u0dc0\u0dd3\u0db8</a> . </p>\n<p>\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dc3\u0db8\u0dcf\u0db1\u0dca\u0dad\u0dbb\u0dc0 \u0da7\u0ddd\u0d9a\u0db1 \u0dc3\u0d9a\u0dc3\u0db1\u0dc0\u0dcf. \u0dc3\u0dd1\u0db8 \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0d9a\u0dca\u0db8 \u0db4\u0dd9\u0dbb \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0dda \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0d9a\u0dd9\u0dbb\u0dd9\u0dc4\u0dd2 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dbb\u0dba\u0dd2. \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba \u0db4\u0dd9\u0dbb \u0db4\u0dd2\u0dba\u0dc0\u0dbb\u0dba\u0db1\u0dca\u0dc4\u0dd2 \u0dc3\u0dd2\u0dba\u0dbd\u0dd4\u0db8 \u0dc3\u0dca\u0dae\u0dbb\u0dc0\u0dbd \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0d9a\u0dd9\u0dbb\u0dd9\u0dc4\u0dd2 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dbb\u0dba\u0dd2. \u0d91\u0db6\u0dd0\u0dc0\u0dd2\u0db1\u0dca \u0db8\u0dd9\u0dba \u0db4\u0dd4\u0db1\u0dbb\u0dcf\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba \u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1 \u0d85\u0dad\u0dbb, \u0d85\u0db4\u0dd2 \u0da7\u0ddd\u0d9a\u0db1\u0dca-\u0dc0\u0dd2\u0dc3\u0dd2\u0db1\u0dca-\u0da7\u0ddd\u0d9a\u0db1\u0dca \u0dc3\u0dd0\u0d9a\u0dc3\u0dd2\u0dba \u0dba\u0dd4\u0dad\u0dd4\u0dba. \u0db8\u0dd9\u0dba \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4\u0dc0 \u0dc3\u0dd0\u0dbd\u0d9a\u0dd2\u0dba \u0dba\u0dd4\u0dad\u0dd4 \u0dbd\u0dd9\u0dc3 \u0db8\u0db1\u0dca\u0daf\u0d9c\u0dcf\u0db8\u0dd3 \u0dc0\u0dda (\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dba\u0dda \u0daf\u0dd2\u0d9c \u0d85\u0db1\u0dd4\u0dc0 5X - 10X \u0db4\u0db8\u0dab). \u0d9a\u0dd9\u0dc3\u0dda \u0dc0\u0dd9\u0dad\u0dad\u0dca, \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0db4\u0dd4\u0dbb\u0ddd\u0d9a\u0dae\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3 \u0dc0\u0dda\u0d9c\u0dc0\u0dad\u0dca \u0dc0\u0db1\u0dca\u0db1\u0dda \u0d94\u0db6 \u0db8\u0dad\u0d9a \u0daf\u0ddb\u0dc1\u0dd2\u0d9a \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2 \u0d9a\u0dc5\u0dc4\u0ddc\u0dad\u0dca \u0d8a\u0dc5\u0d9f \u0da7\u0ddd\u0d9a\u0db1\u0dba \u0db4\u0dd4\u0dbb\u0ddd\u0d9a\u0dae\u0db1\u0dba \u0d9a\u0dc5 \u0dc4\u0dd0\u0d9a\u0dd2 \u0db6\u0dd0\u0dc0\u0dd2\u0db1\u0dd2. </p>\n<p>\u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4\u0dc0\u0dc0\u0dda\u0d9c\u0dc0\u0dad\u0dca \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf, \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 \u0dc3\u0dcf\u0d9a\u0da0\u0dca\u0da1\u0dcf \u0d9a\u0dbb\u0db1\u0dca\u0db1\u0dda \u0d9a\u0dd9\u0da7\u0dd2 \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0daf\u0dd2\u0d9c\u0d9a\u0dd2\u0db1\u0dca \u0d86\u0dbb\u0db8\u0dca\u0db7 \u0d9a\u0dbb \u0d91\u0dba \u0d9a\u0dca\u0dbb\u0db8\u0dba\u0dd9\u0db1\u0dca \u0dc0\u0dd0\u0da9\u0dd2 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dba\u0dd2. \u0d86\u0dbb\u0db8\u0dca\u0db7\u0d9a \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dba \u0dbd\u0dd9\u0dc3 \u0db4\u0dd9\u0dbb \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0dc3\u0db8\u0dcf\u0db1\u0dca\u0dad\u0dbb \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0d9a\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0daf \u0d94\u0dc0\u0dd4\u0dc4\u0dd4 \u0dc3\u0dcf\u0d9a\u0da0\u0dca\u0da1\u0dcf \u0d9a\u0dbb\u0dad\u0dd2. </p>\n<p>\u0db8\u0dd4\u0dbd\u0dca\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba \u0dc3\u0dd2\u0dba\u0dbd\u0dd4 \u0dc3\u0dca\u0dae\u0dbb\u0dc0\u0dbd \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0dad\u0db6\u0dcf \u0db1\u0ddc\u0d9c\u0db1\u0dd3. \u0d92 \u0dc0\u0dd9\u0db1\u0dd4\u0dc0\u0da7 \u0d91\u0dba \u0dc3\u0dd2\u0dba\u0dbd\u0dd4 \u0dc3\u0dca\u0dae\u0dbb\u0dc0\u0dbd \u0db1\u0dd2\u0db8\u0dd0\u0dc0\u0dd4\u0db8\u0dda \u0db6\u0dbb \u0dad\u0dd0\u0db6\u0dd6 \u0d91\u0d9a\u0dad\u0dd4\u0dc0 \u0dad\u0db6\u0dcf \u0d9c\u0db1\u0dd3. \u0db8\u0dd9\u0dba \u0d85\u0db1\u0dcf\u0dc0\u0dd0\u0d9a\u0dd2\u0dba \u0dad\u0dd4\u0dc5 \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2 \u0dc3\u0db3\u0dc4\u0dcf \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1 \u0db8\u0dad\u0d9a\u0dba \u0d85\u0da9\u0dd4 \u0d9a\u0dbb\u0dba\u0dd2. \u0db8\u0dd9\u0db8 \u0d9c\u0ddc\u0db1\u0dd4\u0dc0\u0dda \u0db4\u0dc5\u0db8\u0dd4 \u0db7\u0dcf\u0d9c\u0dba \u0db8\u0dd9\u0dba \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dbb\u0dba\u0dd2. </p>\n<p>\u0dba\u0dcf\u0dc0\u0dad\u0dca\u0d9a\u0dcf\u0dbd\u0dd3\u0db1\u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba \u0db6\u0dbb \u0db6\u0dd9\u0daf\u0dcf \u0d9c\u0db1\u0dca\u0db1\u0dcf <span translate=no>_^_0_^_</span> \u0d85\u0dad\u0dbb \u0dc3\u0dca\u0dae\u0dbb \u0d85\u0dad\u0dbb \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 <span translate=no>_^_1_^_</span> \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0dba\u0dd2. \u0d89\u0db1\u0dca\u0db4\u0dc3\u0dd4 \u0d85\u0db4\u0dd2 \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0dc3\u0db3\u0dc4\u0dcf \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca \u0d91\u0d9a\u0dca \u0dc0\u0dbb\u0d9a\u0dca \u0db4\u0db8\u0dab\u0d9a\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb \u0d92\u0dc0\u0dcf \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2 \u0d9a\u0dbb \u0dad\u0db6\u0db8\u0dd4. \u0db8\u0dd9\u0db8 \u0d9c\u0ddc\u0db1\u0dd4\u0dc0\u0dda <a href=\"#shared_kv\">\u0daf\u0dd9\u0dc0\u0db1 \u0db7\u0dcf\u0d9c\u0dba</a> \u0db8\u0dd9\u0dba \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dbb\u0dba\u0dd2. \u0d9a\u0dcf\u0dbb\u0dca\u0dba \u0dc3\u0dcf\u0db0\u0db1\u0dba \u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0d85\u0db4\u0dd2 \u0d85\u0db7\u0dd2\u0dbb\u0dd4\u0da0\u0dd2 PyTorch \u0dc1\u0dca\u0dbb\u0dd2\u0dad\u0dba\u0d9a\u0dca \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dc5\u0dd9\u0db8\u0dd4. </p>\n<p>\u0d9a\u0dd4\u0da9\u0dcf\u0dc2\u0dda\u0d9a\u0dca\u0dc3\u0dca\u0db4\u0dd2\u0dba\u0dbb\u0dca \u0daf\u0dad\u0dca\u0dad \u0d9a\u0da7\u0dca\u0da7\u0dbd\u0dba \u0db4\u0dd2\u0dc5\u0dd2\u0db6\u0db3 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0d9a\u0dca \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 <a href=\"experiment.html\">\u0d9a\u0dda\u0dad\u0dba</a> \u0dc3\u0dc4 \u0dc3\u0da7\u0dc4\u0db1\u0dca \u0db4\u0ddc\u0dad\u0d9a\u0dca \u0db8\u0dd9\u0db1\u0dca\u0db1. </p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/transformers/feedback/experiment.ipynb\"><span translate=no>_^_2_^_</span></a> <a href=\"https://app.labml.ai/run/d8eb9416530a11eb8fb50242ac1c0002\"> <span translate=no>_^_3_^_</span></a></p>\n",
 "<h2>Feedback Attention</h2>\n<p>This module computes recurrent attention similar to attention from original transformers paper.</p>\n<p><span translate=no>_^_0_^_</span></p>\n": "<h2>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba</h2>\n<p>\u0db8\u0dd9\u0db8\u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba \u0db8\u0dd4\u0dbd\u0dca \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 \u0dc0\u0dbd\u0dd2\u0db1\u0dca \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba\u0da7 \u0dc3\u0db8\u0dcf\u0db1 \u0db4\u0dd4\u0db1\u0dbb\u0dcf\u0dc0\u0dbb\u0dca\u0dad\u0db1 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba\u0d9a\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0dba\u0dd2. </p>\n<p><span translate=no>_^_0_^_</span></p>\n",
 "<h2>Feedback Transformer Layer</h2>\n<p>This implements a single transformer layer in the feedback transformer.</p>\n": "<h2>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba</h2>\n<p>\u0db8\u0dd9\u0dba\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0dad\u0db1\u0dd2 \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dad\u0da7\u0dca\u0da7\u0dd4\u0dc0\u0d9a\u0dca \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dbb\u0dba\u0dd2. </p>\n",
 "<h2>Feedback Transformer Module</h2>\n": "<h2>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba</h2>\n",
 "<h2>Updated Feedback Transformer Module</h2>\n<p>This is the updated feedback transformer module that caches the keys and values.</p>\n": "<h2>\u0dba\u0dcf\u0dc0\u0dad\u0dca\u0d9a\u0dcf\u0dbd\u0dd3\u0db1\u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba</h2>\n<p>\u0dba\u0dad\u0dd4\u0dbb\u0dd4\u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2 \u0d9a\u0dbb\u0db1 \u0dba\u0dcf\u0dc0\u0dad\u0dca\u0d9a\u0dcf\u0dbd\u0dd3\u0db1 \u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba \u0db8\u0dd9\u0dba\u0dba\u0dd2. </p>\n",
 "<h3>Get attention scores</h3>\n<p>We use relative positional encodings for attention, similar to <a href=\"../relative_mha.html\">relative multi-head attention form Transformer-XL paper</a>.</p>\n<p>Attention from current step&#x27;s query to key in step <span translate=no>_^_0_^_</span> (relative to current step) is,</p>\n<span translate=no>_^_1_^_</span><p>where <span translate=no>_^_2_^_</span>, are linear transformations of  original embeddings <span translate=no>_^_3_^_</span>  and <span translate=no>_^_4_^_</span> are linear transformations of  positional encodings <span translate=no>_^_5_^_</span>.</p>\n<p>We replace term <span translate=no>_^_6_^_</span> with <span translate=no>_^_7_^_</span>.</p>\n": "<h3>\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba\u0dbd\u0d9a\u0dd4\u0dab\u0dd4 \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1</h3>\n<p>\u0d85\u0db4\u0dd2\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2 \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dd3\u0dba \u0d9a\u0dda\u0dad\u0dd3\u0d9a\u0dbb\u0dab \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db8\u0dd4, <a href=\"../relative_mha.html\">\u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2 \u0db6\u0dc4\u0dd4-\u0dc4\u0dd2\u0dc3 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0d86\u0d9a\u0dd8\u0dad\u0dd2 \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca-\u0d91\u0d9a\u0dca\u0dc3\u0dca\u0d91\u0dbd\u0dca \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2</a>\u0dc0\u0dbd\u0da7 \u0dc3\u0db8\u0dcf\u0db1\u0dba. </p>\n<p>\u0db4\u0dd2\u0dba\u0dc0\u0dbb\u0db4\u0dca\u0dbb\u0db0\u0dcf\u0db1 \u0dc0\u0dad\u0dca\u0db8\u0db1\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0d9c\u0dda \u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8 \u0dc3\u0dd2\u0da7 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba <span translate=no>_^_0_^_</span> (\u0dc0\u0dad\u0dca\u0db8\u0db1\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2\u0dc0) \u0dc0\u0dda,</p>\n<span translate=no>_^_1_^_</span><p>\u0db8\u0dd4\u0dbd\u0dca\u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca\u0dc0\u0dbd \u0dbb\u0dda\u0d9b\u0dd3\u0dba \u0db4\u0dbb\u0dd2\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba\u0db1\u0dca <span translate=no>_^_4_^_</span> \u0dc0\u0db1 <span translate=no>_^_3_^_</span> \u0d85\u0dad\u0dbb \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dd3\u0dba \u0d9a\u0dda\u0dad\u0dd3\u0d9a\u0dbb\u0dab\u0dba\u0dda \u0dbb\u0dda\u0d9b\u0dd3\u0dba \u0db4\u0dbb\u0dd2\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba\u0db1\u0dca \u0dc0\u0dda <span translate=no>_^_2_^_</span> <span translate=no>_^_5_^_</span>. </p>\n<p>\u0d85\u0db4\u0dd2\u0db4\u0daf\u0dba <span translate=no>_^_6_^_</span> \u0dc0\u0dd9\u0db1\u0dd4\u0dc0\u0da7 \u0d86\u0daf\u0dda\u0dc1 \u0d9a\u0dbb\u0db8\u0dd4 <span translate=no>_^_7_^_</span>. </p>\n",
 "<h3>Stack Function implementation</h3>\n<p>We implement a custom function instead of appending to a python list and then doing <span translate=no>_^_0_^_</span>. This greatly improves the performance over calling <span translate=no>_^_1_^_</span> at each step along the sequence. Everytime <span translate=no>_^_2_^_</span> is called, it creates a new tensor, while this method and the accompanying class <span translate=no>_^_3_^_</span> share memory for each step.</p>\n": "<h3>\u0dc3\u0dd2\u0dbb\u0dc3\u0dca\u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0d9a\u0dcf\u0dbb\u0dd2\u0dad\u0dca\u0dc0\u0dba \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8</h3>\n<p>\u0d85\u0db4\u0dd2python \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0\u0d9a\u0da7 appending \u0dc4\u0dcf \u0db4\u0dc3\u0dd4\u0dc0 \u0d9a\u0dbb\u0db1\u0dca\u0db1\u0dda \u0dc0\u0dd9\u0db1\u0dd4\u0dc0\u0da7 \u0d85\u0db7\u0dd2\u0dbb\u0dd4\u0da0\u0dd2 \u0dc1\u0dca\u0dbb\u0dd2\u0dad\u0dba\u0d9a\u0dca \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a <span translate=no>_^_0_^_</span>. \u0db8\u0dd9\u0db8 \u0db6\u0ddc\u0dc4\u0ddd \u0dc3\u0dd9\u0dba\u0dd2\u0db1\u0dca \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dba \u0d94\u0dc3\u0dca\u0dc3\u0dda \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb <span translate=no>_^_1_^_</span> \u0daf\u0dd3 \u0d89\u0dbd\u0dca\u0dbd\u0dcf \u0db4\u0dd4\u0dbb\u0dcf \u0d9a\u0dcf\u0dbb\u0dca\u0dba \u0dc3\u0dcf\u0db0\u0db1\u0dba \u0dc0\u0dd0\u0da9\u0dd2 \u0daf\u0dd2\u0dba\u0dd4\u0dab\u0dd4 \u0d9a\u0dbb\u0db1 \u0dbd\u0daf\u0dd2. \u0dc3\u0dd1\u0db8 \u0dc0\u0dd2\u0da7\u0db8 \u0d9a\u0dd0\u0db3\u0dc0\u0db1\u0dd4 <span translate=no>_^_2_^_</span> \u0dbd\u0dd0\u0db6\u0dda, \u0d91\u0dba \u0db1\u0dc0 \u0d86\u0dad\u0dad\u0dd2\u0dba\u0d9a\u0dca \u0db1\u0dd2\u0dbb\u0dca\u0db8\u0dcf\u0dab\u0dba \u0d9a\u0dbb\u0dba\u0dd2, \u0db8\u0dd9\u0db8 \u0d9a\u0dca\u0dbb\u0db8\u0dba \u0dc3\u0dc4 \u0d92 \u0dc3\u0db8\u0d9f \u0d87\u0dad\u0dd2 \u0db4\u0db1\u0dca\u0dad\u0dd2 <span translate=no>_^_3_^_</span> \u0d9a\u0ddc\u0da7\u0dc3\u0dca \u0db8\u0dad\u0d9a\u0dba \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0dc3\u0db3\u0dc4\u0dcf. </p>\n",
 "<h3>Stack Module</h3>\n<p>This uses the stack function defined above, and does the necessary initializations.</p>\n": "<h3>\u0dc3\u0dd2\u0dbb\u0dc3\u0dca\u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba</h3>\n<p>\u0db8\u0dd9\u0dba\u0d89\u0dc4\u0dad \u0d85\u0dbb\u0dca\u0dae \u0daf\u0d9a\u0dca\u0dc0\u0dcf \u0d87\u0dad\u0dd2 \u0dc3\u0dd2\u0dbb\u0dc3\u0dca \u0dc1\u0dca\u0dbb\u0dd2\u0dad\u0dba \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1 \u0d85\u0dad\u0dbb \u0d85\u0dc0\u0dc1\u0dca\u0dba \u0d86\u0dbb\u0db8\u0dca\u0db7\u0d9a\u0d9a\u0dbb\u0dab\u0dba\u0db1\u0dca \u0dc3\u0dd2\u0daf\u0dd4 \u0d9a\u0dbb\u0dba\u0dd2. </p>\n",
 "<p> </p>\n": "<p> </p>\n",
 "<p> Returns the stack</p>\n": "<p> \u0dad\u0ddc\u0d9c\u0dba\u0d86\u0db4\u0dc3\u0dd4 \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0dba\u0dd2</p>\n",
 "<p> To release memory</p>\n": "<p> \u0db8\u0dad\u0d9a\u0dba\u0db8\u0dd4\u0daf\u0dcf \u0dc4\u0dd0\u0dbb\u0dd3\u0db8\u0da7</p>\n",
 "<p><a id=\"shared_kv\"></a></p>\n<h1>Shared keys and values among layers</h1>\n": "<p><a id=\"shared_kv\"></a></p>\n<h1>\u0dc3\u0dca\u0dae\u0dbb\u0d85\u0dad\u0dbb \u0db6\u0dd9\u0daf\u0dcf\u0d9c\u0dad\u0dca \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca</h1>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span> </p>\n",
 "<p>Add the feed-forward results back </p>\n": "<p>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab\u0d89\u0daf\u0dd2\u0dbb\u0dd2 \u0db4\u0dca\u0dbb\u0dad\u0dd2 results \u0dbd \u0db1\u0dd0\u0dc0\u0dad \u0d91\u0d9a\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Add the gradients </p>\n": "<p>\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a\u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Add the self attention results </p>\n": "<p>\u0dc3\u0dca\u0dc0\u0dba\u0d82\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db5\u0dbd \u0d91\u0d9a\u0dad\u0dd4 </p>\n",
 "<p>Append the output to results </p>\n": "<p>\u0db4\u0dca\u0dbb\u0dad\u0dd2. \u0dbd \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0d91\u0d9a\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Append them to the list of layer outputs </p>\n": "<p>\u0dc3\u0dca\u0dae\u0dbb\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0\u0da7 \u0d92\u0dc0\u0dcf \u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Apply dropout </p>\n": "<p>\u0d85\u0dad\u0dc4\u0dd0\u0dbb\u0daf\u0dd0\u0db8\u0dd3\u0db8 \u0dba\u0ddc\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Cache accumulated gradients </p>\n": "<p>\u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2\u0dc3\u0db8\u0dd4\u0da0\u0dca\u0da0\u0dd2\u0dad \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a </p>\n",
 "<p>Cache the size of the stack </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0dda\u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2\u0dba </p>\n",
 "<p>Calculate the keys from memory and add it to the stack </p>\n": "<p>\u0db8\u0dad\u0d9a\u0dba\u0dd9\u0db1\u0dca\u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb \u0d91\u0dba \u0dad\u0ddc\u0d9c\u0dba\u0da7 \u0d91\u0d9a\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Calculate the memory vector as a weighted sum of layer outputs </p>\n": "<p>\u0dc3\u0dca\u0dae\u0dbb\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dc0\u0dbd \u0db6\u0dbb \u0dad\u0dd0\u0db6\u0dd6 \u0d91\u0d9a\u0dad\u0dd4\u0dc0\u0d9a\u0dca \u0dbd\u0dd9\u0dc3 \u0db8\u0dad\u0d9a \u0daf\u0ddb\u0dc1\u0dd2\u0d9a\u0dba \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Calculate the values from memory and add it to the stack </p>\n": "<p>\u0db8\u0dad\u0d9a\u0dba\u0dd9\u0db1\u0dca\u0d85\u0d9c\u0dba\u0db1\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb \u0d91\u0dba \u0dad\u0ddc\u0d9c\u0dba\u0da7 \u0d91\u0d9a\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Compute attention scores. Results in a tensor of shape <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba\u0dbd\u0d9a\u0dd4\u0dab\u0dd4 \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1. \u0dc4\u0dd0\u0da9\u0dba\u0dda \u0d86\u0dad\u0dad\u0dd2\u0dba\u0dd9\u0db1\u0dca \u0db4\u0dca\u0dbb\u0dad\u0dd2 Results \u0dbd <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Concatenate multiple heads </p>\n": "<p>\u0db6\u0dc4\u0dd4\u0dc4\u0dd2\u0dc3\u0dca \u0dc3\u0d82\u0dba\u0dd4\u0d9a\u0dca\u0dad \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Create a tensor for the stack </p>\n": "<p>\u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0\u0dc3\u0db3\u0dc4\u0dcf \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba\u0d9a\u0dca \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Create a tensor to accumulate the gradients </p>\n": "<p>\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a\u0dc3\u0db8\u0dd4\u0da0\u0dca\u0da0\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 tensor \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Do this without gradients </p>\n": "<p>\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a\u0db1\u0ddc\u0db8\u0dd0\u0dad\u0dd2\u0dc0 \u0db8\u0dd9\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Dropout </p>\n": "<p>\u0dc4\u0dd0\u0dbd\u0dd3\u0db8 </p>\n",
 "<p>Final normalization layer </p>\n": "<p>\u0d85\u0dc0\u0dc3\u0dcf\u0db1\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0d9a\u0dbb\u0dab \u0dc3\u0dca\u0dad\u0dbb\u0dba </p>\n",
 "<p>For each input step </p>\n": "<p>\u0d91\u0d9a\u0dca\u0d91\u0d9a\u0dca \u0d86\u0daf\u0dcf\u0db1 \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0dc3\u0db3\u0dc4\u0dcf </p>\n",
 "<p>Get layer output </p>\n": "<p>\u0dc3\u0dca\u0dae\u0dbb\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the accumulated gradients </p>\n": "<p>\u0dc3\u0db8\u0dd4\u0da0\u0dca\u0da0\u0dd2\u0dad\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the current size of the stack </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0dda\u0dc0\u0dad\u0dca\u0db8\u0db1\u0dca \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Get the keys and values tensors if we are beyond the initial step </p>\n": "<p>\u0d85\u0db4\u0dd2\u0d86\u0dbb\u0db8\u0dca\u0db7\u0d9a \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0d94\u0db6\u0dca\u0db6\u0da7 \u0db1\u0db8\u0dca \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca tensors \u0dbd\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>If there is memory </p>\n": "<p>\u0db8\u0dad\u0d9a\u0dba\u0d9a\u0dca\u0dad\u0dd2\u0db6\u0dda \u0db1\u0db8\u0dca </p>\n",
 "<p>If there is memory, stack them into a vector </p>\n": "<p>\u0db8\u0dad\u0d9a\u0dba\u0d9a\u0dca\u0dad\u0dd2\u0db6\u0dda \u0db1\u0db8\u0dca, \u0d92\u0dc0\u0dcf \u0daf\u0ddb\u0dc1\u0dd2\u0d9a\u0dba\u0d9a\u0da7 \u0d9c\u0ddc\u0da9\u0d9c\u0dc3\u0db1\u0dca\u0db1 </p>\n",
 "<p>Initialize the shared memory tensor to keep the stack </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0dad\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dc4\u0dc0\u0dd4\u0dbd\u0dca \u0db8\u0dad\u0d9a \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba \u0d86\u0dbb\u0db8\u0dca\u0db7 \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Keep track of the last value added to the stack. We need this to be passed on to <span translate=no>_^_0_^_</span> in order to get the gradients propagated backwards. </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0da7\u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dbb\u0db1 \u0dbd\u0daf \u0d85\u0dc0\u0dc3\u0dcf\u0db1 \u0d85\u0d9c\u0dba \u0db4\u0dd2\u0dc5\u0dd2\u0db6\u0db3 \u0dc0\u0dcf\u0dbb\u0dca\u0dad\u0dcf\u0dc0\u0d9a\u0dca \u0dad\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1. \u0d86\u0db4\u0dc3\u0dca\u0dc3\u0da7 \u0db4\u0dca\u0dbb\u0da0\u0dcf\u0dbb\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0d85\u0db4\u0da7 \u0db8\u0dd9\u0dba \u0dc3\u0db8\u0dca\u0db8\u0dad \u0d9a\u0dbb \u0d9c\u0dad \u0dba\u0dd4\u0dad\u0dd4\u0dba. <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Keep track of the size of the stack when it was used. This is used for a sanity check in <span translate=no>_^_0_^_</span>. </p>\n": "<p>\u0d91\u0dba\u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1 \u0dc0\u0dd2\u0da7 \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba \u0db4\u0dd2\u0dc5\u0dd2\u0db6\u0db3 \u0dc0\u0dcf\u0dbb\u0dca\u0dad\u0dcf\u0dc0\u0d9a\u0dca \u0dad\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1. \u0db8\u0dd9\u0dba \u0dc3\u0db1\u0dd3\u0db4\u0dcf\u0dbb\u0d9a\u0dca\u0dc2\u0d9a \u0db4\u0dbb\u0dd3\u0d9a\u0dca\u0dc2\u0dab\u0dba\u0d9a\u0dca \u0dc3\u0db3\u0dc4\u0dcf \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0dc0\u0dda <span translate=no>_^_0_^_</span>. </p>\n",
 "<p>Keep track of the stack (for debugging) </p>\n": "<p>(\u0db1\u0dd2\u0daf\u0ddc\u0dc3\u0dca\u0d9a\u0dbb\u0dab\u0dba \u0dc3\u0db3\u0dc4\u0dcf) \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0db4\u0dd2\u0dc5\u0dd2\u0db6\u0db3 \u0dc0\u0dcf\u0dbb\u0dca\u0dad\u0dcf\u0dc0\u0d9a\u0dca \u0dad\u0db6\u0dcf \u0d9c\u0db1\u0dca\u0db1 </p>\n",
 "<p>Keys and values are already calculated </p>\n": "<p>\u0dba\u0dad\u0dd4\u0dbb\u0dd4\u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca \u0daf\u0dd0\u0db1\u0da7\u0db8\u0dad\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb \u0d87\u0dad </p>\n",
 "<p>List to store layer outputs </p>\n": "<p>\u0dc3\u0dca\u0dae\u0dbb\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0 </p>\n",
 "<p>List to store the memory vectors </p>\n": "<p>\u0db8\u0dad\u0d9a\u0daf\u0ddb\u0dc1\u0dd2\u0d9a \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0 </p>\n",
 "<p>List to store the outputs </p>\n": "<p>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca\u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0 </p>\n",
 "<p>Make copies of the transformer layer </p>\n": "<p>\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca\u0dc3\u0dca\u0dae\u0dbb\u0dba\u0dda \u0db4\u0dd2\u0da7\u0db4\u0dad\u0dca \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Memory for stacked keys </p>\n": "<p>\u0dc3\u0dd2\u0dbb\u0dc3\u0dca\u0dc0\u0d87\u0dad\u0dd2 \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0db3\u0dc4\u0dcf \u0db8\u0dad\u0d9a\u0dba </p>\n",
 "<p>Memory for stacked values </p>\n": "<p>\u0dc3\u0dd2\u0dbb\u0dc3\u0dca\u0dc0\u0d87\u0dad\u0dd2 \u0d85\u0d9c\u0dba\u0db1\u0dca \u0dc3\u0db3\u0dc4\u0dcf \u0db8\u0dad\u0d9a\u0dba </p>\n",
 "<p>Memory vectors are computed as a weighted sum of representations of each layer. This is the weights parameter for that. </p>\n": "<p>\u0db8\u0dad\u0d9a\u0daf\u0ddb\u0dc1\u0dd2\u0d9a \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dd4 \u0dbd\u0db6\u0db1\u0dca\u0db1\u0dda \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0dda \u0db1\u0dd2\u0dbb\u0dd6\u0db4\u0dab\u0dc0\u0dbd \u0db6\u0dbb \u0d9a\u0dd2\u0dbb\u0db1 \u0dbd\u0daf \u0d91\u0d9a\u0dad\u0dd4\u0dc0\u0d9a\u0dd2. \u0d92 \u0dc3\u0db3\u0dc4\u0dcf \u0db6\u0dbb \u0db4\u0dbb\u0dcf\u0db8\u0dd2\u0dad\u0dd2\u0dba \u0db8\u0dd9\u0dba\u0dba\u0dd2. </p>\n",
 "<p>Module to transform embeddings (memory) to get keys </p>\n": "<p>\u0dba\u0dad\u0dd4\u0dbb\u0dd4\u0dbd\u0db6\u0dcf \u0d9c\u0dd0\u0db1\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca (\u0db8\u0dad\u0d9a\u0dba) \u0db4\u0dbb\u0dd2\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda \u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba </p>\n",
 "<p>Multiply by the values </p>\n": "<p>\u0d85\u0d9c\u0dba\u0db1\u0dca\u0d85\u0db1\u0dd4\u0dc0 \u0d9c\u0dd4\u0dab \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Normalization layers </p>\n": "<p>\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0d9a\u0dbb\u0dab\u0dba\u0dc3\u0dca\u0dae\u0dbb </p>\n",
 "<p>Normalize for feed-forward </p>\n": "<p>\u0db4\u0ddd\u0dc2\u0dab\u0dba\u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0d9a\u0dbb\u0dab\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Normalize the output </p>\n": "<p>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0d9a\u0dbb\u0dab\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Normalize the vectors before doing self attention </p>\n": "<p>\u0dc3\u0dca\u0dc0\u0dba\u0d82\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0db4\u0dd9\u0dbb \u0daf\u0ddb\u0dc1\u0dd2\u0d9a \u0dc3\u0dcf\u0db8\u0dcf\u0db1\u0dca\u0dba\u0d9a\u0dbb\u0dab\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Number of features in a head </p>\n": "<p>\u0dc4\u0dd2\u0dc3\u0dd9\u0dc4\u0dd2\u0dc0\u0dd2\u0dc1\u0dda\u0dc2\u0dcf\u0d82\u0d9c \u0d9c\u0dab\u0db1 </p>\n",
 "<p>Number of features per head </p>\n": "<p>\u0dc4\u0dd2\u0dc3\u0d9a\u0da7\u0dc0\u0dd2\u0dc1\u0dda\u0dc2\u0dcf\u0d82\u0d9c \u0d9c\u0dab\u0db1 </p>\n",
 "<p>Number of relative positions </p>\n": "<p>\u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2\u0dad\u0db1\u0dad\u0dd4\u0dbb\u0dd4 \u0d9c\u0dab\u0db1 </p>\n",
 "<p>Output layer </p>\n": "<p>\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dc3\u0dca\u0dae\u0dbb\u0dba </p>\n",
 "<p>Pass through the feed-forward network </p>\n": "<p>Feed-forward\u0da2\u0dcf\u0dbd\u0dba \u0dc4\u0dbb\u0dc4\u0dcf \u0d9c\u0db8\u0db1\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Positional embeddings for the query is independent of the position of the query </p>\n": "<p>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dd3\u0dba \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca \u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0dda \u0db4\u0dd2\u0dc4\u0dd2\u0da7\u0dd4\u0db8\u0dd9\u0db1\u0dca \u0dc3\u0dca\u0dc0\u0dcf\u0db0\u0dd3\u0db1 \u0dc0\u0dda </p>\n",
 "<p>Prepare <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> for attention computation <span translate=no>_^_3_^_</span> and <span translate=no>_^_4_^_</span> will then have shape <span translate=no>_^_5_^_</span> and <span translate=no>_^_6_^_</span> will have shape <span translate=no>_^_7_^_</span> </p>\n": "<p>\u0dc3\u0dd6\u0daf\u0dcf\u0db1\u0db8\u0dca\u0dc0\u0db1\u0dca\u0db1 <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span> \u0dc3\u0dc4 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 <span translate=no>_^_2_^_</span> \u0dc3\u0db3\u0dc4\u0dcf <span translate=no>_^_3_^_</span> \u0dc3\u0dc4 \u0db4\u0dc3\u0dd4\u0dc0 \u0dc4\u0dd0\u0da9\u0dba <span translate=no>_^_4_^_</span> \u0d87\u0dad <span translate=no>_^_5_^_</span> \u0dc3\u0dc4 \u0dc4\u0dd0\u0da9\u0dba <span translate=no>_^_6_^_</span> \u0d87\u0dad <span translate=no>_^_7_^_</span> </p>\n",
 "<p>Relative positional embedding bias for key relative to the query. </p>\n": "<p>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0da7\u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2\u0dc0 \u0dba\u0dad\u0dd4\u0dbb \u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2 \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dd3\u0dba \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dda \u0db1\u0dd0\u0db9\u0dd4\u0dbb\u0dd4\u0dc0. </p>\n",
 "<p>Relative positional embeddings for key relative to the query. </p>\n": "<p>\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\u0da7\u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2\u0dc0 \u0dba\u0dad\u0dd4\u0dbb \u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0dcf\u0db4\u0dda\u0d9a\u0dca\u0dc2 \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dd3\u0dba \u0d9a\u0dcf\u0dc0\u0dd0\u0daf\u0dca\u0daf\u0dd3\u0db8\u0dca. </p>\n",
 "<p>Reset accumulated gradients </p>\n": "<p>\u0dc3\u0db8\u0dd4\u0da0\u0dca\u0da0\u0dd2\u0dad\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0db1\u0dd0\u0dc0\u0dad \u0dc3\u0d9a\u0dc3\u0db1\u0dca\u0db1 </p>\n",
 "<p>Return the gradients w.r.t to last value in the stack </p>\n": "<p>W.r.t\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0dad\u0ddc\u0d9c\u0dba\u0dda \u0d85\u0dc0\u0dc3\u0dcf\u0db1 \u0d85\u0d9c\u0dba \u0dc0\u0dd9\u0dad \u0d86\u0db4\u0dc3\u0dd4 \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0db1\u0dca\u0db1 </p>\n",
 "<p>Return the stack </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0d86\u0db4\u0dc3\u0dd4 \u0daf\u0dd9\u0db1\u0dca\u0db1 </p>\n",
 "<p>Run through each layer </p>\n": "<p>\u0d91\u0d9a\u0dca\u0d91\u0d9a\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba \u0dc4\u0dbb\u0dc4\u0dcf \u0db0\u0dcf\u0dc0\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1 </p>\n",
 "<p>Run through self attention, i.e. keys and values are from self </p>\n": "<p>\u0dc3\u0dca\u0dc0\u0dba\u0d82\u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dc4\u0dbb\u0dc4\u0dcf \u0db0\u0dcf\u0dc0\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1, i.e. \u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0dc0\u0da7\u0dd2\u0db1\u0dcf\u0d9a\u0db8\u0dca \u0dc3\u0dca\u0dc0\u0dba\u0d82 \u0dc3\u0dd2\u0da7 </p>\n",
 "<p>Scale scores <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0db4\u0dbb\u0dd2\u0db8\u0dcf\u0dab\u0dbd\u0d9a\u0dd4\u0dab\u0dd4 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Scaling factor before the softmax </p>\n": "<p>\u0dc3\u0ddc\u0dc6\u0dca\u0da7\u0dca\u0db8\u0dd0\u0d9a\u0dca\u0dc3\u0dca\u0dc0\u0dbd\u0da7 \u0db4\u0dd9\u0dbb \u0db4\u0dbb\u0dd2\u0db8\u0dcf\u0dab \u0dc3\u0dcf\u0db0\u0d9a\u0dba </p>\n",
 "<p>Set the value in the correct position of the stack </p>\n": "<p>\u0dad\u0ddc\u0d9c\u0dba\u0dda\u0db1\u0dd2\u0dc0\u0dd0\u0dbb\u0daf\u0dd2 \u0dc3\u0dca\u0dae\u0dcf\u0db1\u0dba\u0dda \u0dc0\u0da7\u0dd2\u0db1\u0dcf\u0d9a\u0db8 \u0dc3\u0d9a\u0dc3\u0db1\u0dca\u0db1 </p>\n",
 "<p>Softmax </p>\n": "<p>\u0dc3\u0ddc\u0dc6\u0dca\u0da7\u0dca\u0db8\u0dd0\u0d9a\u0dca\u0dc3\u0dca </p>\n",
 "<p>Softmax for attention along the time dimension of <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0d9a\u0dcf\u0dbd\u0db8\u0dcf\u0db1\u0dba \u0d94\u0dc3\u0dca\u0dc3\u0dda \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0ddc\u0dc6\u0dca\u0da7\u0dca\u0db8\u0dd0\u0d9a\u0dca\u0dc3\u0dca <span translate=no>_^_0_^_</span> </p>\n",
 "<p>Softmax for weights before taking the weighted sum </p>\n": "<p>\u0db6\u0dbb\u0dad\u0dd0\u0db6\u0dd6 \u0db8\u0dd4\u0daf\u0dbd \u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0da7 \u0db4\u0dd9\u0dbb \u0db6\u0dbb \u0dc3\u0db3\u0dc4\u0dcf \u0dc3\u0ddc\u0dc6\u0dca\u0da7\u0dca\u0db8\u0dd0\u0d9a\u0dca\u0dc3\u0dca </p>\n",
 "<p>Split the input to a list along the sequence axis </p>\n": "<p>\u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a\u0d85\u0d9a\u0dca\u0dc2\u0dba \u0daf\u0dd2\u0d9c\u0dda \u0dbd\u0dd0\u0dba\u0dd2\u0dc3\u0dca\u0dad\u0dd4\u0dc0\u0d9a\u0da7 \u0d86\u0daf\u0dcf\u0db1\u0dba \u0db6\u0dd9\u0daf\u0db1\u0dca\u0db1 </p>\n",
 "<p>Stack of keys and values </p>\n": "<p>\u0dba\u0dad\u0dd4\u0dbb\u0dd4\u0dc3\u0dc4 \u0dc0\u0da7\u0dd2\u0db1\u0dcf\u0d9a\u0db8\u0dca \u0dad\u0ddc\u0d9c\u0dba\u0d9a\u0dca </p>\n",
 "<p>Stack the layer outputs to a tensor </p>\n": "<p>\u0dc3\u0dca\u0dae\u0dbb\u0dba\u0dda\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dca \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba\u0d9a\u0da7 \u0d9c\u0ddc\u0da9\u0d9c\u0dc3\u0db1\u0dca\u0db1 </p>\n",
 "<p>Stack the output tensors </p>\n": "<p>\u0db1\u0dd2\u0db8\u0dd0\u0dc0\u0dd4\u0db8\u0dca\u0d86\u0dad\u0dad\u0dd3\u0db1\u0dca \u0d9c\u0ddc\u0da9\u0d9c\u0dc3\u0db1\u0dca\u0db1 </p>\n",
 "<p>Take it all through <span translate=no>_^_0_^_</span> so that <span translate=no>_^_1_^_</span> is called by PyTorch during backpropagation. </p>\n": "<p>\u0db4\u0dc3\u0dd4\u0db4\u0dc3\u0da7\u0db4\u0dca\u0dbb\u0da0\u0dcf\u0dbb\u0dab\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda\u0daf\u0dd3 PyTorch \u0dc0\u0dd2\u0dc3\u0dd2\u0db1\u0dca \u0d9a\u0dd0\u0db3\u0dc0\u0db1\u0dd4 \u0dbd\u0db6\u0db1 <span translate=no>_^_0_^_</span> \u0d92 <span translate=no>_^_1_^_</span> \u0dc3\u0dd2\u0dba\u0dbd\u0dca\u0dbd \u0dc4\u0dbb\u0dc4\u0dcf \u0d9c\u0db1\u0dca\u0db1. </p>\n",
 "<p>The memory is already initialized but we are resetting the stack.</p>\n<p>This could have been another function like <span translate=no>_^_0_^_</span>, but we found this easier to use. </p>\n": "<p>\u0db8\u0dad\u0d9a\u0dba\u0daf\u0dd0\u0db1\u0da7\u0db8\u0dad\u0dca \u0d86\u0dbb\u0db8\u0dca\u0db7 \u0d9a\u0dbb \u0d87\u0dad\u0dd2 \u0db1\u0db8\u0dd4\u0dad\u0dca \u0d85\u0db4\u0dd2 \u0dad\u0ddc\u0d9c\u0dba \u0db1\u0dd0\u0dc0\u0dad \u0dc3\u0d9a\u0dc3\u0db8\u0dd2\u0db1\u0dca \u0dc3\u0dd2\u0da7\u0dd2\u0db8\u0dd4. </p>\n<p>\u0db8\u0dd9\u0dba\u0dad\u0dc0\u0dad\u0dca \u0d9a\u0dcf\u0dbb\u0dca\u0dba\u0dba\u0d9a\u0dca \u0dc0\u0dd2\u0dba \u0dc4\u0dd0\u0d9a\u0dd2\u0dba <span translate=no>_^_0_^_</span>, \u0db1\u0db8\u0dd4\u0dad\u0dca \u0db8\u0dd9\u0dba \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0db4\u0dc4\u0dc3\u0dd4 \u0db6\u0dc0 \u0d85\u0db4\u0da7 \u0db4\u0dd9\u0db1\u0dd3 \u0d9c\u0dd2\u0dba\u0dda\u0dba. </p>\n",
 "<p>These transform the <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> for multi-headed attention. </p>\n": "<p>\u0db8\u0dda\u0dc0\u0dcf\u0db6\u0dc4\u0dd4 \u0dc1\u0dd3\u0dbb\u0dca\u0dc2 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba <span translate=no>_^_1_^_</span> \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dbb\u0dd2\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba \u0d9a\u0dbb\u0dba\u0dd2. <span translate=no>_^_0_^_</span> </p>\n",
 "<p>These transform the <span translate=no>_^_0_^_</span> multi-headed attention. </p>\n": "<p>\u0db8\u0dda\u0dc0\u0dcf <span translate=no>_^_0_^_</span> \u0db6\u0dc4\u0dd4-\u0dc1\u0dd3\u0dbb\u0dca\u0dc2 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0db4\u0dbb\u0dd2\u0dc0\u0dbb\u0dca\u0dad\u0db1\u0dba \u0d9a\u0dbb\u0dba\u0dd2. </p>\n",
 "<p>This should only happen when the stack is empty </p>\n": "<p>\u0db8\u0dd9\u0dba\u0dc3\u0dd2\u0daf\u0dd4\u0dc0\u0dd2\u0dba \u0dba\u0dd4\u0dad\u0dca\u0dad\u0dda \u0dad\u0ddc\u0d9c\u0dba \u0dc4\u0dd2\u0dc3\u0dca \u0dc0\u0dd6 \u0dc0\u0dd2\u0da7 \u0db4\u0db8\u0dab\u0dd2 </p>\n",
 "<p>Transformer size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca\u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba <span translate=no>_^_0_^_</span> </p>\n",
 "<p>We store attentions so that it can be used for logging, or other computations if needed </p>\n": "<p>\u0d85\u0dc0\u0dc1\u0dca\u0dba\u0db1\u0db8\u0dca \u0dbd\u0ddc\u0d9c\u0dca \u0dc0\u0dd3\u0db8 \u0dc4\u0ddd \u0dc0\u0dd9\u0db1\u0dad\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dca \u0dc3\u0db3\u0dc4\u0dcf \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dc5 \u0dc4\u0dd0\u0d9a\u0dd2 \u0dc0\u0db1 \u0db4\u0dbb\u0dd2\u0daf\u0dd2 \u0d85\u0db4\u0dd2 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dbb\u0db8\u0dd4 </p>\n",
 "<p>You need to get (use) the stack after adding a value. Otherwise this implementation fails </p>\n": "<p>\u0d85\u0d9c\u0dba\u0d9a\u0dca\u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0db4\u0dc3\u0dd4 \u0d94\u0db6\u0da7 \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0dbd\u0db6\u0dcf \u0d9c\u0dad \u0dba\u0dd4\u0dad\u0dd4\u0dba (\u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1\u0dca\u0db1). \u0d91\u0dc3\u0dda \u0db1\u0ddc\u0db8\u0dd0\u0dad\u0dd2\u0db1\u0db8\u0dca \u0db8\u0dd9\u0db8 \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0d85\u0dc3\u0db8\u0dad\u0dca \u0dc0\u0dda </p>\n",
 "<ul><li>&#x27;heads&#x27; is the number of attention heads </li>\n<li><span translate=no>_^_0_^_</span> is the number of features in the transformer </li>\n<li><span translate=no>_^_1_^_</span> is the attention dropout probability </li>\n<li><span translate=no>_^_2_^_</span> is whether key, value tensors are already calculated</li></ul>\n": "<ul><li>'\u0dc4\u0dd9\u0da9\u0dca\u0dc3\u0dca'\u0dba\u0db1\u0dd4 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dbb\u0db1 \u0dc4\u0dd2\u0dc3\u0dca \u0dc3\u0d82\u0d9b\u0dca\u0dba\u0dcf\u0dc0\u0d9a\u0dd2 </li>\n<li><span translate=no>_^_0_^_</span> \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0d87\u0dad\u0dd2 \u0dbd\u0d9a\u0dca\u0dc2\u0dab \u0d9c\u0dab\u0db1 </li>\n<li><span translate=no>_^_1_^_</span> \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda \u0dc3\u0db8\u0dca\u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf\u0dc0 </li>\n<li><span translate=no>_^_2_^_</span> \u0dba\u0dad\u0dd4\u0dbb\u0daf \u0dba\u0db1\u0dca\u0db1, \u0d85\u0d9c\u0dba \u0d86\u0dad\u0dad\u0dd3\u0db1\u0dca \u0daf\u0dd0\u0db1\u0da7\u0db8\u0dad\u0dca \u0d9c\u0dab\u0db1\u0dba \u0d9a\u0dbb \u0d87\u0dad</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> has shape <span translate=no>_^_1_^_</span> </li>\n<li><span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> has shape <span translate=no>_^_4_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0dc4\u0dd0\u0da9\u0dba \u0d87\u0dad <span translate=no>_^_1_^_</span> </li>\n<li><span translate=no>_^_2_^_</span> \u0dc3\u0dc4 \u0dc4\u0dd0\u0da9\u0dba <span translate=no>_^_3_^_</span> \u0d87\u0dad <span translate=no>_^_4_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the context of the function (which lets us cache stuff) </li>\n<li><span translate=no>_^_1_^_</span> is the shared memory tensor where we stack and store the values of each step (keys &amp; values) </li>\n<li><span translate=no>_^_2_^_</span> is the shared memory tensor to store and accumulate gradients of each step </li>\n<li><span translate=no>_^_3_^_</span> is the last value stacked </li>\n<li><span translate=no>_^_4_^_</span> is the number of steps (i.e. size of the stack)</li></ul>\n<p>This returns the stacked tensor for steps upto <span translate=no>_^_5_^_</span>.</p>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0dba\u0db1\u0dd4 \u0dc1\u0dca\u0dbb\u0dd2\u0dad\u0dba\u0dda \u0dc3\u0db1\u0dca\u0daf\u0dbb\u0dca\u0db7\u0dba (\u0d91\u0dba \u0d85\u0db4\u0da7 \u0dc4\u0dd0\u0db9\u0dd2\u0dbd\u0dd2 \u0daf\u0dda\u0dc0\u0dbd\u0dca \u0dc0\u0dbd\u0da7 \u0d89\u0da9 \u0daf\u0dd9\u0dba\u0dd2) </li>\n<li><span translate=no>_^_1_^_</span> \u0dba\u0db1\u0dd4 \u0dc4\u0dc0\u0dd4\u0dbd\u0dca \u0db8\u0dad\u0d9a \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba \u0dc0\u0db1 \u0d85\u0dad\u0dbb \u0d91\u0dc4\u0dd2\u0daf\u0dd3 \u0d85\u0db4\u0dd2 \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb\u0dda \u0d85\u0d9c\u0dba\u0db1\u0dca \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dbb \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dbb\u0db8\u0dd4 (\u0dba\u0dad\u0dd4\u0dbb\u0dd4 \u0dc3\u0dc4 \u0d85\u0d9c\u0dba\u0db1\u0dca) </li>\n<li><span translate=no>_^_2_^_</span> \u0dba\u0db1\u0dd4 \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0db4\u0dd2\u0dba\u0dc0\u0dbb\u0dda \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0d9c\u0db6\u0da9\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc4\u0dcf \u0dbb\u0dd0\u0dc3\u0dca \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 \u0dc3\u0db3\u0dc4\u0dcf \u0dc4\u0dc0\u0dd4\u0dbd\u0dca \u0db8\u0dad\u0d9a \u0d86\u0dad\u0dad\u0dd2\u0dba\u0d9a\u0dd2 </li>\n<li><span translate=no>_^_3_^_</span> \u0d85\u0dc0\u0dc3\u0dcf\u0db1 \u0d85\u0d9c\u0dba \u0d9c\u0ddc\u0da9\u0d9c\u0dd0\u0dc3\u0dd3 \u0d87\u0dad </li>\n<li><span translate=no>_^_4_^_</span> \u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0d9c\u0dab\u0db1 (\u0d91\u0db1\u0db8\u0dca \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba)</li></ul>\n<p>\u0db8\u0dd9\u0dba\u0db4\u0dd2\u0dba\u0dc0\u0dbb \u0dc3\u0db3\u0dc4\u0dcf \u0d9c\u0ddc\u0da9\u0d9c\u0dd0\u0dc3\u0dd3 \u0d87\u0dad\u0dd2 \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba \u0db1\u0dd0\u0dc0\u0dad \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0dba\u0dd2 <span translate=no>_^_5_^_</span>. </p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the feedback transformer layer, which we clone for each layer </li>\n<li><span translate=no>_^_1_^_</span> is the number of layers in the transformer </li>\n<li><span translate=no>_^_2_^_</span> is the number of features in the transformer </li>\n<li>&#x27;heads&#x27; is the number of attention heads</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0d85\u0db4\u0dd2 \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0d9a\u0dca \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dbb\u0dd2\u0d9c\u0dab\u0d9a \u0d9a\u0dca\u0dbb\u0dd2\u0da9\u0dcf\u0dc0\u0da7 \u0dc3\u0db8\u0dcf\u0db1 \u0dc0\u0db1 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba, \u0dc0\u0dda </li>\n<li><span translate=no>_^_1_^_</span> \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0dc3\u0dca\u0dae\u0dbb \u0d9c\u0dab\u0db1 </li>\n<li><span translate=no>_^_2_^_</span> \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0d87\u0dad\u0dd2 \u0dbd\u0d9a\u0dca\u0dc2\u0dab \u0d9c\u0dab\u0db1 </li>\n<li>'\u0dc4\u0dd9\u0da9\u0dca\u0dc3\u0dca'\u0dba\u0db1\u0dd4 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dbb\u0db1 \u0dc4\u0dd2\u0dc3\u0dca \u0dc3\u0d82\u0d9b\u0dca\u0dba\u0dcf\u0dc0\u0d9a\u0dd2</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the feedback transformer layer, which we clone for each layer </li>\n<li><span translate=no>_^_1_^_</span> is the number of layers in the transformer</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0d85\u0db4\u0dd2 \u0d91\u0d9a\u0dca \u0d91\u0d9a\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0d9a\u0dca \u0dc3\u0db3\u0dc4\u0dcf \u0db4\u0dbb\u0dd2\u0d9c\u0dab\u0d9a \u0d9a\u0dca\u0dbb\u0dd2\u0da9\u0dcf\u0dc0\u0da7 \u0dc3\u0db8\u0dcf\u0db1 \u0dc0\u0db1 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0dc3\u0dca\u0dae\u0dbb\u0dba, \u0dc0\u0dda </li>\n<li><span translate=no>_^_1_^_</span> \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0dc3\u0dca\u0dae\u0dbb \u0d9c\u0dab\u0db1</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the gradient with respect to the output of about <span translate=no>_^_1_^_</span> function</li></ul>\n<p>This accumulates the gradients in the shared memory tensor and return the gradients with respect to the <span translate=no>_^_2_^_</span> result in the stack.</p>\n": "<ul><li><span translate=no>_^_0_^_</span> <span translate=no>_^_1_^_</span> \u0dc1\u0dca\u0dbb\u0dd2\u0dad\u0dba\u0dda \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0dc3\u0db8\u0dca\u0db6\u0db1\u0dca\u0db0\u0dba\u0dd9\u0db1\u0dca \u0dc1\u0dca\u0dbb\u0dda\u0dab\u0dd2\u0dba \u0dc0\u0dda</li></ul>\n<p>\u0db8\u0dd9\u0dba\u0dc4\u0dc0\u0dd4\u0dbd\u0dca \u0db8\u0dad\u0d9a \u0da7\u0dd9\u0db1\u0dca\u0dc3\u0dbb\u0dba\u0dda \u0d87\u0dad\u0dd2 \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0dc3\u0db8\u0dd4\u0da0\u0dca\u0da0\u0dba \u0dc0\u0db1 \u0d85\u0dad\u0dbb \u0dad\u0ddc\u0d9c\u0dba\u0dda <span translate=no>_^_2_^_</span> \u0db4\u0dca\u0dbb\u0dad\u0dd2 result \u0dbd\u0dba \u0dc3\u0db8\u0dca\u0db6\u0db1\u0dca\u0db0\u0dba\u0dd9\u0db1\u0dca \u0d85\u0db1\u0dd4\u0d9a\u0dca\u0dbb\u0db8\u0dd2\u0d9a \u0d86\u0db4\u0dc3\u0dd4 \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0db1\u0dca\u0db1. </p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the input with shape <span translate=no>_^_1_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0dc4\u0dd0\u0da9\u0dba \u0dc3\u0dc4\u0dd2\u0dad \u0d86\u0daf\u0dcf\u0db1\u0dba \u0dc0\u0dda <span translate=no>_^_1_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the maximum size of the stack</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0d8b\u0db4\u0dbb\u0dd2\u0db8 \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of features in the transformer </li>\n<li><span translate=no>_^_1_^_</span> is the feedback attention module </li>\n<li><span translate=no>_^_2_^_</span> is the position-wise feed forward layer </li>\n<li><span translate=no>_^_3_^_</span> is the dropout probability for dropout layers after attention and feed-forward</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dba\u0dda \u0d87\u0dad\u0dd2 \u0dbd\u0d9a\u0dca\u0dc2\u0dab \u0d9c\u0dab\u0db1 </li>\n<li><span translate=no>_^_1_^_</span> \u0dba\u0db1\u0dd4 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0db8\u0ddc\u0da9\u0dd2\u0dba\u0dd4\u0dbd\u0dba\u0dba\u0dd2 </li>\n<li><span translate=no>_^_2_^_</span> \u0dc3\u0dca\u0dae\u0dcf\u0db1-wise \u0dcf\u0db1\u0dc0\u0db1\u0dca\u0dad \u0d86\u0dc4\u0dcf\u0dbb \u0d89\u0daf\u0dd2\u0dbb\u0dd2 \u0dc3\u0dca\u0dae\u0dbb\u0dba\u0dba\u0dd2 </li>\n<li><span translate=no>_^_3_^_</span> \u0dba\u0db1\u0dd4 \u0d85\u0dc0\u0db0\u0dcf\u0db1\u0dba \u0dc3\u0dc4 \u0db4\u0ddd\u0dc2\u0dab\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0db4\u0dc3\u0dd4 \u0dc3\u0dca\u0dae\u0dbb \u0d85\u0dad\u0dc4\u0dd0\u0dbb \u0daf\u0dd0\u0db8\u0dd3\u0db8\u0dda \u0dc3\u0db8\u0dca\u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf\u0dc0\u0dba\u0dba\u0dd2</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the size of the stack </li>\n<li><span translate=no>_^_1_^_</span> is the tensor that needs to be added to the stack</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span> \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0db4\u0dca\u0dbb\u0db8\u0dcf\u0dab\u0dba \u0dc0\u0dda </li>\n<li><span translate=no>_^_1_^_</span> \u0d85\u0da9\u0dd4\u0d9a\u0dca\u0d9a\u0dd4\u0dc0 \u0d91\u0d9a\u0dad\u0dd4 \u0d9a\u0dc5 \u0dba\u0dd4\u0dad\u0dd4 \u0db6\u0dc0 tensor \u0dc0\u0dda</li></ul>\n",
 "Feedback Transformer": "\u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca",
 "This is an annotated implementation/tutorial the Feedback Transformer in PyTorch.": "\u0db8\u0dd9\u0dba PyTorch \u0dc4\u0dd2 \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0db4\u0ddd\u0dc2\u0dab \u0da7\u0dca\u0dbb\u0dcf\u0db1\u0dca\u0dc3\u0dca\u0dc6\u0ddd\u0db8\u0dbb\u0dca \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8/\u0db1\u0dd2\u0db6\u0db1\u0dca\u0db0\u0db1\u0dba\u0d9a\u0dd2."
}