{
 "<h1>Recurrent Highway Networks</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of <a href=\"https://papers.labml.ai/paper/1607.03474\">Recurrent Highway Networks</a>.</p>\n": "<h1>\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc</h1>\n<p>\u8fd9\u662f<a href=\"https://papers.labml.ai/paper/1607.03474\">\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc</a>\u7684 <a href=\"https://pytorch.org\">PyTorch</a> \u5b9e\u73b0\u3002</p>\n",
 "<h2>Multilayer Recurrent Highway Network</h2>\n": "<h2>\u591a\u5c42\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51</h2>\n",
 "<h2>Recurrent Highway Network Cell</h2>\n<p>This implements equations <span translate=no>_^_0_^_</span>.</p>\n<p><span translate=no>_^_1_^_</span></p>\n<p>where</p>\n<span translate=no>_^_2_^_</span><p>and for <span translate=no>_^_3_^_</span></p>\n<span translate=no>_^_4_^_</span><p><span translate=no>_^_5_^_</span> stands for element-wise multiplication.</p>\n<p>Here we have made a couple of changes to notations from the paper. To avoid confusion with time, gate is represented with <span translate=no>_^_6_^_</span>, which was <span translate=no>_^_7_^_</span> in the paper. To avoid confusion with multiple layers we use <span translate=no>_^_8_^_</span> for depth and <span translate=no>_^_9_^_</span> for total depth instead of <span translate=no>_^_10_^_</span> and <span translate=no>_^_11_^_</span> from the paper.</p>\n<p>We have also replaced the weight matrices and bias vectors from the equations with linear transforms, because that&#x27;s how the implementation is going to look like.</p>\n<p>We implement weight tying, as described in paper, <span translate=no>_^_12_^_</span>.</p>\n": "<h2>\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc\u5355\u5143</h2>\n<p>\u8fd9\u5b9e\u73b0\u4e86\u65b9\u7a0b<span translate=no>_^_0_^_</span>\u3002</p>\n<p><span translate=no>_^_1_^_</span></p>\n<p>\u5728\u54ea\u91cc</p>\n<span translate=no>_^_2_^_</span><p>\u8fd8\u6709\u4e3a\u4e86<span translate=no>_^_3_^_</span></p>\n<span translate=no>_^_4_^_</span><p><span translate=no>_^_5_^_</span>\u4ee3\u8868\u9010\u5143\u7d20\u4e58\u6cd5\u3002</p>\n<p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u8bba\u6587\u4e2d\u7684\u7b26\u53f7\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u65f6\u95f4\u6df7\u6dc6\uff0cgate \u7528<span translate=no>_^_6_^_</span><span translate=no>_^_7_^_</span>\u5728\u62a5\u7eb8\u4e0a\u8868\u793a\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u591a\u5c42\u6df7\u6dc6\uff0c\u6211\u4eec\u4f7f\u7528<span translate=no>_^_8_^_</span>\u6df1\u5ea6\u548c<span translate=no>_^_9_^_</span>\u603b\u6df1\u5ea6\u6765\u4ee3\u66ff\u7eb8\u5f20<span translate=no>_^_10_^_</span>\u548c<span translate=no>_^_11_^_</span>\u6765\u81ea\u7eb8\u5f20\u3002</p>\n<p>\u6211\u4eec\u8fd8\u7528\u7ebf\u6027\u53d8\u6362\u53d6\u4ee3\u4e86\u65b9\u7a0b\u4e2d\u7684\u6743\u91cd\u77e9\u9635\u548c\u504f\u7f6e\u5411\u91cf\uff0c\u56e0\u4e3a\u8fd9\u5c31\u662f\u5b9e\u73b0\u7684\u6837\u5b50\u3002</p>\n<p>\u6211\u4eec\u5b9e\u65bd\u91cd\u91cf\u6346\u7ed1\uff0c\u5982\u7eb8\u4e2d\u6240\u8ff0<span translate=no>_^_12_^_</span>\u3002</p>\n",
 "<p> <span translate=no>_^_0_^_</span> has shape <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> has shape <span translate=no>_^_3_^_</span>.</p>\n": "<p><span translate=no>_^_0_^_</span>\u6709\u5f62\u72b6<span translate=no>_^_1_^_</span>\u548c<span translate=no>_^_2_^_</span>\u5f62\u72b6<span translate=no>_^_3_^_</span>\u3002</p>\n",
 "<p> <span translate=no>_^_0_^_</span> is the feature length of the input and <span translate=no>_^_1_^_</span> is the feature length of the cell. <span translate=no>_^_2_^_</span> is <span translate=no>_^_3_^_</span>.</p>\n": "<p><span translate=no>_^_0_^_</span>\u662f\u8f93\u5165\u7684\u8981\u7d20\u957f\u5ea6\uff0c<span translate=no>_^_1_^_</span>\u662f\u50cf\u5143\u7684\u8981\u7d20\u957f\u5ea6\u3002<span translate=no>_^_2_^_</span>\u662f<span translate=no>_^_3_^_</span>\u3002</p>\n",
 "<p> Create a network of <span translate=no>_^_0_^_</span> of recurrent highway network layers, each with depth <span translate=no>_^_1_^_</span>, <span translate=no>_^_2_^_</span>.</p>\n": "<p>\u521b\u5efa\u4e00\u4e2a\u7531<span translate=no>_^_0_^_</span>\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc\u56fe\u5c42\u7ec4\u6210\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2a\u56fe\u5c42\u7684\u6df1\u5ea6<span translate=no>_^_1_^_</span>\u4e3a<span translate=no>_^_2_^_</span>\u3002</p>\n",
 "<p>Array to collect the outputs of the final layer at each time step. </p>\n": "<p>\u7528\u4e8e\u5728\u6bcf\u4e2a\u65f6\u95f4\u6b65\u6536\u96c6\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u7684\u6570\u7ec4\u3002</p>\n",
 "<p>Collect the output of the final layer </p>\n": "<p>\u6536\u96c6\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa</p>\n",
 "<p>Create cells for each layer. Note that only the first layer gets the input directly. Rest of the layers get the input from the layer below </p>\n": "<p>\u4e3a\u6bcf\u5c42\u521b\u5efa\u5355\u5143\u3002\u8bf7\u6ce8\u610f\uff0c\u53ea\u6709\u7b2c\u4e00\u5c42\u76f4\u63a5\u83b7\u5f97\u8f93\u5165\u3002\u5176\u4f59\u56fe\u5c42\u4ece\u4e0b\u9762\u7684\u56fe\u5c42\u83b7\u53d6\u8f93\u5165</p>\n",
 "<p>Get the state of the layer </p>\n": "<p>\u83b7\u53d6\u56fe\u5c42\u7684\u72b6\u6001</p>\n",
 "<p>Initialize the state if <span translate=no>_^_0_^_</span> </p>\n": "<p>\u521d\u59cb\u5316\u72b6\u6001\u5982\u679c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Input to the first layer is the input itself </p>\n": "<p>\u7b2c\u4e00\u5c42\u7684\u8f93\u5165\u662f\u8f93\u5165\u672c\u8eab</p>\n",
 "<p>Input to the next layer is the state of this layer </p>\n": "<p>\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u662f\u8be5\u56fe\u5c42\u7684\u72b6\u6001</p>\n",
 "<p>Iterate <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8fed\u4ee3<span translate=no>_^_0_^_</span></p>\n",
 "<p>Loop through the layers </p>\n": "<p>\u5faa\u73af\u7a7f\u8fc7\u56fe\u5c42</p>\n",
 "<p>Reverse stack the state to get the state of each layer</p>\n<p>\ud83d\udcdd You can just work with the tensor itself but this is easier to debug </p>\n": "<p>\u53cd\u5411\u5806\u53e0\u72b6\u6001\u4ee5\u83b7\u53d6\u6bcf\u5c42\u7684\u72b6\u6001</p>\n<p>\ud83d\udcdd \u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528\u5f20\u91cf\u672c\u8eab\uff0c\u4f46\u8fd9\u66f4\u5bb9\u6613\u8c03\u8bd5</p>\n",
 "<p>Run through the network for each time step </p>\n": "<p>\u5728\u7f51\u7edc\u4e2d\u8fd0\u884c\u6bcf\u4e2a\u65f6\u95f4\u6b65\u957f</p>\n",
 "<p>Similarly we combine <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span>. </p>\n": "<p>\u540c\u6837\uff0c\u6211\u4eec\u5c06<span translate=no>_^_0_^_</span>\u548c<span translate=no>_^_1_^_</span>\u3002</p>\n",
 "<p>Stack the outputs and states </p>\n": "<p>\u5806\u53e0\u8f93\u51fa\u548c\u72b6\u6001</p>\n",
 "<p>The input is used only when <span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span>. </p>\n": "\u53ea\u6709@@ <p>\u5728\u4e3a\u65f6<span translate=no>_^_0_^_</span>\u624d\u4f7f\u7528\u8f93\u5165<span translate=no>_^_1_^_</span>\u3002</p>\n",
 "<p>Use the first half of <span translate=no>_^_0_^_</span> to get <span translate=no>_^_1_^_</span></p>\n<span translate=no>_^_2_^_</span><p> </p>\n": "<p>\u4f7f\u7528\u7684\u524d\u534a\u90e8\u5206<span translate=no>_^_0_^_</span>\u83b7\u5f97<span translate=no>_^_1_^_</span></p>\n<span translate=no>_^_2_^_</span><p></p>\n",
 "<p>Use the second half of <span translate=no>_^_0_^_</span> to get <span translate=no>_^_1_^_</span></p>\n<span translate=no>_^_2_^_</span><p> </p>\n": "<p>\u4f7f\u7528\u540e\u534a\u90e8\u5206<span translate=no>_^_0_^_</span>\u83b7\u53d6<span translate=no>_^_1_^_</span></p>\n<span translate=no>_^_2_^_</span><p></p>\n",
 "<p>We calculate the concatenation of linear transforms for <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> </p>\n": "<p>\u6211\u4eec\u8ba1\u7b97\u4e86\u548c\u7684\u7ebf\u6027\u53d8\u6362<span translate=no>_^_0_^_</span>\u7684\u7ea7\u8054<span translate=no>_^_1_^_</span></p>\n",
 "<p>We combine <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span>, with a single linear layer. We can then split the results to get the <span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> components. This is the <span translate=no>_^_4_^_</span> and <span translate=no>_^_5_^_</span> for <span translate=no>_^_6_^_</span>. </p>\n": "<p>\u6211\u4eec\u5c06<span translate=no>_^_0_^_</span>\u548c<span translate=no>_^_1_^_</span>\u4e0e\u5355\u4e2a\u7ebf\u6027\u5c42\u7ed3\u5408\u8d77\u6765\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u62c6\u5206\u7ed3\u679c\u4ee5\u83b7\u5f97<span translate=no>_^_2_^_</span>\u548c\u7ec4<span translate=no>_^_3_^_</span>\u4ef6\u3002\u8fd9\u662f an<span translate=no>_^_4_^_</span> d f<span translate=no>_^_5_^_</span> or<span translate=no>_^_6_^_</span>\u3002</p>\n",
 "A simple PyTorch implementation/tutorial of Recurrent Highway Networks.": "\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc\u7684\u4e00\u4e2a\u7b80\u5355\u7684 PyTorch \u5b9e\u73b0/\u6559\u7a0b\u3002",
 "Recurrent Highway Networks": "\u5faa\u73af\u9ad8\u901f\u516c\u8def\u7f51\u7edc"
}