{
 "<h1>Instance Normalization</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of <a href=\"https://papers.labml.ai/paper/1607.08022\">Instance Normalization: The Missing Ingredient for Fast Stylization</a>.</p>\n<p>Instance normalization was introduced to improve <a href=\"https://paperswithcode.com/task/style-transfer\">style transfer</a>. It is based on the observation that stylization should not depend on the contrast of the content image. The &quot;contrast normalization&quot; is</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>where <span translate=no>_^_1_^_</span> is a batch of images with dimensions image index <span translate=no>_^_2_^_</span>, feature channel <span translate=no>_^_3_^_</span>, and spatial position <span translate=no>_^_4_^_</span>.</p>\n<p>Since it&#x27;s hard for a convolutional network to learn &quot;contrast normalization&quot;, this paper introduces instance normalization which does that.</p>\n<p>Here&#x27;s a <a href=\"experiment.html\">CIFAR 10 classification model</a> that uses instance normalization.</p>\n": "<h1>\u5b9e\u4f8b\u89c4\u8303\u5316</h1>\n<p>\u8fd9\u662f P <a href=\"https://pytorch.org\">yTorch</a> \u5b9e\u73b0<a href=\"https://papers.labml.ai/paper/1607.08022\">\u5b9e\u4f8b\u89c4\u8303\u5316\uff1a\u5feb\u901f\u98ce\u683c\u5316\u7684\u7f3a\u5931\u6210\u5206</a>\u3002</p>\n<p>\u5f15\u5165\u4e86\u5b9e\u4f8b\u89c4\u8303\u5316\u4ee5\u6539\u8fdb<a href=\"https://paperswithcode.com/task/style-transfer\">\u6837\u5f0f\u4f20\u8f93</a>\u3002\u5b83\u57fa\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf\uff0c\u5373\u98ce\u683c\u5316\u4e0d\u5e94\u4f9d\u8d56\u4e8e\u5185\u5bb9\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\u3002\u201c\u5bf9\u6bd4\u5ea6\u6807\u51c6\u5316\u201d \u662f</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>\u5176\u4e2d\uff0c<span translate=no>_^_1_^_</span>\u662f\u4e00\u6279\u5177\u6709\u5c3a\u5bf8\u56fe\u50cf\u7d22\u5f15<span translate=no>_^_2_^_</span>\u3001\u7279\u5f81\u901a\u9053<span translate=no>_^_3_^_</span>\u548c\u7a7a\u95f4\u4f4d\u7f6e\u7684\u56fe\u50cf<span translate=no>_^_4_^_</span>\u3002</p>\n<p>\u7531\u4e8e\u5377\u79ef\u7f51\u7edc\u5f88\u96be\u5b66\u4e60 \u201c\u5bf9\u6bd4\u5ea6\u5f52\u4e00\u5316\u201d\uff0c\u672c\u6587\u4ecb\u7ecd\u4e86\u5b9e\u4f8b\u89c4\u8303\u5316\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p>\n<p>\u4ee5\u4e0b\u662f\u4f7f\u7528\u5b9e\u4f8b\u89c4\u8303\u5316\u7684 <a href=\"experiment.html\">CIFAR 10 \u5206\u7c7b\u6a21\u578b</a>\u3002</p>\n",
 "<h2>Instance Normalization Layer</h2>\n<p>Instance normalization layer <span translate=no>_^_0_^_</span> normalizes the input <span translate=no>_^_1_^_</span> as follows:</p>\n<p>When input <span translate=no>_^_2_^_</span> is a batch of image representations, where <span translate=no>_^_3_^_</span> is the batch size, <span translate=no>_^_4_^_</span> is the number of channels, <span translate=no>_^_5_^_</span> is the height and <span translate=no>_^_6_^_</span> is the width. <span translate=no>_^_7_^_</span> and <span translate=no>_^_8_^_</span>. The affine transformation with <span translate=no>_^_9_^_</span> and <span translate=no>_^_10_^_</span> are optional.</p>\n<p><span translate=no>_^_11_^_</span></p>\n": "<h2>\u5b9e\u4f8b\u89c4\u8303\u5316\u5c42</h2>\n<p>\u5b9e\u4f8b\u5f52\u4e00\u5316\u5c42\u5c06\u8f93\u5165<span translate=no>_^_0_^_</span>\u5f52\u4e00\u5316\uff0c<span translate=no>_^_1_^_</span>\u5982\u4e0b\u6240\u793a\uff1a</p>\n<p>\u5f53\u8f93\u5165<span translate=no>_^_2_^_</span>\u662f\u4e00\u6279\u56fe\u50cf\u8868\u793a\u65f6\uff0c\u5176\u4e2d<span translate=no>_^_3_^_</span>\u662f\u6279\u6b21\u5927\u5c0f\uff0c<span translate=no>_^_4_^_</span>\u662f\u901a\u9053\u6570\uff0c<span translate=no>_^_5_^_</span>\u662f\u9ad8\u5ea6\u548c<span translate=no>_^_6_^_</span>\u662f\u5bbd\u5ea6\u3002<span translate=no>_^_7_^_</span>\u548c<span translate=no>_^_8_^_</span>\u3002\u5e26<span translate=no>_^_9_^_</span>\u548c\u7684\u4eff\u5c04\u53d8\u6362<span translate=no>_^_10_^_</span>\u662f\u53ef\u9009\u7684\u3002</p>\n<p><span translate=no>_^_11_^_</span></p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p> <span translate=no>_^_0_^_</span> is a tensor of shape <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> denotes any number of (possibly 0) dimensions.  For example, in an image (2D) convolution this will be <span translate=no>_^_3_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span>\u662f\u5f62\u72b6\u5f20\u91cf<span translate=no>_^_1_^_</span>\u3002<span translate=no>_^_2_^_</span>\u8868\u793a\u4efb\u610f\u6570\u91cf\uff08\u53ef\u80fd\u4e3a 0\uff09\u7684\u7ef4\u5ea6\u3002\u4f8b\u5982\uff0c\u5728\u56fe\u50cf\uff082D\uff09\u5377\u79ef\u4e2d\uff0c\u8fd9\u5c06\u662f<span translate=no>_^_3_^_</span></p>\n",
 "<p> Simple test</p>\n": "<p>\u7b80\u5355\u6d4b\u8bd5</p>\n",
 "<p>Calculate the mean across last dimension i.e. the means for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5e73\u5747\u503c\uff0c\u5373\u6bcf\u4e2a\u8981\u7d20\u7684\u5747\u503c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the squared mean across first and last dimension; i.e. the means for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u7b2c\u4e00\u7ef4\u548c\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5747\u65b9\u503c\uff1b\u5373\u6bcf\u4e2a\u8981\u7d20\u7684\u5747\u503c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Create parameters for <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> for scale and shift </p>\n": "<p><span translate=no>_^_1_^_</span>\u4e3a\u7f29\u653e<span translate=no>_^_0_^_</span>\u548c\u79fb\u4f4d\u521b\u5efa\u53c2\u6570</p>\n",
 "<p>Get the batch size </p>\n": "<p>\u83b7\u53d6\u6279\u6b21\u5927\u5c0f</p>\n",
 "<p>Keep the original shape </p>\n": "<p>\u4fdd\u6301\u539f\u59cb\u5f62\u72b6</p>\n",
 "<p>Normalize <span translate=no>_^_0_^_</span> </p>\n": "<p>\u89c4\u8303\u5316<span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape into <span translate=no>_^_0_^_</span> </p>\n": "<p>\u91cd\u5851\u6210<span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape to original and return </p>\n": "<p>\u91cd\u5851\u4e3a\u539f\u59cb\u5f62\u72b6\u7136\u540e\u8fd4\u56de</p>\n",
 "<p>Sanity check to make sure the number of features is the same </p>\n": "<p>\u8fdb\u884c\u5065\u5168\u6027\u68c0\u67e5\u4ee5\u786e\u4fdd\u8981\u7d20\u6570\u91cf\u76f8\u540c</p>\n",
 "<p>Scale and shift <span translate=no>_^_0_^_</span> </p>\n": "<p>\u7f29\u653e\u548c\u79fb\u52a8<span translate=no>_^_0_^_</span></p>\n",
 "<p>Variance for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u4e2a\u8981\u7d20\u7684\u65b9\u5dee<span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of features in the input </li>\n<li><span translate=no>_^_1_^_</span> is <span translate=no>_^_2_^_</span>, used in <span translate=no>_^_3_^_</span> for numerical stability </li>\n<li><span translate=no>_^_4_^_</span> is whether to scale and shift the normalized value</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u8f93\u5165\u4e2d\u7684\u8981\u7d20\u6570</li>\n<li><span translate=no>_^_1_^_</span>\u662f<span translate=no>_^_2_^_</span>\uff0c<span translate=no>_^_3_^_</span>\u7528\u4e8e\u6570\u503c\u7a33\u5b9a\u6027</li>\n<li><span translate=no>_^_4_^_</span>\u662f\u5426\u7f29\u653e\u548c\u79fb\u52a8\u5f52\u4e00\u5316\u503c</li></ul>\n",
 "A PyTorch implementation/tutorial of instance normalization.": "\u4e00\u4e2a\u5173\u4e8e\u5b9e\u4f8b\u89c4\u8303\u5316\u7684 PyTorch \u5b9e\u73b0/\u6559\u7a0b\u3002",
 "Instance Normalization": "\u5b9e\u4f8b\u89c4\u8303\u5316"
}