{
 "<h1>Instance Normalization</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of <a href=\"https://papers.labml.ai/paper/1607.08022\">Instance Normalization: The Missing Ingredient for Fast Stylization</a>.</p>\n<p>Instance normalization was introduced to improve <a href=\"https://paperswithcode.com/task/style-transfer\">style transfer</a>. It is based on the observation that stylization should not depend on the contrast of the content image. The &quot;contrast normalization&quot; is</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>where <span translate=no>_^_1_^_</span> is a batch of images with dimensions image index <span translate=no>_^_2_^_</span>, feature channel <span translate=no>_^_3_^_</span>, and spatial position <span translate=no>_^_4_^_</span>.</p>\n<p>Since it&#x27;s hard for a convolutional network to learn &quot;contrast normalization&quot;, this paper introduces instance normalization which does that.</p>\n<p>Here&#x27;s a <a href=\"experiment.html\">CIFAR 10 classification model</a> that uses instance normalization.</p>\n": "<h1>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316</h1>\n<p>\u3053\u308c\u306f <a href=\"https://pytorch.org\">PyTorch</a> \u306e\u300c<a href=\"https://papers.labml.ai/paper/1607.08022\">\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316:\u9ad8\u901f\u30b9\u30bf\u30a4\u30eb\u5316\u306b\u6b20\u3051\u3066\u3044\u308b\u8981\u7d20</a>\u300d\u306e\u5b9f\u88c5\u3067\u3059\u3002</p>\n<p><a href=\"https://paperswithcode.com/task/style-transfer\">\u30b9\u30bf\u30a4\u30eb\u8ee2\u9001\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6b63\u898f\u5316\u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f</a>\u3002\u3053\u308c\u306f\u3001\u30b9\u30bf\u30a4\u30eb\u8a2d\u5b9a\u306f\u30b3\u30f3\u30c6\u30f3\u30c4\u753b\u50cf\u306e\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u306b\u4f9d\u5b58\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u89b3\u5bdf\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u300c\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u6b63\u898f\u5316\u300d\u3068\u306f</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>where <span translate=no>_^_1_^_</span> \u306f\u3001\u753b\u50cf\u30a4\u30f3\u30c7\u30c3\u30af\u30b9<span translate=no>_^_2_^_</span>\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30c1\u30e3\u30cd\u30eb<span translate=no>_^_3_^_</span>\u3001<span translate=no>_^_4_^_</span>\u304a\u3088\u3073\u7a7a\u9593\u4f4d\u7f6e\u3092\u542b\u3080\u753b\u50cf\u306e\u30d0\u30c3\u30c1\u3067\u3059\u3002</p>\n<p>\u7573\u307f\u8fbc\u307f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u300c\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u6b63\u898f\u5316\u300d\u3092\u5b66\u7fd2\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u306e\u3067\u3001\u672c\u7a3f\u3067\u306f\u305d\u308c\u3092\u884c\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p>\n<p>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6b63\u898f\u5316\u3092\u4f7f\u7528\u3059\u308b <a href=\"experiment.html\">CIFAR 10 \u5206\u985e\u30e2\u30c7\u30eb\u3092\u6b21\u306b\u793a\u3057\u307e\u3059</a>\u3002</p>\n",
 "<h2>Instance Normalization Layer</h2>\n<p>Instance normalization layer <span translate=no>_^_0_^_</span> normalizes the input <span translate=no>_^_1_^_</span> as follows:</p>\n<p>When input <span translate=no>_^_2_^_</span> is a batch of image representations, where <span translate=no>_^_3_^_</span> is the batch size, <span translate=no>_^_4_^_</span> is the number of channels, <span translate=no>_^_5_^_</span> is the height and <span translate=no>_^_6_^_</span> is the width. <span translate=no>_^_7_^_</span> and <span translate=no>_^_8_^_</span>. The affine transformation with <span translate=no>_^_9_^_</span> and <span translate=no>_^_10_^_</span> are optional.</p>\n<p><span translate=no>_^_11_^_</span></p>\n": "<h2>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316\u30ec\u30a4\u30e4\u30fc</h2>\n<p>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316\u30ec\u30a4\u30e4\u30fc\u306f\u3001<span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u3092\u6b63\u898f\u5316\u3057\u307e\u3059\u3002</p>\n<p><span translate=no>_^_2_^_</span>\u5165\u529b\u304c\u30a4\u30e1\u30fc\u30b8\u8868\u73fe\u306e\u30d0\u30c3\u30c1\u306e\u5834\u5408\u3001<span translate=no>_^_3_^_</span>\u306f\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3001<span translate=no>_^_4_^_</span>\u306f\u30c1\u30e3\u30cd\u30eb\u6570\u3001<span translate=no>_^_5_^_</span>\u306f\u9ad8\u3055\u3001<span translate=no>_^_6_^_</span>\u306f\u5e45\u3067\u3059\u3002<span translate=no>_^_7_^_</span>\u3068<span translate=no>_^_8_^_</span>\u3002<span translate=no>_^_9_^_</span><span translate=no>_^_10_^_</span>\u304a\u3088\u3073\u3092\u4f7f\u7528\u3057\u305f\u30a2\u30d5\u30a3\u30f3\u5909\u63db\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059</p>\u3002\n<p><span translate=no>_^_11_^_</span></p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p> <span translate=no>_^_0_^_</span> is a tensor of shape <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> denotes any number of (possibly 0) dimensions.  For example, in an image (2D) convolution this will be <span translate=no>_^_3_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u5f62\u72b6\u306e\u30c6\u30f3\u30bd\u30eb\u3067\u3059\u3002<span translate=no>_^_2_^_</span>\u4efb\u610f\u306e\u6570 (0 \u306e\u5834\u5408\u3082\u3042\u308a\u307e\u3059) \u306e\u6b21\u5143\u3092\u793a\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u753b\u50cf (2D) \u306e\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059</p>\u3002<span translate=no>_^_3_^_</span>\n",
 "<p> Simple test</p>\n": "<p>\u7c21\u5358\u306a\u30c6\u30b9\u30c8</p>\n",
 "<p>Calculate the mean across last dimension i.e. the means for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6700\u5f8c\u306e\u6b21\u5143\u306e\u5e73\u5747\u3001\u3064\u307e\u308a\u5404\u7279\u5fb4\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u307e\u3059 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the squared mean across first and last dimension; i.e. the means for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6700\u521d\u3068\u6700\u5f8c\u306e\u6b21\u5143\u306e\u4e8c\u4e57\u5e73\u5747\u3001\u3064\u307e\u308a\u5404\u7279\u5fb4\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002<span translate=no>_^_0_^_</span></p>\n",
 "<p>Create parameters for <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> for scale and shift </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u30b9\u30b1\u30fc\u30eb\u3068\u30b7\u30d5\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4f5c\u6210</p>\n",
 "<p>Get the batch size </p>\n": "<p>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u53d6\u5f97</p>\n",
 "<p>Keep the original shape </p>\n": "<p>\u5143\u306e\u5f62\u3092\u4fdd\u3064</p>\n",
 "<p>Normalize <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30ce\u30fc\u30de\u30e9\u30a4\u30ba <span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape into <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5f62\u3092\u5909\u3048\u3066 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape to original and return </p>\n": "<p>\u5143\u306e\u5f62\u306b\u623b\u3057\u3066\u623b\u3059</p>\n",
 "<p>Sanity check to make sure the number of features is the same </p>\n": "<p>\u6a5f\u80fd\u306e\u6570\u304c\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30b5\u30cb\u30c6\u30a3\u30c1\u30a7\u30c3\u30af</p>\n",
 "<p>Scale and shift <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30b9\u30b1\u30fc\u30eb\u3068\u30b7\u30d5\u30c8 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Variance for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5404\u6a5f\u80fd\u306e\u5dee\u7570 <span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of features in the input </li>\n<li><span translate=no>_^_1_^_</span> is <span translate=no>_^_2_^_</span>, used in <span translate=no>_^_3_^_</span> for numerical stability </li>\n<li><span translate=no>_^_4_^_</span> is whether to scale and shift the normalized value</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u306f\u5165\u529b\u5185\u306e\u7279\u5fb4\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_1_^_</span><span translate=no>_^_3_^_</span>\u6570\u5024\u306e\u5b89\u5b9a\u6027\u306e\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059 <span translate=no>_^_2_^_</span></li>\n<li><span translate=no>_^_4_^_</span>\u6b63\u898f\u5316\u3055\u308c\u305f\u5024\u3092\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u30b7\u30d5\u30c8\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u3059</li></ul>\n",
 "A PyTorch implementation/tutorial of instance normalization.": "PyTorch\u306e\u5b9f\u88c5/\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3002",
 "Instance Normalization": "\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u6b63\u898f\u5316"
}