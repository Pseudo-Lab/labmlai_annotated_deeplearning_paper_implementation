{
 "<h1>DeepNorm</h1>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/normalization/deep_norm/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of the DeepNorm from the paper <a href=\"https://papers.labml.ai/paper/2203.00555\">DeepNet: Scaling Transformers to 1,000 Layers</a>.</p>\n<p>The paper proposes a method to stabilize extremely deep transformers through a new normalizing function to replace LayerNorm and a weight initialization scheme. This combines the performance of Post-LayerNorm and the stability of Pre-LayerNorm. Transformers with DeepNorms are supposed to be stable even without a learning rate warm-up.</p>\n<p>The paper first shows that the changes to layer outputs (for the same input)  change gradually during stable training; when unstable it changes rapidly during the initial training steps. This happens with initializing weights to small values, and learning rate warm-ups where the training is stable. They use the idea of keeping the changes to layer outputs small to derive the new  normalization and weight initialization mechanism.</p>\n<h2>Weight Initializations</h2>\n<p>Usually, the weights are initialized with Xavier or Kaiming initializations. This paper scales (sets the gain) the weights by a constant <span translate=no>_^_1_^_</span> depending on the size of the  transformer.</p>\n<p>DeepNorm suggests scaling the weights of the two linear transforms in the <a href=\"../../transformers/feed_forward.html\">Feed-Forward Network</a>, the value projection transform, and the output projection transform of the attention layer. Weights of these transforms are scaled by (has a gain equal to) <span translate=no>_^_2_^_</span>.</p>\n<p>The scaling is implemented in the</p>\n<h2>Normalization Function</h2>\n<p><span translate=no>_^_3_^_</span></p>\n<p>where <span translate=no>_^_4_^_</span> is a constant that depends on the depth of the transformer,  <span translate=no>_^_5_^_</span> is <a href=\"../layer_norm/index.html\">Layer Normalization</a>, and  <span translate=no>_^_6_^_</span> is the function of the <span translate=no>_^_7_^_</span>-th transformer sub-layer (FFN or attention).</p>\n<p>This function is used to replace Post-LayerNorm.</p>\n<h2><span translate=no>_^_8_^_</span> and <span translate=no>_^_9_^_</span> constants</h2>\n<span translate=no>_^_10_^_</span><p>Where <span translate=no>_^_11_^_</span> is the number of layers in the encoder and <span translate=no>_^_12_^_</span> is the number of layers in the decoder.</p>\n<p>Refer to <a href=\"https://papers.labml.ai/paper/2203.00555\">the paper</a> for derivation.</p>\n<p><a href=\"experiment.html\">Here is an experiment implementation</a> that uses DeepNorm.</p>\n": "<h1>DeepN</h1>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/normalization/deep_norm/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n<p>\u8fd9\u662f\u8bba\u6587\u300aDee <a href=\"https://pytorch.org\">pNe <a href=\"https://papers.labml.ai/paper/2203.00555\">t\uff1a\u5c06\u53d8\u5f62\u91d1\u521a\u6269\u5c55\u5230 1,000 \u5c42\u300b\u4e2d DeepN</a> orm \u7684 PyTorch</a> \u5b9e\u73b0\u3002</p>\n<p>\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u901a\u8fc7\u65b0\u7684\u5f52\u4e00\u5316\u51fd\u6570\u53d6\u4ee3LayerNorm\u548c\u6743\u91cd\u521d\u59cb\u5316\u65b9\u6848\uff0c\u7a33\u5b9a\u6781\u6df1\u53d8\u538b\u5668\u7684\u65b9\u6cd5\u3002\u8fd9\u7ed3\u5408\u4e86 postLayerNorm \u7684\u6027\u80fd\u548c pre-LayerNorm \u7684\u7a33\u5b9a\u6027\u3002\u5373\u4f7f\u6ca1\u6709\u5b66\u4e60\u901f\u7387\u9884\u70ed\uff0c\u5e26\u6709DeepNorms\u7684\u53d8\u5f62\u91d1\u521a\u4e5f\u5e94\u8be5\u4fdd\u6301\u7a33\u5b9a\u3002</p>\n<p>\u672c\u6587\u9996\u5148\u8868\u660e\uff0c\u5728\u7a33\u5b9a\u8bad\u7ec3\u671f\u95f4\uff0c\u56fe\u5c42\u8f93\u51fa\uff08\u9488\u5bf9\u76f8\u540c\u8f93\u5165\uff09\u7684\u53d8\u5316\u4f1a\u9010\u6e10\u53d8\u5316\uff1b\u5f53\u4e0d\u7a33\u5b9a\u65f6\uff0c\u5b83\u5728\u6700\u521d\u7684\u8bad\u7ec3\u6b65\u9aa4\u4e2d\u4f1a\u8fc5\u901f\u53d8\u5316\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u5c06\u6743\u91cd\u521d\u59cb\u5316\u4e3a\u5c0f\u503c\u4ee5\u53ca\u8bad\u7ec3\u7a33\u5b9a\u65f6\u8fdb\u884c\u5b66\u4e60\u7387\u9884\u70ed\u65f6\u3002\u4ed6\u4eec\u4f7f\u7528\u4fdd\u6301\u5bf9\u56fe\u5c42\u8f93\u51fa\u7684\u66f4\u6539\u8f83\u5c0f\u7684\u60f3\u6cd5\u6765\u63a8\u5bfc\u51fa\u65b0\u7684\u6807\u51c6\u5316\u548c\u6743\u91cd\u521d\u59cb\u5316\u673a\u5236\u3002</p>\n<h2>\u6743\u91cd\u521d\u59cb\u5316</h2>\n<p>\u901a\u5e38\uff0c\u6743\u91cd\u662f\u4f7f\u7528 Xavier \u6216 Kaiming \u521d\u59cb\u5316\u8fdb\u884c\u521d\u59cb\u5316\u7684\u3002\u8fd9\u5f20\u7eb8<span translate=no>_^_1_^_</span>\u6839\u636e\u53d8\u538b\u5668\u7684\u5927\u5c0f\u5c06\u6743\u91cd\u7f29\u653e\uff08\u8bbe\u7f6e\u589e\u76ca\uff09\u4e00\u4e2a\u5e38\u6570\u3002</p>\n<p>DeepNorm \u5efa\u8bae\u7f29\u653e<a href=\"../../transformers/feed_forward.html\">\u524d\u9988\u7f51\u7edc</a>\u4e2d\u4e24\u4e2a\u7ebf\u6027\u53d8\u6362\u3001\u4ef7\u503c\u6295\u5f71\u53d8\u6362\u548c\u6ce8\u610f\u529b\u5c42\u8f93\u51fa\u6295\u5f71\u53d8\u6362\u7684\u6743\u91cd\u3002\u8fd9\u4e9b\u53d8\u6362\u7684\u6743\u91cd\u6309\u6bd4\u4f8b\u7f29\u653e\uff08\u589e\u76ca\u7b49\u4e8e\uff09<span translate=no>_^_2_^_</span>\u3002</p>\n<p>\u6269\u5c55\u662f\u5728\u4e2d\u5b9e\u73b0\u7684</p>\n<h2>\u6807\u51c6\u5316\u51fd\u6570</h2>\n<p><span translate=no>_^_3_^_</span></p>\n<p>\u5176\u4e2d\uff0c<span translate=no>_^_4_^_</span>\u662f\u53d6\u51b3\u4e8e\u53d8\u538b\u5668\u6df1\u5ea6\u7684\u5e38\u6570\uff0c<span translate=no>_^_5_^_</span>\u662f<a href=\"../layer_norm/index.html\">\u5c42\u5f52\u4e00\u5316</a>\uff0c<span translate=no>_^_6_^_</span>\u662f<span translate=no>_^_7_^_</span>\u7b2c -8 \u4e2a\u53d8\u538b\u5668\u5b50\u5c42\u7684\u51fd\u6570\uff08FFN \u6216\u6ce8\u610f\u529b\uff09\u3002</p>\n<p>\u6b64\u51fd\u6570\u7528\u4e8e\u66ff\u6362 postLayerNorm\u3002</p>\n<h2><span translate=no>_^_8_^_</span>\u548c<span translate=no>_^_9_^_</span>\u5e38\u91cf</h2>\n<span translate=no>_^_10_^_</span><p>\u5176\u4e2d<span translate=no>_^_11_^_</span>\u662f\u7f16\u7801\u5668\u4e2d\u7684\u5c42\u6570\uff0c<span translate=no>_^_12_^_</span>\u662f\u89e3\u7801\u5668\u4e2d\u7684\u5c42\u6570\u3002</p>\n<p>\u8bf7\u53c2\u8003<a href=\"https://papers.labml.ai/paper/2203.00555\">\u8bba\u6587</a>\u8fdb\u884c\u63a8\u5bfc\u3002</p>\n<p><a href=\"experiment.html\">\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528 DeepNorm \u7684\u5b9e\u9a8c\u5b9e\u73b0</a>\u3002</p>\n",
 "<h2>DeepNorm Normalization</h2>\n<p><span translate=no>_^_0_^_</span></p>\n": "<h2>\u6df1\u5ea6\u89c4\u8303\u6807\u51c6\u5316</h2>\n<p><span translate=no>_^_0_^_</span></p>\n",
 "<h2>Transformer Decoder Layer with DeepNorm</h2>\n<p>This implements a transformer decoder layer with DeepNorm. Encoder layers will have a similar form.</p>\n": "<h2>\u5e26 DeepNorm \u7684\u53d8\u538b\u5668\u89e3\u7801\u5668</h2>\n<p>\u8fd9\u5b9e\u73b0\u4e86\u4f7f\u7528 DeepNorm \u7684\u53d8\u538b\u5668\u89e3\u7801\u5668\u5c42\u3002\u7f16\u7801\u5668\u5c42\u5c06\u5177\u6709\u7c7b\u4f3c\u7684\u5f62\u5f0f\u3002</p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p>Attention output project </p>\n": "<p>\u6ce8\u610f\u8f93\u51fa\u9879\u76ee</p>\n",
 "<p>Attention value projection </p>\n": "<p>\u6ce8\u610f\u529b\u503c\u9884\u6d4b</p>\n",
 "<p>Create causal mask </p>\n": "<p>\u521b\u5efa\u56e0\u679c\u9762\u5177</p>\n",
 "<p>DeepNorms after attention and feed forward network </p>\n": "<p>DeepNorms \u8ffd\u968f\u5173\u6ce8\u548c\u524d\u9988\u7f51\u7edc</p>\n",
 "<p>Feed forward network linear transformations </p>\n": "<p>\u524d\u9988\u7f51\u7edc\u7ebf\u6027\u53d8\u6362</p>\n",
 "<p>Initialize <span translate=no>_^_0_^_</span> </p>\n": "<p>\u521d\u59cb\u5316<span translate=no>_^_0_^_</span></p>\n",
 "<p>Pass through the feed-forward network </p>\n": "<p>\u901a\u8fc7\u524d\u9988\u7f51\u7edc</p>\n",
 "<p>Run through self attention, i.e. keys and values are from self </p>\n": "<p>\u901a\u8fc7\u81ea\u6211\u5173\u6ce8\uff0c\u5373\u5173\u952e\u548c\u4ef7\u503c\u6765\u81ea\u81ea\u6211</p>\n",
 "<p>Scale weights after initialization </p>\n": "<p>\u521d\u59cb\u5316\u540e\u7f29\u653e\u6743\u91cd</p>\n",
 "<p>Subsequent mask, will mask out tokens from seeing future tokens </p>\n": "<p>\u540e\u7eed\u7684\u63a9\u7801\uff0c\u5c06\u63a9\u76d6\u4ee4\u724c\u4ee5\u514d\u770b\u5230\u672a\u6765\u7684\u4ee3\u5e01</p>\n",
 "<p>The mask will be initialized on the first call </p>\n": "<p>\u63a9\u7801\u5c06\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u521d\u59cb\u5316</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span>  are the embeddings of shape <span translate=no>_^_1_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u5f62\u72b6\u7684\u5d4c\u5165<span translate=no>_^_1_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span>  is <span translate=no>_^_1_^_</span> </li>\n<li><span translate=no>_^_2_^_</span>  is the shape for LayerNorm <span translate=no>_^_3_^_</span> </li>\n<li><span translate=no>_^_4_^_</span>  is <span translate=no>_^_5_^_</span> for LayerNorm </li>\n<li><span translate=no>_^_6_^_</span>  is a flag indicating whether to do an elementwise transformation in LayerNorm</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f<span translate=no>_^_1_^_</span></li>\n<li><span translate=no>_^_2_^_</span>\u662f LayerNorm \u7684\u5f62\u72b6<span translate=no>_^_3_^_</span></li>\n<li><span translate=no>_^_4_^_</span>\u662f<span translate=no>_^_5_^_</span>\u4e3a LayerNorm \u51c6\u5907\u7684</li>\n<li><span translate=no>_^_6_^_</span>\u662f\u4e00\u4e2a\u6807\u5fd7\uff0c\u6307\u793a\u662f\u5426\u5728 LayerNorm \u4e2d\u8fdb\u884c\u9010\u5143\u7d20\u8f6c\u6362</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span>  is the output from the previous layer <span translate=no>_^_1_^_</span> </li>\n<li><span translate=no>_^_2_^_</span>  is the output of the current sub-layer <span translate=no>_^_3_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u524d\u4e00\u5c42\u7684\u8f93\u51fa<span translate=no>_^_1_^_</span></li>\n<li><span translate=no>_^_2_^_</span>\u662f\u5f53\u524d\u5b50\u5c42\u7684\u8f93\u51fa<span translate=no>_^_3_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span>  is the token embedding size </li>\n<li><span translate=no>_^_1_^_</span>  is the self attention module </li>\n<li><span translate=no>_^_2_^_</span>  is the feed forward module </li>\n<li><span translate=no>_^_3_^_</span>  is <span translate=no>_^_4_^_</span> coefficient in DeepNorm </li>\n<li><span translate=no>_^_5_^_</span>  is <span translate=no>_^_6_^_</span> constant for scaling weights initialization</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u4ee4\u724c\u5d4c\u5165\u7684\u5927\u5c0f</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u81ea\u6211\u5173\u6ce8\u6a21\u5757</li>\n<li><span translate=no>_^_2_^_</span>\u662f\u524d\u9988\u6a21\u5757</li>\n<li><span translate=no>_^_3_^_</span>\u662f DeepNorm \u4e2d\u7684<span translate=no>_^_4_^_</span>\u7cfb\u6570</li>\n</ul><li><span translate=no>_^_5_^_</span>\u5bf9\u4e8e\u7f29\u653e\u6743\u91cd\u521d\u59cb\u5316\u6765\u8bf4\u662f<span translate=no>_^_6_^_</span>\u5e38\u6570</li>\n",
 "A PyTorch implementation/tutorial of DeepNorm from paper DeepNet: Scaling Transformers to 1,000 Layers.": "\u6765\u81ea\u8bba\u6587 DeepNet\uff1a\u5c06\u53d8\u5f62\u91d1\u521a\u7f29\u653e\u5230 1000 \u5c42\u7684 PyTorch \u5b9e\u73b0/\u6559\u7a0b\u3002",
 "DeepNorm": "\u6df1\u5ea6\u89c4\u8303"
}