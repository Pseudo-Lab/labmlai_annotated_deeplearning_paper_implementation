{
 "<h1>Batch-Channel Normalization</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of Batch-Channel Normalization from the paper  <a href=\"https://papers.labml.ai/paper/1903.10520\">Micro-Batch Training with Batch-Channel Normalization and Weight Standardization</a>. We also have an <a href=\"../weight_standardization/index.html\">annotated implementation of Weight Standardization</a>.</p>\n<p>Batch-Channel Normalization performs batch normalization followed by a channel normalization (similar to a <a href=\"../group_norm/index.html\">Group Normalization</a>. When the batch size is small a running mean and variance is used for batch normalization.</p>\n<p>Here is <a href=\"../weight_standardization/experiment.html\">the training code</a> for training a VGG network that uses weight standardization to classify CIFAR-10 data.</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/normalization/weight_standardization/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n": "<h1>\u6279\u5904\u7406\u4fe1\u9053\u6807\u51c6\u5316</h1>\n<p>\u8fd9\u662f <a href=\"https://pytorch.org\">PyTorch</a> \u5b9e\u73b0\u7684\u6279\u5904\u7406\u901a\u9053\u6807\u51c6\u5316\uff0c\u6765\u81ea\u8bba\u6587\u300a<a href=\"https://papers.labml.ai/paper/1903.10520\">\u4f7f\u7528\u6279\u5904\u7406\u901a\u9053\u6807\u51c6\u5316\u548c\u6743\u91cd\u6807\u51c6\u5316\u8fdb\u884c\u5fae\u6279\u91cf\u8bad\u7ec3</a>\u300b\u3002\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a<a href=\"../weight_standardization/index.html\">\u5e26\u6ce8\u91ca\u7684\u91cd\u91cf\u6807\u51c6\u5316\u5b9e\u73b0\u65b9\u6848</a>\u3002</p>\n<p>\u6279\u5904\u7406\u901a\u9053\u6807\u51c6\u5316\u5148\u6267\u884c\u6279\u91cf\u6807\u51c6\u5316\uff0c\u7136\u540e\u8fdb\u884c\u4fe1\u9053\u6807\u51c6\u5316\uff08\u7c7b\u4f3c\u4e8e<a href=\"../group_norm/index.html\">\u7ec4\u6807\u51c6\u5316</a>\uff09\u3002\u5f53\u6279\u6b21\u5927\u5c0f\u5f88\u5c0f\u65f6\uff0c\u4f7f\u7528\u8fd0\u884c\u5747\u503c\u548c\u65b9\u5dee\u8fdb\u884c\u6279\u91cf\u6807\u51c6\u5316\u3002</p>\n<p><a href=\"../weight_standardization/experiment.html\">\u4ee5\u4e0b\u662f\u8bad\u7ec3 VGG \u7f51\u7edc\u7684\u8bad\u7ec3\u4ee3\u7801</a>\uff0c\u8be5\u7f51\u7edc\u4f7f\u7528\u6743\u91cd\u6807\u51c6\u5316\u5bf9 CIFAR-10 \u6570\u636e\u8fdb\u884c\u5206\u7c7b\u3002</p>\n<p><a href=\"https://colab.research.google.com/github/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/normalization/weight_standardization/experiment.ipynb\"><span translate=no>_^_0_^_</span></a></p>\n",
 "<h2>Batch-Channel Normalization</h2>\n<p>This first performs a batch normalization - either <a href=\"../batch_norm/index.html\">normal batch norm</a> or a batch norm with estimated mean and variance (exponential mean/variance over multiple batches). Then a channel normalization performed.</p>\n": "<h2>\u6279\u91cf\u4fe1\u9053\u89c4\u8303\u5316</h2>\n<p>\u8fd9\u9996\u5148\u6267\u884c\u6279\u6b21\u5f52\u4e00\u5316\u2014\u2014\u6b63<a href=\"../batch_norm/index.html\">\u6001\u6279\u6b21\u8303</a>\u6570\u6216\u5177\u6709\u4f30\u8ba1\u5747\u503c\u548c\u65b9\u5dee\uff08\u591a\u4e2a\u6279\u6b21\u7684\u6307\u6570\u5747\u503c/\u65b9\u5dee\uff09\u7684\u6279\u6b21\u8303\u6570\u3002\u7136\u540e\u6267\u884c\u4e86\u4fe1\u9053\u6807\u51c6\u5316\u3002</p>\n",
 "<h2>Channel Normalization</h2>\n<p>This is similar to <a href=\"../group_norm/index.html\">Group Normalization</a> but affine transform is done group wise.</p>\n": "<h2>\u9891\u9053\u89c4\u8303\u5316</h2>\n<p>\u8fd9\u4e0e<a href=\"../group_norm/index.html\">\u7ec4\u5f52\u4e00\u5316</a>\u7c7b\u4f3c\uff0c\u4f46\u4eff\u5c04\u53d8\u6362\u662f\u6309\u7ec4\u8fdb\u884c\u7684\u3002</p>\n",
 "<h2>Estimated Batch Normalization</h2>\n<p>When input <span translate=no>_^_0_^_</span> is a batch of image representations, where <span translate=no>_^_1_^_</span> is the batch size, <span translate=no>_^_2_^_</span> is the number of channels, <span translate=no>_^_3_^_</span> is the height and <span translate=no>_^_4_^_</span> is the width. <span translate=no>_^_5_^_</span> and <span translate=no>_^_6_^_</span>.</p>\n<p><span translate=no>_^_7_^_</span></p>\n<p>where,</p>\n<span translate=no>_^_8_^_</span><p>are the running mean and variances. <span translate=no>_^_9_^_</span> is the momentum for calculating the exponential mean.</p>\n": "<h2>\u9884\u8ba1\u6279\u6b21\u89c4\u8303\u5316</h2>\n<p>\u5f53\u8f93\u5165<span translate=no>_^_0_^_</span>\u662f\u4e00\u6279\u56fe\u50cf\u8868\u793a\u65f6\uff0c\u5176\u4e2d<span translate=no>_^_1_^_</span>\u662f\u6279\u6b21\u5927\u5c0f\uff0c<span translate=no>_^_2_^_</span>\u662f\u901a\u9053\u6570\uff0c<span translate=no>_^_3_^_</span>\u662f\u9ad8\u5ea6\u548c<span translate=no>_^_4_^_</span>\u662f\u5bbd\u5ea6\u3002<span translate=no>_^_5_^_</span>\u548c<span translate=no>_^_6_^_</span>\u3002</p>\n<p><span translate=no>_^_7_^_</span></p>\n<p>\u5728\u54ea\u91cc\uff0c</p>\n<span translate=no>_^_8_^_</span><p>\u662f\u8fd0\u884c\u5747\u503c\u548c\u65b9\u5dee\u3002<span translate=no>_^_9_^_</span>\u662f\u8ba1\u7b97\u6307\u6570\u5747\u503c\u7684\u52a8\u91cf\u3002</p>\n",
 "<p> <span translate=no>_^_0_^_</span> is a tensor of shape <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> denotes any number of (possibly 0) dimensions.  For example, in an image (2D) convolution this will be <span translate=no>_^_3_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span>\u662f\u5f62\u72b6\u5f20\u91cf<span translate=no>_^_1_^_</span>\u3002<span translate=no>_^_2_^_</span>\u8868\u793a\u4efb\u610f\u6570\u91cf\uff08\u53ef\u80fd\u4e3a 0\uff09\u7684\u7ef4\u5ea6\u3002\u4f8b\u5982\uff0c\u5728\u56fe\u50cf\uff082D\uff09\u5377\u79ef\u4e2d\uff0c\u8fd9\u5c06\u662f<span translate=no>_^_3_^_</span></p>\n",
 "<p>Calculate the mean across first and last dimensions; <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u7b2c\u4e00\u7ef4\u548c\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5e73\u5747\u503c\uff1b<span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the mean across last dimension; i.e. the means for each sample and channel group <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5747\u503c\uff1b\u5373\u6bcf\u4e2a\u6837\u672c\u548c\u901a\u9053\u7ec4\u7684\u5747\u503c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the squared mean across first and last dimensions; <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u7b2c\u4e00\u7ef4\u548c\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5747\u65b9\u503c\uff1b<span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the squared mean across last dimension; i.e. the means for each sample and channel group <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5747\u65b9\u503c\uff1b\u5373\u6bcf\u4e2a\u6837\u672c\u548c\u901a\u9053\u7ec4\u7684\u5747\u503c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Channel normalization </p>\n": "<p>\u4fe1\u9053\u89c4\u8303\u5316</p>\n",
 "<p>Channel wise transformation parameters </p>\n": "<p>\u9891\u9053\u53d8\u6362\u53c2\u6570</p>\n",
 "<p>Get the batch size </p>\n": "<p>\u83b7\u53d6\u6279\u6b21\u5927\u5c0f</p>\n",
 "<p>Keep old shape </p>\n": "<p>\u4fdd\u6301\u65e7\u7684\u5f62\u72b6</p>\n",
 "<p>Keep the original shape </p>\n": "<p>\u4fdd\u6301\u539f\u59cb\u5f62\u72b6</p>\n",
 "<p>No backpropagation through <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> </p>\n": "<p>\u6ca1\u6709\u901a\u8fc7<span translate=no>_^_0_^_</span>\u548c\u7684\u53cd\u5411\u4f20\u64ad<span translate=no>_^_1_^_</span></p>\n",
 "<p>Normalize <span translate=no>_^_0_^_</span> </p>\n": "<p>\u89c4\u8303\u5316<span translate=no>_^_0_^_</span></p>\n",
 "<p>Parameters for affine transformation.</p>\n<p><em>Note that these transforms are per group, unlike in group norm where they are transformed channel-wise.</em> </p>\n": "<p>\u4eff\u5c04\u53d8\u6362\u7684\u53c2\u6570\u3002</p>\n<p><em>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u53d8\u6362\u662f\u6309\u7ec4\u8fdb\u884c\u7684\uff0c\u8fd9\u4e0e\u7ec4\u89c4\u8303\u4e0d\u540c\uff0c\u5b83\u4eec\u662f\u6309\u901a\u9053\u53d8\u6362\u7684\u3002</em></p>\n",
 "<p>Reshape into <span translate=no>_^_0_^_</span> </p>\n": "<p>\u91cd\u5851\u6210<span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape to original and return </p>\n": "<p>\u91cd\u5851\u4e3a\u539f\u59cb\u5f62\u72b6\u7136\u540e\u8fd4\u56de</p>\n",
 "<p>Sanity check to make sure the number of features is correct </p>\n": "<p>\u8fdb\u884c\u5065\u5168\u6027\u68c0\u67e5\u4ee5\u786e\u4fdd\u8981\u7d20\u6570\u91cf\u6b63\u786e</p>\n",
 "<p>Sanity check to make sure the number of features is the same </p>\n": "<p>\u8fdb\u884c\u5065\u5168\u6027\u68c0\u67e5\u4ee5\u786e\u4fdd\u8981\u7d20\u6570\u91cf\u76f8\u540c</p>\n",
 "<p>Scale and shift <span translate=no>_^_0_^_</span> </p>\n": "<p>\u7f29\u653e\u548c\u79fb\u52a8<span translate=no>_^_0_^_</span></p>\n",
 "<p>Scale and shift group-wise <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6309\u7ec4\u7f29\u653e\u548c\u79fb\u52a8<span translate=no>_^_0_^_</span></p>\n",
 "<p>Tensors for <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span>\u548c\u7684\u5f20\u91cf<span translate=no>_^_1_^_</span></p>\n",
 "<p>Update <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> in training mode only </p>\n": "<p>\u66f4\u65b0<span translate=no>_^_0_^_</span>\u4e14\u4ec5<span translate=no>_^_1_^_</span>\u5728\u8bad\u7ec3\u6a21\u5f0f\u4e0b</p>\n",
 "<p>Update exponential moving averages</p>\n<span translate=no>_^_0_^_</span><p> </p>\n": "<p>\u66f4\u65b0\u6307\u6570\u79fb\u52a8\u5e73\u5747\u7ebf</p>\n<span translate=no>_^_0_^_</span><p></p>\n",
 "<p>Use estimated batch norm or normal batch norm. </p>\n": "<p>\u4f7f\u7528\u4f30\u8ba1\u7684\u6279\u6b21\u89c4\u8303\u6216\u666e\u901a\u6279\u6b21\u89c4\u8303\u3002</p>\n",
 "<p>Variance for each feature <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u4e2a\u8981\u7d20\u7684\u65b9\u5dee<span translate=no>_^_0_^_</span></p>\n",
 "<p>Variance for each sample and feature group <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u4e2a\u6837\u672c\u548c\u7279\u5f81\u7ec4\u7684\u65b9\u5dee<span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of features in the input </li>\n<li><span translate=no>_^_1_^_</span> is <span translate=no>_^_2_^_</span>, used in <span translate=no>_^_3_^_</span> for numerical stability </li>\n<li><span translate=no>_^_4_^_</span> is the momentum in taking the exponential moving average </li>\n<li><span translate=no>_^_5_^_</span> is whether to use running mean and variance for batch norm</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u8f93\u5165\u4e2d\u7684\u8981\u7d20\u6570</li>\n<li><span translate=no>_^_1_^_</span>\u662f<span translate=no>_^_2_^_</span>\uff0c<span translate=no>_^_3_^_</span>\u7528\u4e8e\u6570\u503c\u7a33\u5b9a\u6027</li>\n<li><span translate=no>_^_4_^_</span>\u662f\u53d6\u6307\u6570\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u52a8\u91cf</li>\n<li><span translate=no>_^_5_^_</span>\u662f\u5426\u4f7f\u7528\u8fd0\u884c\u5747\u503c\u548c\u65b9\u5dee\u4f5c\u4e3a\u6279\u6b21\u8303\u6570</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of features in the input </li>\n<li><span translate=no>_^_1_^_</span> is the number of groups the features are divided into </li>\n<li><span translate=no>_^_2_^_</span> is <span translate=no>_^_3_^_</span>, used in <span translate=no>_^_4_^_</span> for numerical stability </li>\n<li><span translate=no>_^_5_^_</span> is the momentum in taking the exponential moving average </li>\n<li><span translate=no>_^_6_^_</span> is whether to use running mean and variance for batch norm</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u8f93\u5165\u4e2d\u7684\u8981\u7d20\u6570</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u8981\u7d20\u88ab\u5212\u5206\u5230\u7684\u7ec4\u7684\u6570\u91cf</li>\n<li><span translate=no>_^_2_^_</span>\u662f<span translate=no>_^_3_^_</span>\uff0c<span translate=no>_^_4_^_</span>\u7528\u4e8e\u6570\u503c\u7a33\u5b9a\u6027</li>\n<li><span translate=no>_^_5_^_</span>\u662f\u53d6\u6307\u6570\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u52a8\u91cf</li>\n<li><span translate=no>_^_6_^_</span>\u662f\u5426\u4f7f\u7528\u8fd0\u884c\u5747\u503c\u548c\u65b9\u5dee\u4f5c\u4e3a\u6279\u6b21\u8303\u6570</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of groups the features are divided into </li>\n<li><span translate=no>_^_1_^_</span> is the number of features in the input </li>\n<li><span translate=no>_^_2_^_</span> is <span translate=no>_^_3_^_</span>, used in <span translate=no>_^_4_^_</span> for numerical stability </li>\n<li><span translate=no>_^_5_^_</span> is whether to scale and shift the normalized value</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u662f\u8981\u7d20\u88ab\u5212\u5206\u5230\u7684\u7ec4\u7684\u6570\u91cf</li>\n<li><span translate=no>_^_1_^_</span>\u662f\u8f93\u5165\u4e2d\u7684\u8981\u7d20\u6570</li>\n<li><span translate=no>_^_2_^_</span>\u662f<span translate=no>_^_3_^_</span>\uff0c<span translate=no>_^_4_^_</span>\u7528\u4e8e\u6570\u503c\u7a33\u5b9a\u6027</li>\n<li><span translate=no>_^_5_^_</span>\u662f\u5426\u7f29\u653e\u548c\u79fb\u52a8\u5f52\u4e00\u5316\u503c</li></ul>\n",
 "A PyTorch implementation/tutorial of Batch-Channel Normalization.": "\u6279\u91cf\u4fe1\u9053\u89c4\u8303\u5316\u7684 PyTorch \u5b9e\u73b0/\u6559\u7a0b\u3002",
 "Batch-Channel Normalization": "\u6279\u91cf\u4fe1\u9053\u89c4\u8303\u5316"
}