{
 "<h1>Deep Convolutional Generative Adversarial Networks (DCGAN)</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of paper <a href=\"https://papers.labml.ai/paper/1511.06434\">Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks</a>.</p>\n<p>This implementation is based on the <a href=\"https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html\">PyTorch DCGAN Tutorial</a>.</p>\n": "<h1>\u0d9c\u0dd0\u0db9\u0dd4\u0dbb\u0dd4\u0dc3\u0d82\u0dc0\u0dc4\u0db1 \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0d85\u0dc4\u0dd2\u0dad\u0d9a\u0dbb \u0da2\u0dcf\u0dbd (DCGAN)</h1>\n<p>\u0db8\u0dd9\u0dba <a href=\"https://pytorch.org\">PyTorch</a> <a href=\"https://papers.labml.ai/paper/1511.06434\">\u0d9c\u0dd0\u0db9\u0dd4\u0dbb\u0dd4 \u0dc3\u0d82\u0d9a\u0ddd\u0da0\u0db1 \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0d85\u0dc4\u0dd2\u0dad\u0d9a\u0dbb \u0da2\u0dcf\u0dbd\u0dba\u0db1\u0dca \u0dc3\u0db8\u0d9f \u0d9a\u0da9\u0daf\u0dcf\u0dc3\u0dd2 \u0d85\u0db0\u0dd3\u0d9a\u0dca\u0dc2\u0dab\u0dba \u0db1\u0ddc\u0d9a\u0dc5 \u0db1\u0dd2\u0dba\u0ddd\u0da2\u0db1 \u0d89\u0d9c\u0dd9\u0db1\u0dd4\u0db8\u0dca</a> \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dba\u0dd2. </p>\n<p>\u0db8\u0dd9\u0db8\u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8 <a href=\"https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html\">PyTorch DCGAN \u0db1\u0dd2\u0db6\u0db1\u0dca\u0db0\u0db1\u0dba</a>\u0db8\u0dad \u0db4\u0daf\u0db1\u0db8\u0dca \u0dc0\u0dda. </p>\n",
 "<h3>Convolutional Discriminator Network</h3>\n": "<h3>\u0dc3\u0d82\u0dc0\u0dd2\u0da0\u0dca\u0da1\u0dda\u0daf\u0d9a\u0dc0\u0dd2\u0dc3\u0d82\u0dc0\u0dcf\u0daf\u0dd3 \u0da2\u0dcf\u0dbd\u0dba</h3>\n",
 "<h3>Convolutional Generator Network</h3>\n<p>This is similar to the de-convolutional network used for CelebA faces, but modified for MNIST images.</p>\n<p><span translate=no>_^_0_^_</span></p>\n": "<h3>\u0dc3\u0d82\u0dc0\u0dbb\u0dca\u0dad\u0da2\u0dcf\u0dbd \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0dba\u0db1\u0dca\u0dad\u0dca\u0dbb\u0dba</h3>\n<p>\u0db8\u0dd9\u0dba\u0dc3\u0dd9\u0dbd\u0dd9\u0db6\u0dcf \u0db8\u0dd4\u0dc4\u0dd4\u0dab\u0dd4 \u0dc3\u0db3\u0dc4\u0dcf \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb\u0db1 \u0daf-\u0dc3\u0d82\u0dc0\u0dc4\u0db1 \u0da2\u0dcf\u0dbd\u0dba\u0da7 \u0dc3\u0db8\u0dcf\u0db1 \u0dc0\u0db1 \u0db1\u0db8\u0dd4\u0dad\u0dca MNIST \u0dbb\u0dd6\u0db4 \u0dc3\u0db3\u0dc4\u0dcf \u0dc0\u0dd9\u0db1\u0dc3\u0dca \u0d9a\u0dbb \u0d87\u0dad. </p>\n<p><span translate=no>_^_0_^_</span></p>\n",
 "<p>Change from shape <span translate=no>_^_0_^_</span> to <span translate=no>_^_1_^_</span> </p>\n": "<p>\u0dc4\u0dd0\u0da9\u0dba\u0dd9\u0db1\u0dca\u0dc0\u0dd9\u0db1\u0dc3\u0dca <span translate=no>_^_0_^_</span> \u0d9a\u0dbb\u0db1\u0dca\u0db1 <span translate=no>_^_1_^_</span> </p>\n",
 "<p>The input is <span translate=no>_^_0_^_</span> with 100 channels </p>\n": "<p>\u0d86\u0daf\u0dcf\u0db1\u0dba\u0db1\u0dcf\u0dbd\u0dd2\u0d9a\u0dcf 100 \u0d9a\u0dca <span translate=no>_^_0_^_</span> \u0dc3\u0db8\u0d9f \u0d87\u0dad </p>\n",
 "<p>The input is <span translate=no>_^_0_^_</span> with one channel </p>\n": "<p>\u0d86\u0daf\u0dcf\u0db1\u0dba\u0d91\u0d9a\u0dca \u0db1\u0dcf\u0dbd\u0dd2\u0d9a\u0dcf\u0dc0\u0d9a\u0dca <span translate=no>_^_0_^_</span> \u0dc3\u0db8\u0d9f \u0d87\u0dad </p>\n",
 "<p>This gives <span translate=no>_^_0_^_</span> </p>\n": "<p>\u0db8\u0dd9\u0dba\u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0dba\u0dd2 <span translate=no>_^_0_^_</span> </p>\n",
 "<p>This gives <span translate=no>_^_0_^_</span> output </p>\n": "<p>\u0db8\u0dd9\u0dba <span translate=no>_^_0_^_</span> \u0db4\u0dca\u0dbb\u0dad\u0dd2\u0daf\u0dcf\u0db1\u0dba \u0dbd\u0db6\u0dcf \u0daf\u0dd9\u0dba\u0dd2 </p>\n",
 "<p>We import the <a href=\"../original/experiment.html\">simple gan experiment</a> and change the generator and discriminator networks </p>\n": "<p>\u0d85\u0db4\u0dd2 <a href=\"../original/experiment.html\">\u0dc3\u0dbb\u0dbd \u0d9c\u0dd0\u0db1\u0dca \u0d85\u0dad\u0dca\u0dc4\u0daf\u0dcf \u0db6\u0dd0\u0dbd\u0dd3\u0db8\u0dca</a> \u0d86\u0db1\u0dba\u0db1\u0dba \u0d9a\u0dbb \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0dba\u0db1\u0dca\u0dad\u0dca\u0dbb\u0dba \u0dc3\u0dc4 \u0dc0\u0dd9\u0db1\u0dc3\u0dca\u0d9a\u0db8\u0dca \u0d9a\u0dbb\u0db1 \u0da2\u0dcf\u0dbd \u0dc0\u0dd9\u0db1\u0dc3\u0dca \u0d9a\u0dbb\u0db8\u0dd4 </p>\n",
 "A simple PyTorch implementation/tutorial of Deep Convolutional Generative Adversarial Networks (DCGAN).": "\u0d9c\u0dd0\u0db9\u0dd4\u0dbb\u0dd4 \u0dc3\u0d82\u0dba\u0dd4\u0d9a\u0dca\u0dad \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0d85\u0dc4\u0dd2\u0dad\u0d9a\u0dbb \u0da2\u0dcf\u0dbd (DCGAN) \u0dc3\u0dbb\u0dbd PyTorch \u0d9a\u0dca\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a \u0d9a\u0dd2\u0dbb\u0dd3\u0db8/\u0db1\u0dd2\u0db6\u0db1\u0dca\u0db0\u0db1\u0dba.",
 "Deep Convolutional Generative Adversarial Networks (DCGAN)": "\u0d9c\u0dd0\u0db9\u0dd4\u0dbb\u0dd4 \u0dc3\u0d82\u0dc0\u0dc4\u0db1 \u0d8b\u0dad\u0dca\u0db4\u0dcf\u0daf\u0d9a \u0d85\u0dc4\u0dd2\u0dad\u0d9a\u0dbb \u0da2\u0dcf\u0dbd (DCGAN)"
}