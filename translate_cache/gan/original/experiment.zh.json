{
 "<h1>Generative Adversarial Networks experiment with MNIST</h1>\n": "<h1>\u4f7f\u7528 MNIST \u8fdb\u884c\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u5b9e\u9a8c</h1>\n",
 "<h2>Configurations</h2>\n<p>This extends MNIST configurations to get the data loaders and Training and validation loop configurations to simplify our implementation.</p>\n": "<h2>\u914d\u7f6e</h2>\n<p>\u8fd9\u6269\u5c55\u4e86 MNIST \u914d\u7f6e\u4ee5\u83b7\u53d6\u6570\u636e\u52a0\u8f7d\u5668\u4ee5\u53ca\u8bad\u7ec3\u548c\u9a8c\u8bc1\u5faa\u73af\u914d\u7f6e\uff0c\u4ece\u800c\u7b80\u5316\u4e86\u6211\u4eec\u7684\u5b9e\u73b0\u3002</p>\n",
 "<h3>Simple MLP Discriminator</h3>\n<p>This has three linear layers of decreasing size with <span translate=no>_^_0_^_</span> activations. The final layer has a single output that gives the logit of whether input is real or fake. You can get the probability by calculating the sigmoid of it.</p>\n": "<h3>\u7b80\u5355\u7684 MLP \u9274\u522b\u5668</h3>\n<p>\u5b83\u6709\u4e09\u4e2a\u7ebf\u6027\u5c42\uff0c\u968f\u7740<span translate=no>_^_0_^_</span>\u6fc0\u6d3b\u7684\u5927\u5c0f\u9010\u6e10\u51cf\u5c0f\u3002\u6700\u540e\u4e00\u5c42\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u8f93\u51fa\uff0c\u5b83\u7ed9\u51fa\u4e86\u8f93\u5165\u662f\u771f\u5b9e\u8fd8\u662f\u5047\u7684 logit\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u5b83\u7684\u4e59\u72b6\u7ed3\u80a0\u6765\u83b7\u5f97\u6982\u7387\u3002</p>\n",
 "<h3>Simple MLP Generator</h3>\n<p>This has three linear layers of increasing size with <span translate=no>_^_0_^_</span> activations. The final layer has a <span translate=no>_^_1_^_</span> activation.</p>\n": "<h3>\u7b80\u5355\u7684 MLP \u751f\u6210\u5668</h3>\n<p>\u5b83\u6709\u4e09\u4e2a\u7ebf\u6027\u5c42\uff0c\u968f\u7740<span translate=no>_^_0_^_</span>\u6fc0\u6d3b\u7684\u5927\u5c0f\u4e0d\u65ad\u589e\u52a0\u3002\u6700\u540e\u4e00\u5c42\u5df2\u6fc0<span translate=no>_^_1_^_</span>\u6d3b\u3002</p>\n",
 "<p> <span translate=no>_^_0_^_</span></p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p> Calculate discriminator loss</p>\n": "<p>\u8ba1\u7b97\u9274\u522b\u5668\u635f\u5931</p>\n",
 "<p> Calculate generator loss</p>\n": "<p>\u8ba1\u7b97\u53d1\u7535\u673a\u635f\u8017</p>\n",
 "<p> Initializations</p>\n": "<p>\u521d\u59cb\u5316</p>\n",
 "<p> Take a training step</p>\n": "<p>\u8fc8\u51fa\u8bad\u7ec3\u4e00\u6b65</p>\n",
 "<p>Get MNIST images </p>\n": "<p>\u83b7\u53d6 MNIST \u56fe\u7247</p>\n",
 "<p>Get discriminator loss </p>\n": "<p>\u83b7\u5f97\u9274\u522b\u5668\u635f\u5931</p>\n",
 "<p>Increment step in training mode </p>\n": "<p>\u5728\u8bad\u7ec3\u6a21\u5f0f\u4e2d\u589e\u52a0\u6b65\u6570</p>\n",
 "<p>Log stuff </p>\n": "<p>\u65e5\u5fd7\u7684\u4e1c\u897f</p>\n",
 "<p>Set model states </p>\n": "<p>\u8bbe\u7f6e\u6a21\u578b\u72b6\u6001</p>\n",
 "<p>Setting exponent decay rate for first moment of gradient, <span translate=no>_^_0_^_</span> to <span translate=no>_^_1_^_</span> is important. Default of <span translate=no>_^_2_^_</span> fails. </p>\n": "<p>\u8bbe\u7f6e\u68af\u5ea6\u7b2c\u4e00\u65f6\u523b\u7684\u6307\u6570\u8870\u51cf\u7387<span translate=no>_^_1_^_</span>\u975e\u5e38\u91cd\u8981\u3002<span translate=no>_^_0_^_</span>\u9ed8\u8ba4\u4e3a<span translate=no>_^_2_^_</span>\u5931\u8d25\u3002</p>\n",
 "<p>Train </p>\n": "<p>\u706b\u8f66</p>\n",
 "<p>Train the discriminator </p>\n": "<p>\u8bad\u7ec3\u9274\u522b\u5668</p>\n",
 "<p>Train the generator once in every <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6bcf\u9694\u4e00\u6b21\u8bad\u7ec3\u53d1\u7535\u673a<span translate=no>_^_0_^_</span></p>\n",
 "Generative Adversarial Networks experiment with MNIST": "\u4f7f\u7528 MNIST \u8fdb\u884c\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u5b9e\u9a8c",
 "This experiment generates MNIST images using multi-layer perceptron.": "\u8be5\u5b9e\u9a8c\u4f7f\u7528\u591a\u5c42\u611f\u77e5\u5668\u751f\u6210 MNIST \u56fe\u50cf\u3002"
}