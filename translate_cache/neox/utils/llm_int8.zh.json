{
 "<h1>LLM.int() on GPT-NeoX</h1>\n<p>This implements a utility function to transform a <span translate=no>_^_0_^_</span> layer to LLM.int8() linear layer.</p>\n<p><a href=\"https://papers.labml.ai/paper/eb2bcaee1d0011edaa66a71c10a887e7\">LLM.int8() paper</a>  shows you can use int8 quantization while handling outliers to reduce memory footprint without performance degradation in large language models. They convert weights and inputs to scaled 8-bit integers and does matrix multiplication producing int32 results which is then converted back to float16 and rescaled. They show that in large langauge models, some features can give extreme values (outliers) that dominate the model&#x27;s output. These features get clamped in 8-bit integer space which causes the model performance to degrade. As a solution they pick these outliers (greater than a specified threshold) and compute their multiplications separately in float16 space. Since the percentage of outliers is around 0.01% this doesn&#x27;t increase memory usage, and prevents the model from degrading performance.</p>\n<p>The code to transform GPT-NoeX layers is defined in <a href=\"../model.html#post_load_prepare\">model.py</a>.</p>\n<p>Here are example uses of GPT-NeoX with int8 quantization.</p>\n<ul><li><a href=\"../samples/llm_int8.html\">Generate Text</a> </li>\n<li><a href=\"../evaluation/llm_int8.html\">Run Evaluation Tests</a></li></ul>\n": "<h1>GPT-NEOX \u4e0a\u7684 llm.int ()</h1>\n<p>\u8fd9\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u51fd\u6570\uff0c\u5c06<span translate=no>_^_0_^_</span>\u5c42\u8f6c\u6362\u4e3a LLM.int8 () \u7ebf\u6027\u5c42\u3002</p>\n<p><a href=\"https://papers.labml.ai/paper/eb2bcaee1d0011edaa66a71c10a887e7\">LLM.int8 () \u8bba\u6587</a>\u5c55\u793a\u4e86\u5728\u5904\u7406\u5f02\u5e38\u503c\u65f6\u53ef\u4ee5\u4f7f\u7528 int8 \u91cf\u5316\u6765\u51cf\u5c11\u5185\u5b58\u5360\u7528\uff0c\u800c\u4e0d\u4f1a\u964d\u4f4e\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u6027\u80fd\u3002\u5b83\u4eec\u5c06\u6743\u91cd\u548c\u8f93\u5165\u8f6c\u6362\u4e3a\u6309\u6bd4\u4f8b\u7f29\u653e\u76848\u4f4d\u6574\u6570\uff0c\u5e76\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u4ea7\u751fint32\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u6362\u56defloat16\u5e76\u91cd\u65b0\u7f29\u653e\u3002\u5b83\u4eec\u8868\u660e\uff0c\u5728\u5927\u578b\u8bed\u8a00\u6a21\u578b\u4e2d\uff0c\u67d0\u4e9b\u7279\u5f81\u53ef\u4ee5\u7ed9\u51fa\u6781\u503c\uff08\u5f02\u5e38\u503c\uff09\uff0c\u8fd9\u4e9b\u503c\u5728\u6a21\u578b\u7684\u8f93\u51fa\u4e2d\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u8fd9\u4e9b\u7279\u5f81\u88ab\u9650\u5236\u5728 8 \u4f4d\u6574\u6570\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6a21\u578b\u6027\u80fd\u4e0b\u964d\u3002\u4f5c\u4e3a\u89e3\u51b3\u65b9\u6848\uff0c\u4ed6\u4eec\u9009\u62e9\u8fd9\u4e9b\u5f02\u5e38\u503c\uff08\u5927\u4e8e\u6307\u5b9a\u9608\u503c\uff09\uff0c\u5e76\u5728float16\u7a7a\u95f4\u4e2d\u5206\u522b\u8ba1\u7b97\u5b83\u4eec\u7684\u4e58\u6cd5\u3002\u7531\u4e8e\u5f02\u5e38\u503c\u7684\u767e\u5206\u6bd4\u7ea6\u4e3a 0.01%\uff0c\u56e0\u6b64\u4e0d\u4f1a\u589e\u52a0\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u5e76\u9632\u6b62\u6a21\u578b\u964d\u4f4e\u6027\u80fd\u3002</p>\n<p>\u7528\u4e8e\u8f6c\u6362 GPT-NOEX \u5c42\u7684\u4ee3\u7801\u5728 <a href=\"../model.html#post_load_prepare\">model.py</a> \u4e2d\u5b9a\u4e49\u3002</p>\n<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 int8 \u91cf\u5316\u7684 GPT-NEOX \u7684\u793a\u4f8b\u7528\u6cd5\u3002</p>\n<ul><li><a href=\"../samples/llm_int8.html\">\u751f\u6210\u6587\u672c</a></li>\n<li><a href=\"../evaluation/llm_int8.html\">\u8fd0\u884c\u8bc4\u4f30\u6d4b\u8bd5</a></li></ul>\n",
 "<h2>Transform a <span translate=no>_^_0_^_</span> layer to LLM.int8() linear layer</h2>\n<ul><li><span translate=no>_^_1_^_</span>  is the <span translate=no>_^_2_^_</span> layer to transform </li>\n<li><span translate=no>_^_3_^_</span>  is the device of the model </li>\n<li><span translate=no>_^_4_^_</span>  is the threshold <span translate=no>_^_5_^_</span> to use for outlier detection</li></ul>\n": "<h2>\u5c06<span translate=no>_^_0_^_</span>\u56fe\u5c42\u8f6c\u6362\u4e3a LLM.int8 () \u7ebf\u6027\u56fe\u5c42</h2>\n<ul><li><span translate=no>_^_1_^_</span>\u662f\u8981\u53d8\u6362\u7684<span translate=no>_^_2_^_</span>\u56fe\u5c42</li>\n<li><span translate=no>_^_3_^_</span>\u662f\u8be5\u578b\u53f7\u7684\u8bbe\u5907</li>\n<li><span translate=no>_^_4_^_</span>\u662f\u7528\u4e8e\u5f02\u5e38\u503c\u68c0\u6d4b\u7684\u9608<span translate=no>_^_5_^_</span>\u503c</li></ul>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p>Create an empty Linear8bitLt module </p>\n": "<p>\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 Linear8bitLT \u6a21\u5757</p>\n",
 "<p>Import <a href=\"https://github.com/timdettmers/bitsandbytes\"><span translate=no>_^_0_^_</span></a> package </p>\n": "<p>\u5bfc\u5165<a href=\"https://github.com/timdettmers/bitsandbytes\"><span translate=no>_^_0_^_</span></a>\u5305</p>\n",
 "<p>Quantize the weights </p>\n": "<p>\u91cf\u5316\u6743\u91cd</p>\n",
 "<p>Set the bias in float16 space </p>\n": "<p>\u5728 float16 \u7a7a\u95f4\u4e2d\u8bbe\u7f6e\u504f\u5dee</p>\n",
 "LLM.int8() on GPT-NeoX": "GPT-NEOX \u4e0a\u7684 llm.int8 ()",
 "Transform nn.Linear layers to 8-bit integer layers.": "\u5c06 NN. \u7ebf\u6027\u56fe\u5c42\u8f6c\u6362\u4e3a 8 \u4f4d\u6574\u6570\u56fe\u5c42\u3002"
}