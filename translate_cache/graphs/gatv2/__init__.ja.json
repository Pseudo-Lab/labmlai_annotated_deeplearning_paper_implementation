{
 "<h1>Graph Attention Networks v2 (GATv2)</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of the GATv2 operator from the paper <a href=\"https://papers.labml.ai/paper/2105.14491\">How Attentive are Graph Attention Networks?</a>.</p>\n<p>GATv2s work on graph data similar to <a href=\"../gat/index.html\">GAT</a>. A graph consists of nodes and edges connecting nodes. For example, in Cora dataset the nodes are research papers and the edges are citations that connect the papers.</p>\n<p>The GATv2 operator fixes the static attention problem of the standard <a href=\"../gat/index.html\">GAT</a>. Static attention is when the attention to the key nodes has the same rank (order) for any query node. <a href=\"../gat/index.html\">GAT</a> computes attention from query node <span translate=no>_^_0_^_</span> to key node <span translate=no>_^_1_^_</span> as,</p>\n<span translate=no>_^_2_^_</span><p>Note that for any query node <span translate=no>_^_3_^_</span>, the attention rank (<span translate=no>_^_4_^_</span>) of keys depends only on <span translate=no>_^_5_^_</span>. Therefore the attention rank of keys remains the same (<em>static</em>) for all queries.</p>\n<p>GATv2 allows dynamic attention by changing the attention mechanism,</p>\n<span translate=no>_^_6_^_</span><p>The paper shows that GATs static attention mechanism fails on some graph problems with a synthetic dictionary lookup dataset. It&#x27;s a fully connected bipartite graph where one set of nodes (query nodes) have a key associated with it and the other set of nodes have both a key and a value associated with it. The goal is to predict the values of query nodes. GAT fails on this task because of its limited static attention.</p>\n<p>Here is <a href=\"experiment.html\">the training code</a> for training a two-layer GATv2 on Cora dataset.</p>\n": "<h1>\u30b0\u30e9\u30d5\u30fb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b9 v2 (GATv2)</h1>\n<p>\u3053\u308c\u306f\u3001\u300c<a href=\"https://papers.labml.ai/paper/2105.14491\">\u30b0\u30e9\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3069\u306e\u7a0b\u5ea6\u6ce8\u610f\u6df1\u3044\u306e\u304b</a>\uff1f\u300d<a href=\"https://pytorch.org\">\u3068\u3044\u3046\u8ad6\u6587\u306eGATv2\u6f14\u7b97\u5b50\u3092PyTorch\u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059</a>\u3002</p>\u3002\n<p><a href=\"../gat/index.html\">GATv2\u306f\u3001GAT\u3068\u540c\u69d8\u306b\u30b0\u30e9\u30d5\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u307e\u3059\u3002</a>\u30b0\u30e9\u30d5\u306f\u3001\u30ce\u30fc\u30c9\u3068\u30ce\u30fc\u30c9\u3092\u63a5\u7d9a\u3059\u308b\u30a8\u30c3\u30b8\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001Cora\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001\u30ce\u30fc\u30c9\u306f\u7814\u7a76\u8ad6\u6587\u3067\u3001\u7aef\u306f\u8ad6\u6587\u3092\u3064\u306a\u3050\u5f15\u7528\u3067\u3059</p>\u3002\n<p><a href=\"../gat/index.html\">GATv2 \u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u6a19\u6e96 GAT \u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3059\u3002</a>\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068\u306f\u3001\u3069\u306e\u30af\u30a8\u30ea\u30ce\u30fc\u30c9\u3067\u3082\u30ad\u30fc\u30ce\u30fc\u30c9\u3078\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u30e9\u30f3\u30af\uff08\u9806\u5e8f\uff09\u304c\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002<a href=\"../gat/index.html\">GAT</a> \u306f\u3001<span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u30af\u30a8\u30ea\u30ce\u30fc\u30c9\u304b\u3089\u30ad\u30fc\u30ce\u30fc\u30c9\u3078\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u6b21\u306e\u3088\u3046\u306b\u8a08\u7b97\u3057\u307e\u3059</p>\u3002\n<span translate=no>_^_2_^_</span><p>\u3069\u306e\u30af\u30a8\u30ea\u30ce\u30fc\u30c9\u3067\u3082<span translate=no>_^_3_^_</span>\u3001\u30ad\u30fc\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e9\u30f3\u30af (<span translate=no>_^_4_^_</span>) \u306f\u4ee5\u4e0b\u306b\u306e\u307f\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044<span translate=no>_^_5_^_</span>\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30ad\u30fc\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e9\u30f3\u30af\u306f\u3059\u3079\u3066\u306e\u30af\u30a8\u30ea\u3067\u540c\u3058\uff08<em>\u9759\u7684</em>\uff09\u307e\u307e\u3067\u3059\u3002</p>\n<p>GATv2\u306f\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u52d5\u7684\u306a\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002</p>\n<span translate=no>_^_6_^_</span><p>\u3053\u306e\u8ad6\u6587\u306f\u3001GAT\u306e\u9759\u7684\u6ce8\u610f\u30e1\u30ab\u30cb\u30ba\u30e0\u304c\u3001\u5408\u6210\u8f9e\u66f8\u691c\u7d22\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b0\u30e9\u30d5\u554f\u984c\u306e\u4e00\u90e8\u3067\u5931\u6557\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5b8c\u5168\u306b\u63a5\u7d9a\u3055\u308c\u305f\u4e8c\u90e8\u30b0\u30e9\u30d5\u3067\u3001\u4e00\u65b9\u306e\u30ce\u30fc\u30c9\uff08\u30af\u30a8\u30ea\u30ce\u30fc\u30c9\uff09\u306b\u306f\u30ad\u30fc\u304c\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3001\u3082\u3046\u4e00\u65b9\u306e\u30ce\u30fc\u30c9\u30bb\u30c3\u30c8\u306b\u306f\u30ad\u30fc\u3068\u5024\u306e\u4e21\u65b9\u304c\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u76ee\u6a19\u306f\u3001\u30af\u30a8\u30ea\u30ce\u30fc\u30c9\u306e\u5024\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002GAT \u306f\u9759\u7684\u51e6\u7406\u304c\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u30bf\u30b9\u30af\u306f\u5931\u6557\u3057\u307e\u3059\u3002</p>\n<p>\u3053\u308c\u306f\u3001<a href=\"experiment.html\">Cora\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30672\u5c64GATv2\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30b3\u30fc\u30c9\u3067\u3059</a>\u3002</p>\n",
 "<h2>Graph attention v2 layer</h2>\n<p>This is a single graph attention v2 layer. A GATv2 is made up of multiple such layers. It takes <span translate=no>_^_0_^_</span>, where <span translate=no>_^_1_^_</span> as input and outputs <span translate=no>_^_2_^_</span>, where <span translate=no>_^_3_^_</span>.</p>\n": "<h2>\u30b0\u30e9\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3 v2 \u30ec\u30a4\u30e4\u30fc</h2>\n<p>\u3053\u308c\u306f\u30b7\u30f3\u30b0\u30eb\u30b0\u30e9\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3v2\u30ec\u30a4\u30e4\u30fc\u3067\u3059\u3002GATv2\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u8907\u6570\u306e\u30ec\u30a4\u30e4\u30fc\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002<span translate=no>_^_1_^_</span>\u5165\u529b\u3068\u3057\u3066<span translate=no>_^_0_^_</span>\u3001where \u3092\u3001\u51fa\u529b\u3068\u3057\u3066<span translate=no>_^_2_^_</span>\u3001where <span translate=no>_^_3_^_</span> \u3092\u53d6\u308a\u307e\u3059\u3002</p>\n",
 "<h4>Calculate attention score</h4>\n<p>We calculate these for each head <span translate=no>_^_0_^_</span>. <em>We have omitted <span translate=no>_^_1_^_</span> for simplicity</em>.</p>\n<p><span translate=no>_^_2_^_</span></p>\n<p><span translate=no>_^_3_^_</span> is the attention score (importance) from node <span translate=no>_^_4_^_</span> to node <span translate=no>_^_5_^_</span>. We calculate this for each head.</p>\n<p><span translate=no>_^_6_^_</span> is the attention mechanism, that calculates the attention score. The paper sums <span translate=no>_^_7_^_</span>, <span translate=no>_^_8_^_</span> followed by a <span translate=no>_^_9_^_</span> and does a linear transformation with a weight vector <span translate=no>_^_10_^_</span></p>\n<p><span translate=no>_^_11_^_</span> Note: The paper desrcibes <span translate=no>_^_12_^_</span> as <span translate=no>_^_13_^_</span> which is equivalent to the definition we use here. </p>\n": "<h4>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u306e\u8a08\u7b97</h4>\n<p><span translate=no>_^_0_^_</span>\u3053\u308c\u3089\u306f\u982d\u3054\u3068\u306b\u8a08\u7b97\u3057\u307e\u3059\u3002<em><span translate=no>_^_1_^_</span>\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7701\u7565\u3057\u307e\u3057\u305f\u3002</em></p>\n<p><span translate=no>_^_2_^_</span></p>\n<p><span translate=no>_^_3_^_</span><span translate=no>_^_4_^_</span>\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\uff08\u91cd\u8981\u5ea6\uff09<span translate=no>_^_5_^_</span>\u3067\u3059\u3002\u3053\u308c\u3092\u982d\u3054\u3068\u306b\u8a08\u7b97\u3057\u307e\u3059\u3002</p>\n<p><span translate=no>_^_6_^_</span>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0\u3067\u3059\u3002\u7d19\u306f\u5408\u8a08\u3057<span translate=no>_^_7_^_</span>\u3001<span translate=no>_^_8_^_</span><span translate=no>_^_9_^_</span>\u305d\u306e\u5f8c\u306bA\u3068\u304c\u7d9a\u304d\u3001\u91cd\u307f\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u7528\u3057\u3066\u7dda\u5f62\u5909\u63db\u3092\u884c\u3044\u307e\u3059 <span translate=no>_^_10_^_</span></p>\n<p><span translate=no>_^_11_^_</span>\u6ce8:\u3053\u306e\u8ad6\u6587\u3067\u306f\u3001<span translate=no>_^_12_^_</span><span translate=no>_^_13_^_</span>\u3069\u3061\u3089\u304c\u3053\u3053\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u5b9a\u7fa9\u3068\u540c\u7b49\u3067\u3042\u308b\u304b\u304c\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> gets <span translate=no>_^_1_^_</span> where each node embedding is repeated <span translate=no>_^_2_^_</span> times. </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span>\u5404\u30ce\u30fc\u30c9\u306e\u57cb\u3081\u8fbc\u307f\u304c\u4f55\u5ea6\u3082\u7e70\u308a\u8fd4\u3055\u308c\u308b\u5834\u6240\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p>\n",
 "<p>Apply dropout regularization </p>\n": "<p>\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u6b63\u5247\u5316\u3092\u9069\u7528</p>\n",
 "<p>Calculate <span translate=no>_^_0_^_</span> <span translate=no>_^_1_^_</span> is of shape <span translate=no>_^_2_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u5f62\u72b6\u306e\u8a08\u7b97 <span translate=no>_^_2_^_</span></p>\n",
 "<p>Calculate final output for each head <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5404\u30d8\u30c3\u30c9\u306e\u6700\u7d42\u51fa\u529b\u3092\u8a08\u7b97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Calculate the number of dimensions per head </p>\n": "<p>\u982d\u3042\u305f\u308a\u306e\u5bf8\u6cd5\u6570\u306e\u8a08\u7b97</p>\n",
 "<p>Concatenate the heads </p>\n": "<p>\u30d8\u30c3\u30c9\u3092\u9023\u7d50\u3057\u3066\u304f\u3060\u3055\u3044</p>\n",
 "<p>Dropout layer to be applied for attention </p>\n": "<p>\u6ce8\u76ee\u3059\u3079\u304d\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64</p>\n",
 "<p>First we calculate <span translate=no>_^_0_^_</span> for all pairs of <span translate=no>_^_1_^_</span>.</p>\n<p><span translate=no>_^_2_^_</span> gets <span translate=no>_^_3_^_</span> where each node embedding is repeated <span translate=no>_^_4_^_</span> times. </p>\n": "<p>\u307e\u305a<span translate=no>_^_0_^_</span>\u3001\u3059\u3079\u3066\u306e\u30da\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059<span translate=no>_^_1_^_</span>.</p>\n<p><span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span><span translate=no>_^_4_^_</span>\u5404\u30ce\u30fc\u30c9\u306e\u57cb\u3081\u8fbc\u307f\u304c\u4f55\u5ea6\u3082\u7e70\u308a\u8fd4\u3055\u308c\u308b\u5834\u6240\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p>\n",
 "<p>If <span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span> the same linear layer is used for the target nodes </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u30bf\u30fc\u30b2\u30c3\u30c8\u30ce\u30fc\u30c9\u306b\u540c\u3058\u30ea\u30cb\u30a2\u30ec\u30a4\u30e4\u30fc\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408</p>\n",
 "<p>If we are averaging the multiple heads </p>\n": "<p>\u8907\u6570\u306e\u30d8\u30c3\u30c9\u3092\u5e73\u5747\u5316\u3059\u308b\u5834\u5408</p>\n",
 "<p>If we are concatenating the multiple heads </p>\n": "<p>\u8907\u6570\u306e\u30d8\u30c3\u30c9\u3092\u9023\u7d50\u3059\u308b\u5834\u5408</p>\n",
 "<p>Linear layer for initial source transformation; i.e. to transform the source node embeddings before self-attention </p>\n": "<p>\u521d\u671f\u30bd\u30fc\u30b9\u5909\u63db\u7528\u306e\u7dda\u5f62\u30ec\u30a4\u30e4\u30fc\u3002\u3064\u307e\u308a\u3001\u81ea\u5df1\u51e6\u7406\u306e\u524d\u306b\u30bd\u30fc\u30b9\u30ce\u30fc\u30c9\u306e\u57cb\u3081\u8fbc\u307f\u3092\u5909\u63db\u3059\u308b</p>\n",
 "<p>Linear layer to compute attention score <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u7dda\u5f62\u30ec\u30a4\u30e4\u30fc <span translate=no>_^_0_^_</span></p>\n",
 "<p>Mask <span translate=no>_^_0_^_</span> based on adjacency matrix. <span translate=no>_^_1_^_</span> is set to <span translate=no>_^_2_^_</span> if there is no edge from <span translate=no>_^_3_^_</span> to <span translate=no>_^_4_^_</span>. </p>\n": "<p><span translate=no>_^_0_^_</span>\u96a3\u63a5\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306b\u57fa\u3065\u304f\u30de\u30b9\u30af\u3002<span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u304b\u3089\u307e\u3067\u306e\u30a8\u30c3\u30b8\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059<span translate=no>_^_4_^_</span>\u3002</p>\n",
 "<p>Now we add the two tensors to get <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6b21\u306b\u30012 \u3064\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u8ffd\u52a0\u3057\u3066 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Number of nodes </p>\n": "<p>\u30ce\u30fc\u30c9\u6570</p>\n",
 "<p>Remove the last dimension of size <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30b5\u30a4\u30ba\u306e\u6700\u5f8c\u306e\u30c7\u30a3\u30e1\u30f3\u30b7\u30e7\u30f3\u3092\u524a\u9664 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Reshape so that <span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span>\u305d\u306e\u3088\u3046\u306b\u5f62\u3092\u5909\u3048\u3066\u304f\u3060\u3055\u3044 <span translate=no>_^_1_^_</span></p>\n",
 "<p>Softmax to compute attention <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6ce8\u610f\u529b\u3092\u8a08\u7b97\u3059\u308b\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Take the mean of the heads </p>\n": "<p>\u982d\u306e\u4e2d\u3092\u5e73\u5747\u3057\u3066</p>\n",
 "<p>The activation for attention score <span translate=no>_^_0_^_</span> </p>\n": "<p>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u306e\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30b7\u30e7\u30f3 <span translate=no>_^_0_^_</span></p>\n",
 "<p>The adjacency matrix should have shape <span translate=no>_^_0_^_</span> or<span translate=no>_^_1_^_</span> </p>\n": "<p>\u96a3\u63a5\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306f\u3001<span translate=no>_^_0_^_</span>\u307e\u305f\u306f\u306e\u5f62\u72b6\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093 <span translate=no>_^_1_^_</span></p>\n",
 "<p>The initial transformations, <span translate=no>_^_0_^_</span> <span translate=no>_^_1_^_</span> for each head. We do two linear transformations and then split it up for each head. </p>\n": "<p>\u5404\u30d8\u30c3\u30c9\u306e\u521d\u671f\u5909\u63db<span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u3002\u7dda\u5f62\u5909\u63db\u3092 2 \u56de\u884c\u3044\u3001\u305d\u308c\u3092\u5404\u30d8\u30c3\u30c9\u306b\u5206\u5272\u3057\u307e\u3059</p>\u3002\n",
 "<p>We then normalize attention scores (or coefficients) <span translate=no>_^_0_^_</span></p>\n<p>where <span translate=no>_^_1_^_</span> is the set of nodes connected to <span translate=no>_^_2_^_</span>.</p>\n<p>We do this by setting unconnected <span translate=no>_^_3_^_</span> to <span translate=no>_^_4_^_</span> which makes <span translate=no>_^_5_^_</span> for unconnected pairs. </p>\n": "<p>\u6b21\u306b\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2 (\u307e\u305f\u306f\u4fc2\u6570) \u3092\u6b63\u898f\u5316\u3057\u307e\u3059 <span translate=no>_^_0_^_</span></p>\n<p><span translate=no>_^_1_^_</span>\u306f\u63a5\u7d9a\u5148\u306e\u30ce\u30fc\u30c9\u30bb\u30c3\u30c8\u304c\u3069\u3053\u306b\u3042\u308b\u304b<span translate=no>_^_2_^_</span>\u3002</p>\n<p>\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u300c\u672a\u63a5\u7d9a\u300d\u3092\u300c\u672a\u63a5\u7d9a\u300d\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067<span translate=no>_^_3_^_</span>\u3001<span translate=no>_^_4_^_</span>\u30da\u30a2\u304c\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u306b\u306a\u308a\u307e\u3059<span translate=no>_^_5_^_</span>\u3002</p>\n",
 "<ul><li><span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span> is the input node embeddings of shape <span translate=no>_^_2_^_</span>. </li>\n<li><span translate=no>_^_3_^_</span> is the adjacency matrix of shape <span translate=no>_^_4_^_</span>. We use shape <span translate=no>_^_5_^_</span> since the adjacency is the same for each head. Adjacency matrix represent the edges (or connections) among nodes. <span translate=no>_^_6_^_</span> is <span translate=no>_^_7_^_</span> if there is an edge from node <span translate=no>_^_8_^_</span> to node <span translate=no>_^_9_^_</span>.</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u3001<span translate=no>_^_1_^_</span>\u306f\u30b7\u30a7\u30a4\u30d7\u306e\u5165\u529b\u30ce\u30fc\u30c9\u57cb\u3081\u8fbc\u307f\u3067\u3059\u3002<span translate=no>_^_2_^_</span></li>\n<li><span translate=no>_^_3_^_</span><span translate=no>_^_4_^_</span>\u306f\u5f62\u72b6\u306e\u96a3\u63a5\u884c\u5217\u3067\u3059\u3002<span translate=no>_^_5_^_</span>\u5404\u30d8\u30c3\u30c9\u306e\u96a3\u63a5\u95a2\u4fc2\u304c\u540c\u3058\u306a\u306e\u3067\u3001\u5f62\u72b6\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u96a3\u63a5\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306f\u3001\u30ce\u30fc\u30c9\u9593\u306e\u30a8\u30c3\u30b8 (\u307e\u305f\u306f\u63a5\u7d9a) \u3092\u8868\u3057\u307e\u3059\u3002<span translate=no>_^_6_^_</span><span translate=no>_^_7_^_</span><span translate=no>_^_8_^_</span>\u30ce\u30fc\u30c9\u9593\u3067\u30a8\u30c3\u30b8\u304c\u3042\u308b\u5834\u5408\u3067\u3059<span translate=no>_^_9_^_</span>\u3002</li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span>, is the number of input features per node </li>\n<li><span translate=no>_^_2_^_</span>, <span translate=no>_^_3_^_</span>, is the number of output features per node </li>\n<li><span translate=no>_^_4_^_</span>, <span translate=no>_^_5_^_</span>, is the number of attention heads </li>\n<li><span translate=no>_^_6_^_</span> whether the multi-head results should be concatenated or averaged </li>\n<li><span translate=no>_^_7_^_</span> is the dropout probability </li>\n<li><span translate=no>_^_8_^_</span> is the negative slope for leaky relu activation </li>\n<li><span translate=no>_^_9_^_</span> if set to <span translate=no>_^_10_^_</span>, the same matrix will be applied to the source and the target node of every edge</li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u3001\u306f\u30ce\u30fc\u30c9\u3042\u305f\u308a\u306e\u5165\u529b\u30d5\u30a3\u30fc\u30c1\u30e3\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u3001\u306f\u30ce\u30fc\u30c9\u3054\u3068\u306e\u51fa\u529b\u30d5\u30a3\u30fc\u30c1\u30e3\u306e\u6570\u3067\u3059</li>\n<li><span translate=no>_^_4_^_</span><span translate=no>_^_5_^_</span>\u3001\u306f\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30fb\u30d8\u30c3\u30c9\u306e\u6570</li>\n<li><span translate=no>_^_6_^_</span>\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u306e\u7d50\u679c\u3092\u9023\u7d50\u3059\u3079\u304d\u304b\u5e73\u5747\u5316\u3059\u3079\u304d\u304b</li>\n<li><span translate=no>_^_7_^_</span>\u306f\u8131\u843d\u78ba\u7387\u3067\u3059</li>\n<li><span translate=no>_^_8_^_</span>\u30ea\u30fc\u30af\u306e\u3042\u308b\u30ea\u30ec\u30fc\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30b7\u30e7\u30f3\u306e\u8ca0\u306e\u50be\u304d\u3067\u3059</li>\n<li><span translate=no>_^_9_^_</span>\u306b\u8a2d\u5b9a\u3059\u308b\u3068<span translate=no>_^_10_^_</span>\u3001\u3059\u3079\u3066\u306e\u30a8\u30c3\u30b8\u306e\u30bd\u30fc\u30b9\u30ce\u30fc\u30c9\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u30ce\u30fc\u30c9\u306b\u540c\u3058\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u304c\u9069\u7528\u3055\u308c\u307e\u3059</li></ul>\n",
 "A PyTorch implementation/tutorial of Graph Attention Networks v2.": "\u30b0\u30e9\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30cd\u30c3\u30c8\u30ef\u30fc\u30afv2\u306ePyTorch\u5b9f\u88c5/\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3002",
 "Graph Attention Networks v2 (GATv2)": "\u30b0\u30e9\u30d5\u30fb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b9 v2 (GATv2)"
}