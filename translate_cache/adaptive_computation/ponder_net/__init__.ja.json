{
 "<h1>PonderNet: Learning to Ponder</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of the paper <a href=\"https://papers.labml.ai/paper/2107.05407\">PonderNet: Learning to Ponder</a>.</p>\n<p>PonderNet adapts the computation based on the input. It changes the number of steps to take on a recurrent network based on the input. PonderNet learns this with end-to-end gradient descent.</p>\n<p>PonderNet has a step function of the form</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>where <span translate=no>_^_1_^_</span> is the input, <span translate=no>_^_2_^_</span> is the state, <span translate=no>_^_3_^_</span> is the prediction at step <span translate=no>_^_4_^_</span>, and <span translate=no>_^_5_^_</span> is the probability of halting (stopping) at current step.</p>\n<p><span translate=no>_^_6_^_</span> can be any neural network (e.g. LSTM, MLP, GRU, Attention layer).</p>\n<p>The unconditioned probability of halting at step <span translate=no>_^_7_^_</span> is then,</p>\n<p><span translate=no>_^_8_^_</span></p>\n<p>That is the probability of not being halted at any of the previous steps and halting at step <span translate=no>_^_9_^_</span>.</p>\n<p>During inference, we halt by sampling based on the halting probability <span translate=no>_^_10_^_</span>  and get the prediction at the halting layer <span translate=no>_^_11_^_</span> as the final output.</p>\n<p>During training, we get the predictions from all the layers and calculate the losses for each of them. And then take the weighted average of the losses based on the probabilities of getting halted at each layer <span translate=no>_^_12_^_</span>.</p>\n<p>The step function is applied to a maximum number of steps donated by <span translate=no>_^_13_^_</span>.</p>\n<p>The overall loss of PonderNet is</p>\n<span translate=no>_^_14_^_</span><p><span translate=no>_^_15_^_</span> is the normal loss function between target <span translate=no>_^_16_^_</span> and prediction <span translate=no>_^_17_^_</span>.</p>\n<p><span translate=no>_^_18_^_</span> is the <a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence\">Kullback\u2013Leibler divergence</a>.</p>\n<p><span translate=no>_^_19_^_</span> is the <a href=\"https://en.wikipedia.org/wiki/Geometric_distribution\">Geometric distribution</a> parameterized by <span translate=no>_^_20_^_</span>. <em><span translate=no>_^_21_^_</span> has nothing to do with <span translate=no>_^_22_^_</span>; we are just sticking to same notation as the paper</em>. <span translate=no>_^_23_^_</span>.</p>\n<p>The regularization loss biases the network towards taking <span translate=no>_^_24_^_</span> steps and incentivizes  non-zero probabilities for all steps; i.e. promotes exploration.</p>\n<p>Here is the <a href=\"experiment.html\">training code <span translate=no>_^_25_^_</span></a> to train a PonderNet on <a href=\"../parity.html\">Parity Task</a>.</p>\n": "<h1>PonderNet: \u719f\u8003\u3059\u308b\u3053\u3068\u3092\u5b66\u3076</h1>\n<p>\u3053\u308c\u306f\u3001\u8ad6\u6587\u300c<a href=\"https://papers.labml.ai/paper/2107.05407\">PonderNet: \u719f\u8003\u3092\u5b66\u307c\u3046</a>\u300d<a href=\"https://pytorch.org\">\u3092PyTorch\u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3067\u3059</a>\u3002</p>\n<p>PonderNet \u306f\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u8a08\u7b97\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u30ea\u30ab\u30ec\u30f3\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u5b9f\u884c\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306e\u6570\u3092\u5909\u66f4\u3057\u307e\u3059\u3002PonderNet\u306f\u3053\u308c\u3092\u7aef\u304b\u3089\u7aef\u307e\u3067\u306e\u52fe\u914d\u964d\u4e0b\u6cd5\u3067\u5b66\u7fd2\u3057\u307e\u3059</p>\u3002\n<p>PonderNet\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306e\u30b9\u30c6\u30c3\u30d7\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059</p>\n<p><span translate=no>_^_0_^_</span></p>\n<p>\u3053\u3053\u3067\u3001<span translate=no>_^_1_^_</span>\u306f\u5165\u529b\u3001<span translate=no>_^_2_^_</span>\u306f\u72b6\u614b\u3001<span translate=no>_^_3_^_</span>\u306f\u30b9\u30c6\u30c3\u30d7\u3067\u306e\u4e88\u6e2c<span translate=no>_^_4_^_</span>\u3001<span translate=no>_^_5_^_</span>\u306f\u73fe\u5728\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u505c\u6b62 (\u505c\u6b62) \u3059\u308b\u78ba\u7387\u3067\u3059\u3002</p>\n<p><span translate=no>_^_6_^_</span>\u4efb\u610f\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08LSTM\u3001MLP\u3001GRU\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u30fc\u306a\u3069\uff09\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>\n<p>\u305d\u306e\u5834\u5408\u3001<span translate=no>_^_7_^_</span>\u30b9\u30c6\u30c3\u30d7\u3067\u505c\u6b62\u3059\u308b\u7121\u6761\u4ef6\u306e\u78ba\u7387\u306f\u3001</p>\n<p><span translate=no>_^_8_^_</span></p>\n<p>\u3053\u308c\u306f\u3001\u524d\u306e\u3069\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3082\u505c\u6b62\u305b\u305a\u3001\u30b9\u30c6\u30c3\u30d7\u3067\u505c\u6b62\u3059\u308b\u78ba\u7387\u3067\u3059\u3002<span translate=no>_^_9_^_</span></p>\n<p>\u63a8\u8ad6\u4e2d\u306f\u3001<span translate=no>_^_10_^_</span>\u505c\u6b62\u78ba\u7387\u306b\u57fa\u3065\u3044\u3066\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u505c\u6b62\u3057\u3001<span translate=no>_^_11_^_</span>\u505c\u6b62\u5c64\u3067\u306e\u4e88\u6e2c\u3092\u6700\u7d42\u51fa\u529b\u3068\u3057\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002</p>\n<p>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u4e2d\u3001\u3059\u3079\u3066\u306e\u30ec\u30a4\u30e4\u30fc\u304b\u3089\u4e88\u6e2c\u3092\u53d6\u5f97\u3057\u3001\u5404\u30ec\u30a4\u30e4\u30fc\u306e\u640d\u5931\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u5404\u30ec\u30a4\u30e4\u30fc\u3067\u505c\u6b62\u3059\u308b\u78ba\u7387\u306b\u57fa\u3065\u3044\u3066\u3001\u640d\u5931\u306e\u52a0\u91cd\u5e73\u5747\u3092\u53d6\u308a\u307e\u3059</p>\u3002<span translate=no>_^_12_^_</span>\n<p>\u30b9\u30c6\u30c3\u30d7\u6a5f\u80fd\u306f\u3001<span translate=no>_^_13_^_</span>\u304b\u3089\u5bc4\u4ed8\u3055\u308c\u305f\u30b9\u30c6\u30c3\u30d7\u306e\u6700\u5927\u6570\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p>\n<p>PonderNet \u306e\u5168\u4f53\u7684\u306a\u640d\u5931\u306f</p>\n<span translate=no>_^_14_^_</span><p><span translate=no>_^_15_^_</span><span translate=no>_^_16_^_</span><span translate=no>_^_17_^_</span>\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u4e88\u6e2c\u306e\u9593\u306e\u6b63\u898f\u640d\u5931\u95a2\u6570\u3067\u3059\u3002</p>\n<p><span translate=no>_^_18_^_</span><a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence\">\u306f\u30ab\u30eb\u30d0\u30c3\u30af\u3068\u30e9\u30a4\u30d6\u30e9\u30fc\u306e\u30c0\u30a4\u30d0\u30fc\u30b8\u30a7\u30f3\u30b9\u3067\u3059</a>\u3002</p>\n<p><span translate=no>_^_19_^_</span><a href=\"https://en.wikipedia.org/wiki/Geometric_distribution\">\u306f\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u5e7e\u4f55\u5206\u5e03\u3067\u3059</a>\u3002<span translate=no>_^_20_^_</span><em><span translate=no>_^_21_^_</span>\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093<span translate=no>_^_22_^_</span>\u3002\u305f\u3060\u7d19\u3068\u540c\u3058\u8868\u8a18\u6cd5\u306b\u3053\u3060\u308f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059</em>\u3002<span translate=no>_^_23_^_</span></p>\u3002\n<p>\u6b63\u5247\u5316\u640d\u5931\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u624b\u9806\u3092\u5b9f\u884c\u3059\u308b\u65b9\u5411\u306b\u504f\u3089\u305b\u3001<span translate=no>_^_24_^_</span>\u3059\u3079\u3066\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u30bc\u30ed\u4ee5\u5916\u306e\u78ba\u7387\u3092\u8a98\u767a\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u63a2\u7d22\u304c\u4fc3\u9032\u3055\u308c\u307e\u3059\u3002</p>\n<p><a href=\"../parity.html\">\u30d1\u30ea\u30c6\u30a3\u30bf\u30b9\u30af\u3067</a> PonderNet <a href=\"experiment.html\"><span translate=no>_^_25_^_</span>\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059</a>\u3002</p>\n",
 "<h2>PonderNet with GRU for Parity Task</h2>\n<p>This is a simple model that uses a <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.GRUCell.html\">GRU Cell</a> as the step function.</p>\n<p>This model is for the <a href=\"../parity.html\">Parity Task</a> where the input is a vector of <span translate=no>_^_0_^_</span>. Each element of the vector is either <span translate=no>_^_1_^_</span>, <span translate=no>_^_2_^_</span> or <span translate=no>_^_3_^_</span> and the output is the parity - a binary value that is true if the number of <span translate=no>_^_4_^_</span>s is odd and false otherwise.</p>\n<p>The prediction of the model is the log probability of the parity being <span translate=no>_^_5_^_</span>.</p>\n": "<h2>\u30d1\u30ea\u30c6\u30a3\u30bf\u30b9\u30af\u7528\u306e GRU \u642d\u8f09\u306e PonderNet</h2>\n<p>\u3053\u308c\u306f\u3001<a href=\"https://pytorch.org/docs/stable/generated/torch.nn.GRUCell.html\">\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u3068\u3057\u3066GRU Cell\u3092\u4f7f\u7528\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u3067\u3059</a>\u3002</p>\n<p>\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001<a href=\"../parity.html\"><span translate=no>_^_0_^_</span>\u5165\u529b\u304c\u306e\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308b\u30d1\u30ea\u30c6\u30a3\u30bf\u30b9\u30af\u7528\u3067\u3059</a>\u3002\u30d9\u30af\u30c8\u30eb\u306e\u5404\u8981\u7d20\u306f<span translate=no>_^_1_^_</span>\u3001<span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u307e\u305f\u306f\u306e\u3044\u305a\u308c\u304b\u3067\u3001\u51fa\u529b\u306f\u30d1\u30ea\u30c6\u30a3\u3067\u3059\u3002\u3053\u308c\u306f <span translate=no>_^_4_^_</span> s \u306e\u6570\u304c\u5947\u6570\u306e\u5834\u5408\u306f true\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f false \u306e\u30d0\u30a4\u30ca\u30ea\u5024\u3067\u3059</p>\u3002\n<p>\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306f\u3001\u30d1\u30ea\u30c6\u30a3\u304c\u5b58\u5728\u3059\u308b\u5bfe\u6570\u78ba\u7387\u3067\u3059\u3002<span translate=no>_^_5_^_</span></p>\n",
 "<h2>Reconstruction loss</h2>\n<p><span translate=no>_^_0_^_</span></p>\n<p><span translate=no>_^_1_^_</span> is the normal loss function between target <span translate=no>_^_2_^_</span> and prediction <span translate=no>_^_3_^_</span>.</p>\n": "<h2>\u5fa9\u8208\u640d\u5931</h2>\n<p><span translate=no>_^_0_^_</span></p>\n<p><span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u4e88\u6e2c\u306e\u9593\u306e\u6b63\u898f\u640d\u5931\u95a2\u6570\u3067\u3059\u3002</p>\n",
 "<h2>Regularization loss</h2>\n<p><span translate=no>_^_0_^_</span></p>\n<p><span translate=no>_^_1_^_</span> is the <a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence\">Kullback\u2013Leibler divergence</a>.</p>\n<p><span translate=no>_^_2_^_</span> is the <a href=\"https://en.wikipedia.org/wiki/Geometric_distribution\">Geometric distribution</a> parameterized by <span translate=no>_^_3_^_</span>. <em><span translate=no>_^_4_^_</span> has nothing to do with <span translate=no>_^_5_^_</span>; we are just sticking to same notation as the paper</em>. <span translate=no>_^_6_^_</span>.</p>\n<p>The regularization loss biases the network towards taking <span translate=no>_^_7_^_</span> steps and incentivies non-zero probabilities for all steps; i.e. promotes exploration.</p>\n": "<h2>\u6b63\u5247\u5316\u640d\u5931</h2>\n<p><span translate=no>_^_0_^_</span></p>\n<p><span translate=no>_^_1_^_</span><a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence\">\u306f\u30ab\u30eb\u30d0\u30c3\u30af\u3068\u30e9\u30a4\u30d6\u30e9\u30fc\u306e\u30c0\u30a4\u30d0\u30fc\u30b8\u30a7\u30f3\u30b9\u3067\u3059</a>\u3002</p>\n<p><span translate=no>_^_2_^_</span><a href=\"https://en.wikipedia.org/wiki/Geometric_distribution\">\u306f\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u5e7e\u4f55\u5206\u5e03\u3067\u3059</a>\u3002<span translate=no>_^_3_^_</span><em><span translate=no>_^_4_^_</span>\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093<span translate=no>_^_5_^_</span>\u3002\u305f\u3060\u7d19\u3068\u540c\u3058\u8868\u8a18\u6cd5\u306b\u3053\u3060\u308f\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059</em>\u3002<span translate=no>_^_6_^_</span></p>\u3002\n<p>\u6b63\u5247\u5316\u640d\u5931\u306f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u624b\u9806\u3092\u5b9f\u884c\u3059\u308b\u65b9\u5411\u306b\u504f\u3089\u305b\u3001<span translate=no>_^_7_^_</span>\u3059\u3079\u3066\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u30bc\u30ed\u4ee5\u5916\u306e\u78ba\u7387\u3092\u8a98\u767a\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u63a2\u7d22\u304c\u4fc3\u9032\u3055\u308c\u307e\u3059\u3002</p>\n",
 "<p> </p>\n": "<p></p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> We could use a layer that takes the concatenation of <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> as input but we went with this for simplicity. </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span><span translate=no>_^_2_^_</span>\u3068\u3092\u5165\u529b\u3068\u3057\u3066\u9023\u7d50\u3059\u308b\u30ec\u30a4\u30e4\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u7c21\u7565\u5316\u306e\u305f\u3081\u306b\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002</p>\n",
 "<p><span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> where the computation was halted at step <span translate=no>_^_2_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u30b9\u30c6\u30c3\u30d7\u3067\u8a08\u7b97\u304c\u4e2d\u6b62\u3055\u308c\u305f\u3068\u3053\u308d <span translate=no>_^_2_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> for each sample and the mean of them </p>\n": "<p><span translate=no>_^_0_^_</span>\u5404\u30b5\u30f3\u30d7\u30eb\u3068\u305d\u306e\u5e73\u5747\u306b\u3064\u3044\u3066</p>\n",
 "<p>A vector to maintain which samples has halted computation </p>\n": "<p>\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u8a08\u7b97\u3092\u505c\u6b62\u3057\u305f\u304b\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306e\u30d9\u30af\u30c8\u30eb</p>\n",
 "<p>Add to total loss </p>\n": "<p>\u7dcf\u640d\u5931\u306b\u52a0\u7b97</p>\n",
 "<p>An option to set during inference so that computation is actually halted at inference time </p>\n": "<p>\u63a8\u8ad6\u6642\u306b\u8a08\u7b97\u304c\u5b9f\u969b\u306b\u505c\u6b62\u3059\u308b\u3088\u3046\u306b\u63a8\u8ad6\u4e2d\u306b\u8a2d\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3</p>\n",
 "<p>Calculate the KL-divergence. <em>The <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.KLDivLoss.html\">PyTorch KL-divergence</a> implementation accepts log probabilities.</em> </p>\n": "<p>KL \u30c0\u30a4\u30d0\u30fc\u30b8\u30a7\u30f3\u30b9\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002</p><em><a href=\"https://pytorch.org/docs/stable/generated/torch.nn.KLDivLoss.html\">PyTorch KL-\u30c0\u30a4\u30d0\u30fc\u30b8\u30a7\u30f3\u30b9\u5b9f\u88c5\u306f\u5bfe\u6570\u78ba\u7387\u3092\u53d7\u3051\u5165\u308c\u307e\u3059</a>\u3002</em>\n",
 "<p>Collect <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span>\u53ce\u96c6\u3057\u3066 <span translate=no>_^_1_^_</span></p>\n",
 "<p>Empty vector to calculate <span translate=no>_^_0_^_</span> </p>\n": "<p>\u8a08\u7b97\u3059\u308b\u7a7a\u306e\u30d9\u30af\u30c8\u30eb <span translate=no>_^_0_^_</span></p>\n",
 "<p>GRU <span translate=no>_^_0_^_</span> </p>\n": "<p>GRU <span translate=no>_^_0_^_</span></p>\n",
 "<p>Get <span translate=no>_^_0_^_</span> upto <span translate=no>_^_1_^_</span> and expand it across the batch dimension </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u30d0\u30c3\u30c1\u30c7\u30a3\u30e1\u30f3\u30b7\u30e7\u30f3\u5168\u4f53\u3078\u306e\u5c55\u958b\u3068\u62e1\u5f35</p>\n",
 "<p>Get next state <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6b21\u306e\u30b9\u30c6\u30fc\u30c8\u3092\u53d6\u5f97 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Halt based on halting probability <span translate=no>_^_0_^_</span> </p>\n": "<p>\u505c\u6b62\u78ba\u7387\u306b\u57fa\u3065\u304f\u505c\u6b62 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Iterate for <span translate=no>_^_0_^_</span> steps </p>\n": "<p><span translate=no>_^_0_^_</span>\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u7e70\u308a\u8fd4\u3059</p>\n",
 "<p>Iterate upto <span translate=no>_^_0_^_</span> </p>\n": "<p>\u6700\u5927\u307e\u3067\u7e70\u308a\u8fd4\u3059 <span translate=no>_^_0_^_</span></p>\n",
 "<p>KL-divergence loss </p>\n": "<p>KL-\u30c0\u30a4\u30d0\u30fc\u30b8\u30a7\u30f3\u30b9\u30ed\u30b9</p>\n",
 "<p>Lists to store <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span>\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\u3068 <span translate=no>_^_1_^_</span></p>\n",
 "<p>Save <span translate=no>_^_0_^_</span> </p>\n": "<p>[\u4fdd\u5b58] <span translate=no>_^_0_^_</span></p>\n",
 "<p>Stop the computation if all samples have halted </p>\n": "<p>\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u505c\u6b62\u3057\u305f\u3089\u3001\u8a08\u7b97\u3092\u505c\u6b62\u3057\u307e\u3059</p>\n",
 "<p>The halting probability <span translate=no>_^_0_^_</span> for the last step </p>\n": "<p><span translate=no>_^_0_^_</span>\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u505c\u6b62\u3059\u308b\u78ba\u7387</p>\n",
 "<p>The total <span translate=no>_^_0_^_</span> </p>\n": "<p>\u5408\u8a08 <span translate=no>_^_0_^_</span></p>\n",
 "<p>Transpose <span translate=no>_^_0_^_</span> to <span translate=no>_^_1_^_</span> </p>\n": "<p>\u306b\u8ee2\u7f6e <span translate=no>_^_0_^_</span> <span translate=no>_^_1_^_</span></p>\n",
 "<p>Update <span translate=no>_^_0_^_</span> </p>\n": "<p>[\u66f4\u65b0] <span translate=no>_^_0_^_</span></p>\n",
 "<p>Update <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> based on what was halted at current step <span translate=no>_^_2_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u66f4\u65b0\u304a\u3088\u3073\u73fe\u5728\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u505c\u6b62\u3055\u308c\u305f\u5185\u5bb9\u306b\u57fa\u3065\u304f <span translate=no>_^_2_^_</span></p>\n",
 "<p>Update halted samples </p>\n": "<p>\u505c\u6b62\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u66f4\u65b0</p>\n",
 "<p>We get initial state <span translate=no>_^_0_^_</span> </p>\n": "<p>\u521d\u671f\u72b6\u614b\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f <span translate=no>_^_0_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span> - the success probability of geometric distribution </li>\n<li><span translate=no>_^_2_^_</span> is the highest <span translate=no>_^_3_^_</span>; we use this to pre-compute <span translate=no>_^_4_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>is <span translate=no>_^_1_^_</span>-\u5e7e\u4f55\u5206\u5e03\u306e\u6210\u529f\u78ba\u7387</li>\n<li><span translate=no>_^_2_^_</span>\u304c\u6700\u9ad8\u3067\u3059<span translate=no>_^_3_^_</span>\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u4e8b\u524d\u8a08\u7b97\u3057\u307e\u3059 <span translate=no>_^_4_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span> in a tensor of shape <span translate=no>_^_2_^_</span> </li>\n<li><span translate=no>_^_3_^_</span> is <span translate=no>_^_4_^_</span> in a tensor of shape <span translate=no>_^_5_^_</span> </li>\n<li><span translate=no>_^_6_^_</span> is the target of shape <span translate=no>_^_7_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u3092\u3057\u3066\u3044\u307e\u3059 <span translate=no>_^_1_^_</span> <span translate=no>_^_2_^_</span></li>\n<li><span translate=no>_^_3_^_</span>\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u3092\u3057\u3066\u3044\u307e\u3059 <span translate=no>_^_4_^_</span> <span translate=no>_^_5_^_</span></li>\n<li><span translate=no>_^_6_^_</span>\u5f62\u72b6\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u3059 <span translate=no>_^_7_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is <span translate=no>_^_1_^_</span> in a tensor of shape <span translate=no>_^_2_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u3092\u3057\u3066\u3044\u307e\u3059 <span translate=no>_^_1_^_</span> <span translate=no>_^_2_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the input of shape <span translate=no>_^_1_^_</span></li></ul>\n<p>This outputs a tuple of four tensors:</p>\n<p>1. <span translate=no>_^_2_^_</span> in a tensor of shape <span translate=no>_^_3_^_</span> 2. <span translate=no>_^_4_^_</span> in a tensor of shape <span translate=no>_^_5_^_</span> - the log probabilities of the parity being <span translate=no>_^_6_^_</span> 3. <span translate=no>_^_7_^_</span> of shape <span translate=no>_^_8_^_</span> 4. <span translate=no>_^_9_^_</span> of shape <span translate=no>_^_10_^_</span> where the computation was halted at step <span translate=no>_^_11_^_</span></p>\n": "<ul><li><span translate=no>_^_0_^_</span>\u5f62\u72b6\u306e\u5165\u529b\u3067\u3059 <span translate=no>_^_1_^_</span></li></ul>\n<p>\u3053\u308c\u306f4\u3064\u306e\u30c6\u30f3\u30bd\u30eb\u306e\u30bf\u30d7\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p>\n<p>1\u3002<span translate=no>_^_2_^_</span><span translate=no>_^_3_^_</span>\u5f62\u72b62\u306e\u30c6\u30f3\u30bd\u30eb\u3067\u3002<span translate=no>_^_4_^_</span><span translate=no>_^_5_^_</span>\u5f62\u72b6\u306e\u30c6\u30f3\u30bd\u30eb\u3067\u306f\u3001\u30d1\u30ea\u30c6\u30a3\u306e\u5bfe\u6570\u78ba\u7387\u306f3\u3067\u3059\u3002<span translate=no>_^_6_^_</span><span translate=no>_^_7_^_</span><span translate=no>_^_8_^_</span>\u30b7\u30a7\u30a4\u30d74\u306e\u3002<span translate=no>_^_9_^_</span><span translate=no>_^_10_^_</span>\u30b9\u30c6\u30c3\u30d7\u3067\u8a08\u7b97\u304c\u4e2d\u6b62\u3055\u308c\u305f\u5f62\u72b6\u306e <span translate=no>_^_11_^_</span></p>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the loss function <span translate=no>_^_1_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u306f\u640d\u5931\u95a2\u6570\u3067\u3059 <span translate=no>_^_1_^_</span></li></ul>\n",
 "<ul><li><span translate=no>_^_0_^_</span> is the number of elements in the input vector </li>\n<li><span translate=no>_^_1_^_</span> is the state vector size of the GRU </li>\n<li><span translate=no>_^_2_^_</span> is the maximum number of steps <span translate=no>_^_3_^_</span></li></ul>\n": "<ul><li><span translate=no>_^_0_^_</span>\u306f\u5165\u529b\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u6570\u3067\u3059</li>\n<li><span translate=no>_^_1_^_</span>GRU \u306e\u72b6\u614b\u30d9\u30af\u30c8\u30eb\u30b5\u30a4\u30ba\u3067\u3059</li>\n<li><span translate=no>_^_2_^_</span>\u306f\u3001\u6700\u5927\u30b9\u30c6\u30c3\u30d7\u6570\u3067\u3059 <span translate=no>_^_3_^_</span></li></ul>\n",
 "A PyTorch implementation/tutorial of PonderNet: Learning to Ponder.": "PonderNet \u306e PyTorch \u5b9f\u88c5/\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb:\u719f\u8003\u3092\u5b66\u307c\u3046",
 "PonderNet: Learning to Ponder": "PonderNet: \u719f\u8003\u3059\u308b\u3053\u3068\u3092\u5b66\u3076"
}