{
 "<h1>Long Short-Term Memory (LSTM)</h1>\n<p>This is a <a href=\"https://pytorch.org\">PyTorch</a> implementation of Long Short-Term Memory.</p>\n": "<h1>\u957f\u671f\u77ed\u671f\u8bb0\u5fc6 (LSTM)</h1>\n<p>\u8fd9\u662f\u957f\u77ed\u671f\u8bb0\u5fc6\u7684 <a href=\"https://pytorch.org\">PyTorch</a> \u5b9e\u73b0\u3002</p>\n",
 "<h2>Long Short-Term Memory Cell</h2>\n<p>LSTM Cell computes <span translate=no>_^_0_^_</span>, and <span translate=no>_^_1_^_</span>. <span translate=no>_^_2_^_</span> is like the long-term memory, and <span translate=no>_^_3_^_</span> is like the short term memory. We use the input <span translate=no>_^_4_^_</span> and <span translate=no>_^_5_^_</span> to update the long term memory. In the update, some features of <span translate=no>_^_6_^_</span> are cleared with a forget gate <span translate=no>_^_7_^_</span>, and some features <span translate=no>_^_8_^_</span> are added through a gate <span translate=no>_^_9_^_</span>.</p>\n<p>The new short term memory is the <span translate=no>_^_10_^_</span> of the long-term memory multiplied by the output gate <span translate=no>_^_11_^_</span>.</p>\n<p>Note that the cell doesn&#x27;t look at long term memory <span translate=no>_^_12_^_</span> when doing the update. It only modifies it. Also <span translate=no>_^_13_^_</span> never goes through a linear transformation. This is what solves vanishing and exploding gradients.</p>\n<p>Here&#x27;s the update rule.</p>\n<span translate=no>_^_14_^_</span><p><span translate=no>_^_15_^_</span> stands for element-wise multiplication.</p>\n<p>Intermediate values and gates are computed as linear transformations of the hidden state and input.</p>\n<span translate=no>_^_16_^_</span>": "<h2>\u957f\u77ed\u671f\u8bb0\u5fc6\u7ec6\u80de</h2>\n<p>LSTM \u7ec6\u80de\u8ba1\u7b97<span translate=no>_^_0_^_</span>\u3001\u548c<span translate=no>_^_1_^_</span>\u3002<span translate=no>_^_2_^_</span>\u5c31\u50cf\u957f\u671f\u8bb0\u5fc6\uff0c<span translate=no>_^_3_^_</span>\u5c31\u50cf\u77ed\u671f\u8bb0\u5fc6\u3002\u6211\u4eec\u4f7f\u7528\u8f93\u5165<span translate=no>_^_4_^_</span>\u548c<span translate=no>_^_5_^_</span>\u6765\u66f4\u65b0\u957f\u671f\u5185\u5b58\u3002\u5728\u66f4\u65b0\u4e2d\uff0c\u7684<span translate=no>_^_6_^_</span>\u67d0\u4e9b\u529f\u80fd\u4f7f\u7528\u5fd8\u8bb0\u95e8\u6e05\u9664<span translate=no>_^_7_^_</span>\uff0c\u800c\u67d0\u4e9b\u529f\u80fd<span translate=no>_^_8_^_</span>\u5219\u901a\u8fc7\u5927\u95e8\u6dfb\u52a0<span translate=no>_^_9_^_</span>\u3002</p>\n<p>\u65b0\u7684\u77ed\u671f\u5b58\u50a8\u5668\u662f<span translate=no>_^_10_^_</span>\u957f\u671f\u5b58\u50a8\u5668\u4e58\u4ee5\u8f93\u51fa\u95e8\u7684\u503c<span translate=no>_^_11_^_</span>\u3002</p>\n<p>\u8bf7\u6ce8\u610f\uff0c\u5728\u8fdb\u884c\u66f4\u65b0<span translate=no>_^_12_^_</span>\u65f6\uff0c\u5355\u5143\u683c\u4e0d\u4f1a\u67e5\u770b\u957f\u671f\u5185\u5b58\u3002\u5b83\u53ea\u4f1a\u4fee\u6539\u5b83\u3002\u4e5f<span translate=no>_^_13_^_</span>\u6c38\u8fdc\u4e0d\u4f1a\u7ecf\u5386\u7ebf\u6027\u53d8\u6362\u3002\u8fd9\u5c31\u662f\u89e3\u51b3\u6e10\u53d8\u6d88\u5931\u548c\u7206\u70b8\u7684\u95ee\u9898\u3002</p>\n<p>\u4ee5\u4e0b\u662f\u66f4\u65b0\u89c4\u5219\u3002</p>\n<span translate=no>_^_14_^_</span><p><span translate=no>_^_15_^_</span>\u4ee3\u8868\u9010\u5143\u7d20\u4e58\u6cd5\u3002</p>\n<p>\u4e2d\u95f4\u503c\u548c\u95e8\u8ba1\u7b97\u4e3a\u9690\u85cf\u72b6\u6001\u548c\u8f93\u5165\u7684\u7ebf\u6027\u53d8\u6362\u3002</p>\n<span translate=no>_^_16_^_</span>",
 "<h2>Multilayer LSTM</h2>\n": "<h2>\u591a\u5c42 LSTM</h2>\n",
 "<p> <span translate=no>_^_0_^_</span> has shape <span translate=no>_^_1_^_</span> and <span translate=no>_^_2_^_</span> is a tuple of <span translate=no>_^_3_^_</span> and <span translate=no>_^_4_^_</span>, each with a shape of <span translate=no>_^_5_^_</span>.</p>\n": "<p><span translate=no>_^_0_^_</span>\u6709\u5f62\u72b6<span translate=no>_^_1_^_</span>\u5e76\u4e14<span translate=no>_^_2_^_</span>\u662f<span translate=no>_^_3_^_</span>\u548c\u7684\u5143\u7ec4<span translate=no>_^_4_^_</span>\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u5f62\u72b6\u4e3a<span translate=no>_^_5_^_</span>\u3002</p>\n",
 "<p> Create a network of <span translate=no>_^_0_^_</span> of LSTM.</p>\n": "<p>\u521b\u5efa\u4e00\u4e2a\u7531 LSTM<span translate=no>_^_0_^_</span> \u7ec4\u6210\u7684\u7f51\u7edc\u3002</p>\n",
 "<p><span translate=no>_^_0_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span></p>\n",
 "<p><span translate=no>_^_0_^_</span> Optionally, apply layer norm to <span translate=no>_^_1_^_</span> </p>\n": "<p><span translate=no>_^_0_^_</span>\u6216\u8005\uff0c\u5c06\u56fe\u5c42\u89c4\u8303\u5e94\u7528\u4e8e<span translate=no>_^_1_^_</span></p>\n",
 "<p>Apply layer normalization (not in original paper, but gives better results) </p>\n": "<p>\u5e94\u7528\u56fe\u5c42\u5f52\u4e00\u5316\uff08\u4e0d\u5728\u539f\u59cb\u7eb8\u5f20\u4e2d\uff0c\u4f46\u6548\u679c\u66f4\u597d\uff09</p>\n",
 "<p>Array to collect the outputs of the final layer at each time step. </p>\n": "<p>\u7528\u4e8e\u5728\u6bcf\u4e2a\u65f6\u95f4\u6b65\u6536\u96c6\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u7684\u6570\u7ec4\u3002</p>\n",
 "<p>Collect the output <span translate=no>_^_0_^_</span> of the final layer </p>\n": "<p>\u6536\u96c6\u6700\u540e\u4e00\u5c42<span translate=no>_^_0_^_</span>\u7684\u8f93\u51fa</p>\n",
 "<p>Create cells for each layer. Note that only the first layer gets the input directly. Rest of the layers get the input from the layer below </p>\n": "<p>\u4e3a\u6bcf\u5c42\u521b\u5efa\u5355\u5143\u3002\u8bf7\u6ce8\u610f\uff0c\u53ea\u6709\u7b2c\u4e00\u5c42\u76f4\u63a5\u83b7\u5f97\u8f93\u5165\u3002\u5176\u4f59\u56fe\u5c42\u4ece\u4e0b\u9762\u7684\u56fe\u5c42\u83b7\u53d6\u8f93\u5165</p>\n",
 "<p>Each layer produces an output of 4 times the <span translate=no>_^_0_^_</span> and we split them </p>\n": "<p>\u6bcf\u5c42\u4ea7\u751f 4 \u500d\u7684\u8f93\u51fa<span translate=no>_^_0_^_</span>\uff0c\u6211\u4eec\u5c06\u5176\u62c6\u5206</p>\n",
 "<p>Get the state of the layer </p>\n": "<p>\u83b7\u53d6\u56fe\u5c42\u7684\u72b6\u6001</p>\n",
 "<p>Initialize the state if <span translate=no>_^_0_^_</span> </p>\n": "<p>\u521d\u59cb\u5316\u72b6\u6001\u5982\u679c<span translate=no>_^_0_^_</span></p>\n",
 "<p>Input to the first layer is the input itself </p>\n": "<p>\u7b2c\u4e00\u5c42\u7684\u8f93\u5165\u662f\u8f93\u5165\u672c\u8eab</p>\n",
 "<p>Input to the next layer is the state of this layer </p>\n": "<p>\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u662f\u8be5\u56fe\u5c42\u7684\u72b6\u6001</p>\n",
 "<p>Loop through the layers </p>\n": "<p>\u5faa\u73af\u7a7f\u8fc7\u56fe\u5c42</p>\n",
 "<p>Reverse stack the tensors to get the states of each layer</p>\n<p>\ud83d\udcdd You can just work with the tensor itself but this is easier to debug </p>\n": "<p>\u53cd\u5411\u5806\u53e0\u5f20\u91cf\u4ee5\u83b7\u5f97\u6bcf\u5c42\u7684\u72b6\u6001</p>\n<p>\ud83d\udcdd \u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528\u5f20\u91cf\u672c\u8eab\uff0c\u4f46\u8fd9\u66f4\u5bb9\u6613\u8c03\u8bd5</p>\n",
 "<p>Stack the outputs and states </p>\n": "<p>\u5806\u53e0\u8f93\u51fa\u548c\u72b6\u6001</p>\n",
 "<p>These are the linear layer to transform the <span translate=no>_^_0_^_</span> and <span translate=no>_^_1_^_</span> vectors. One of them doesn&#x27;t need a bias since we add the transformations. </p>\n": "<p>\u8fd9\u4e9b\u662f\u7528\u4e8e\u53d8\u6362<span translate=no>_^_0_^_</span>\u548c\u5411<span translate=no>_^_1_^_</span>\u91cf\u7684\u7ebf\u6027\u56fe\u5c42\u3002\u5176\u4e2d\u4e00\u4e2a\u4e0d\u9700\u8981\u504f\u5dee\uff0c\u56e0\u4e3a\u6211\u4eec\u6dfb\u52a0\u4e86\u53d8\u6362\u3002</p>\n",
 "<p>This combines <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span>, <span translate=no>_^_2_^_</span>, and <span translate=no>_^_3_^_</span> transformations. </p>\n": "<p>\u8fd9\u7ed3\u5408<span translate=no>_^_0_^_</span>\u4e86<span translate=no>_^_1_^_</span>\u3001<span translate=no>_^_2_^_</span>\u3001\u548c<span translate=no>_^_3_^_</span>\u8f6c\u6362\u3002</p>\n",
 "<p>We compute the linear transformations for <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span>, <span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> using the same linear layers. </p>\n": "<p>\u6211\u4eec<span translate=no>_^_3_^_</span>\u4f7f\u7528\u76f8\u540c\u7684\u7ebf\u6027\u5c42\u8ba1\u7b97<span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u3001<span translate=no>_^_2_^_</span>\u548c\u7684\u7ebf\u6027\u53d8\u6362\u3002</p>\n",
 "<p>Whether to apply layer normalizations.</p>\n<p>Applying layer normalization gives better results. <span translate=no>_^_0_^_</span>, <span translate=no>_^_1_^_</span>, <span translate=no>_^_2_^_</span> and <span translate=no>_^_3_^_</span> embeddings are normalized and <span translate=no>_^_4_^_</span> is normalized in <span translate=no>_^_5_^_</span> </p>\n": "<p>\u662f\u5426\u5e94\u7528\u5c42\u5f52\u4e00\u5316\u3002</p>\n<p>\u5e94\u7528\u56fe\u5c42\u5f52\u4e00\u5316\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\u3002<span translate=no>_^_0_^_</span><span translate=no>_^_1_^_</span>\u3001<span translate=no>_^_2_^_</span>\u548c<span translate=no>_^_3_^_</span>\u5d4c\u5165\u662f\u6807\u51c6\u5316<span translate=no>_^_4_^_</span>\u7684\uff0c\u5e76\u5728<span translate=no>_^_5_^_</span></p>\n",
 "A simple PyTorch implementation/tutorial of Long Short-Term Memory (LSTM) modules.": "\u4e00\u4e2a\u7b80\u5355\u7684 PyTorch \u5b9e\u73b0/\u957f\u77ed\u671f\u8bb0\u5fc6 (LSTM) \u6a21\u5757\u6559\u7a0b\u3002",
 "Long Short-Term Memory (LSTM)": "\u957f\u671f\u77ed\u671f\u8bb0\u5fc6 (LSTM)"
}